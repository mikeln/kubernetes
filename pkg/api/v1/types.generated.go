/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg5_util "k8s.io/kubernetes/pkg/util"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	codecSelferC_UTF81234         = 1
	codecSelferC_RAW1234          = 0
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 4 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			4, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_runtime.RawExtension
		var v3 pkg1_types.UID
		var v4 pkg5_util.IntOrString
		var v5 pkg4_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				var yynn2 int = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
			}
			if yyr2 || yy2arr2 {
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yysep2 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym43 := z.DecBinary()
	_ = yym43
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl44 := r.ReadMapStart()
			if yyl44 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl44, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl44 := r.ReadArrayStart()
			if yyl44 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl44, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys45Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys45Slc
	var yyhl45 bool = l >= 0
	for yyj45 := 0; ; yyj45++ {
		if yyhl45 {
			if yyj45 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys45Slc = r.DecodeBytes(yys45Slc, true, true)
		yys45 := string(yys45Slc)
		switch yys45 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv53 := &x.CreationTimestamp
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else if yym54 {
					z.DecBinaryUnmarshal(yyv53)
				} else if !yym54 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv53)
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym56 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym56 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv59 := &x.Labels
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					z.F.DecMapStringStringX(yyv59, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv61 := &x.Annotations
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					z.F.DecMapStringStringX(yyv61, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys45)
		} // end switch yys45
	} // end for yyj45
	if !yyhl45 {
		r.ReadEnd()
	}
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv71 := &x.CreationTimestamp
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv71) {
		} else if yym72 {
			z.DecBinaryUnmarshal(yyv71)
		} else if !yym72 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv71)
		} else {
			z.DecFallback(yyv71, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym74 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym74 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv77 := &x.Labels
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			z.F.DecMapStringStringX(yyv77, false, d)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv79 := &x.Annotations
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			z.F.DecMapStringStringX(yyv79, false, d)
		}
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	r.ReadEnd()
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [17]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq82[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq82[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq82[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq82[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq82[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq82[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq82[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq82[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq82[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq82[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq82[12] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq82[13] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq82[14] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq82[15] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq82[16] = x.VolumeSource.FC != nil && x.FC != nil
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(17)
			} else {
				var yynn82 int = 1
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
			}
			if yyr82 || yy2arr82 {
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym85 := z.EncBinary()
				_ = yym85
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn86 bool
			if x.VolumeSource.HostPath == nil {
				yyn86 = true
				goto LABEL86
			}
		LABEL86:
			if yyr82 || yy2arr82 {
				if yyn86 {
					r.EncodeNil()
				} else {
					if yyq82[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yyn86 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn87 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn87 = true
				goto LABEL87
			}
		LABEL87:
			if yyr82 || yy2arr82 {
				if yyn87 {
					r.EncodeNil()
				} else {
					if yyq82[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[2] {
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if yyn87 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn88 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn88 = true
				goto LABEL88
			}
		LABEL88:
			if yyr82 || yy2arr82 {
				if yyn88 {
					r.EncodeNil()
				} else {
					if yyq82[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[3] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yyn88 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn89 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn89 = true
				goto LABEL89
			}
		LABEL89:
			if yyr82 || yy2arr82 {
				if yyn89 {
					r.EncodeNil()
				} else {
					if yyq82[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[4] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yyn89 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn90 bool
			if x.VolumeSource.GitRepo == nil {
				yyn90 = true
				goto LABEL90
			}
		LABEL90:
			if yyr82 || yy2arr82 {
				if yyn90 {
					r.EncodeNil()
				} else {
					if yyq82[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[5] {
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if yyn90 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn91 bool
			if x.VolumeSource.Secret == nil {
				yyn91 = true
				goto LABEL91
			}
		LABEL91:
			if yyr82 || yy2arr82 {
				if yyn91 {
					r.EncodeNil()
				} else {
					if yyq82[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[6] {
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if yyn91 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn92 bool
			if x.VolumeSource.NFS == nil {
				yyn92 = true
				goto LABEL92
			}
		LABEL92:
			if yyr82 || yy2arr82 {
				if yyn92 {
					r.EncodeNil()
				} else {
					if yyq82[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[7] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yyn92 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn93 bool
			if x.VolumeSource.ISCSI == nil {
				yyn93 = true
				goto LABEL93
			}
		LABEL93:
			if yyr82 || yy2arr82 {
				if yyn93 {
					r.EncodeNil()
				} else {
					if yyq82[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[8] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yyn93 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn94 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn94 = true
				goto LABEL94
			}
		LABEL94:
			if yyr82 || yy2arr82 {
				if yyn94 {
					r.EncodeNil()
				} else {
					if yyq82[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[9] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yyn94 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn95 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn95 = true
				goto LABEL95
			}
		LABEL95:
			if yyr82 || yy2arr82 {
				if yyn95 {
					r.EncodeNil()
				} else {
					if yyq82[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[10] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if yyn95 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn96 bool
			if x.VolumeSource.RBD == nil {
				yyn96 = true
				goto LABEL96
			}
		LABEL96:
			if yyr82 || yy2arr82 {
				if yyn96 {
					r.EncodeNil()
				} else {
					if yyq82[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[11] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yyn96 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn97 bool
			if x.VolumeSource.Cinder == nil {
				yyn97 = true
				goto LABEL97
			}
		LABEL97:
			if yyr82 || yy2arr82 {
				if yyn97 {
					r.EncodeNil()
				} else {
					if yyq82[12] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[12] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yyn97 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn98 bool
			if x.VolumeSource.CephFS == nil {
				yyn98 = true
				goto LABEL98
			}
		LABEL98:
			if yyr82 || yy2arr82 {
				if yyn98 {
					r.EncodeNil()
				} else {
					if yyq82[13] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[13] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yyn98 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn99 bool
			if x.VolumeSource.Flocker == nil {
				yyn99 = true
				goto LABEL99
			}
		LABEL99:
			if yyr82 || yy2arr82 {
				if yyn99 {
					r.EncodeNil()
				} else {
					if yyq82[14] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[14] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if yyn99 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn100 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr82 || yy2arr82 {
				if yyn100 {
					r.EncodeNil()
				} else {
					if yyq82[15] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[15] {
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.FC == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr82 || yy2arr82 {
				if yyn101 {
					r.EncodeNil()
				} else {
					if yyq82[16] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[16] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yysep82 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym102 := z.DecBinary()
	_ = yym102
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl103 := r.ReadMapStart()
			if yyl103 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl103, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl103 := r.ReadArrayStart()
			if yyl103 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl103, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys104Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys104Slc
	var yyhl104 bool = l >= 0
	for yyj104 := 0; ; yyj104++ {
		if yyhl104 {
			if yyj104 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys104Slc = r.DecodeBytes(yys104Slc, true, true)
		yys104 := string(yys104Slc)
		switch yys104 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys104)
		} // end switch yys104
	} // end for yyj104
	if !yyhl104 {
		r.ReadEnd()
	}
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj122 int
	var yyb122 bool
	var yyhl122 bool = l >= 0
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj122++
		if yyhl122 {
			yyb122 = yyj122 > l
		} else {
			yyb122 = r.CheckBreak()
		}
		if yyb122 {
			break
		}
		z.DecStructFieldNotFound(yyj122-1, "")
	}
	r.ReadEnd()
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym140 := z.EncBinary()
		_ = yym140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep141 := !z.EncBinary()
			yy2arr141 := z.EncBasicHandle().StructToArray
			var yyq141 [16]bool
			_, _, _ = yysep141, yyq141, yy2arr141
			const yyr141 bool = false
			yyq141[0] = x.HostPath != nil
			yyq141[1] = x.EmptyDir != nil
			yyq141[2] = x.GCEPersistentDisk != nil
			yyq141[3] = x.AWSElasticBlockStore != nil
			yyq141[4] = x.GitRepo != nil
			yyq141[5] = x.Secret != nil
			yyq141[6] = x.NFS != nil
			yyq141[7] = x.ISCSI != nil
			yyq141[8] = x.Glusterfs != nil
			yyq141[9] = x.PersistentVolumeClaim != nil
			yyq141[10] = x.RBD != nil
			yyq141[11] = x.Cinder != nil
			yyq141[12] = x.CephFS != nil
			yyq141[13] = x.Flocker != nil
			yyq141[14] = x.DownwardAPI != nil
			yyq141[15] = x.FC != nil
			if yyr141 || yy2arr141 {
				r.EncodeArrayStart(16)
			} else {
				var yynn141 int = 0
				for _, b := range yyq141 {
					if b {
						yynn141++
					}
				}
				r.EncodeMapStart(yynn141)
			}
			if yyr141 || yy2arr141 {
				if yyq141[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[1] {
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[2] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[3] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[4] {
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[5] {
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[6] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[7] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[8] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[9] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[10] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[11] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[11] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[12] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[12] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[13] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[13] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[14] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[14] {
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[15] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[15] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yysep141 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym158 := z.DecBinary()
	_ = yym158
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl159 := r.ReadMapStart()
			if yyl159 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl159, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl159 := r.ReadArrayStart()
			if yyl159 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl159, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys160Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys160Slc
	var yyhl160 bool = l >= 0
	for yyj160 := 0; ; yyj160++ {
		if yyhl160 {
			if yyj160 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys160Slc = r.DecodeBytes(yys160Slc, true, true)
		yys160 := string(yys160Slc)
		switch yys160 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys160)
		} // end switch yys160
	} // end for yyj160
	if !yyhl160 {
		r.ReadEnd()
	}
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj177 int
	var yyb177 bool
	var yyhl177 bool = l >= 0
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj177++
		if yyhl177 {
			yyb177 = yyj177 > l
		} else {
			yyb177 = r.CheckBreak()
		}
		if yyb177 {
			break
		}
		z.DecStructFieldNotFound(yyj177-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym194 := z.EncBinary()
		_ = yym194
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep195 := !z.EncBinary()
			yy2arr195 := z.EncBasicHandle().StructToArray
			var yyq195 [2]bool
			_, _, _ = yysep195, yyq195, yy2arr195
			const yyr195 bool = false
			yyq195[1] = x.ReadOnly != false
			if yyr195 || yy2arr195 {
				r.EncodeArrayStart(2)
			} else {
				var yynn195 int = 1
				for _, b := range yyq195 {
					if b {
						yynn195++
					}
				}
				r.EncodeMapStart(yynn195)
			}
			if yyr195 || yy2arr195 {
				yym197 := z.EncBinary()
				_ = yym197
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				yym198 := z.EncBinary()
				_ = yym198
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[1] {
					yym200 := z.EncBinary()
					_ = yym200
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq195[1] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym201 := z.EncBinary()
					_ = yym201
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep195 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym202 := z.DecBinary()
	_ = yym202
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl203 := r.ReadMapStart()
			if yyl203 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl203, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl203 := r.ReadArrayStart()
			if yyl203 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl203, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys204Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys204Slc
	var yyhl204 bool = l >= 0
	for yyj204 := 0; ; yyj204++ {
		if yyhl204 {
			if yyj204 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys204Slc = r.DecodeBytes(yys204Slc, true, true)
		yys204 := string(yys204Slc)
		switch yys204 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys204)
		} // end switch yys204
	} // end for yyj204
	if !yyhl204 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj207 int
	var yyb207 bool
	var yyhl207 bool = l >= 0
	yyj207++
	if yyhl207 {
		yyb207 = yyj207 > l
	} else {
		yyb207 = r.CheckBreak()
	}
	if yyb207 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj207++
	if yyhl207 {
		yyb207 = yyj207 > l
	} else {
		yyb207 = r.CheckBreak()
	}
	if yyb207 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj207++
		if yyhl207 {
			yyb207 = yyj207 > l
		} else {
			yyb207 = r.CheckBreak()
		}
		if yyb207 {
			break
		}
		z.DecStructFieldNotFound(yyj207-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym210 := z.EncBinary()
		_ = yym210
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep211 := !z.EncBinary()
			yy2arr211 := z.EncBasicHandle().StructToArray
			var yyq211 [11]bool
			_, _, _ = yysep211, yyq211, yy2arr211
			const yyr211 bool = false
			yyq211[0] = x.GCEPersistentDisk != nil
			yyq211[1] = x.AWSElasticBlockStore != nil
			yyq211[2] = x.HostPath != nil
			yyq211[3] = x.Glusterfs != nil
			yyq211[4] = x.NFS != nil
			yyq211[5] = x.RBD != nil
			yyq211[6] = x.ISCSI != nil
			yyq211[7] = x.Cinder != nil
			yyq211[8] = x.CephFS != nil
			yyq211[9] = x.FC != nil
			yyq211[10] = x.Flocker != nil
			if yyr211 || yy2arr211 {
				r.EncodeArrayStart(11)
			} else {
				var yynn211 int = 0
				for _, b := range yyq211 {
					if b {
						yynn211++
					}
				}
				r.EncodeMapStart(yynn211)
			}
			if yyr211 || yy2arr211 {
				if yyq211[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[0] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[1] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[2] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[3] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[4] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[5] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[6] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[7] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[8] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[9] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[10] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yysep211 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym223 := z.DecBinary()
	_ = yym223
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl224 := r.ReadMapStart()
			if yyl224 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl224, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl224 := r.ReadArrayStart()
			if yyl224 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl224, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys225Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys225Slc
	var yyhl225 bool = l >= 0
	for yyj225 := 0; ; yyj225++ {
		if yyhl225 {
			if yyj225 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys225Slc = r.DecodeBytes(yys225Slc, true, true)
		yys225 := string(yys225Slc)
		switch yys225 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys225)
		} // end switch yys225
	} // end for yyj225
	if !yyhl225 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj237 int
	var yyb237 bool
	var yyhl237 bool = l >= 0
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	for {
		yyj237++
		if yyhl237 {
			yyb237 = yyj237 > l
		} else {
			yyb237 = r.CheckBreak()
		}
		if yyb237 {
			break
		}
		z.DecStructFieldNotFound(yyj237-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym249 := z.EncBinary()
		_ = yym249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep250 := !z.EncBinary()
			yy2arr250 := z.EncBasicHandle().StructToArray
			var yyq250 [5]bool
			_, _, _ = yysep250, yyq250, yy2arr250
			const yyr250 bool = false
			yyq250[0] = x.Kind != ""
			yyq250[1] = x.APIVersion != ""
			yyq250[2] = true
			yyq250[3] = true
			yyq250[4] = true
			if yyr250 || yy2arr250 {
				r.EncodeArrayStart(5)
			} else {
				var yynn250 int = 0
				for _, b := range yyq250 {
					if b {
						yynn250++
					}
				}
				r.EncodeMapStart(yynn250)
			}
			if yyr250 || yy2arr250 {
				if yyq250[0] {
					yym252 := z.EncBinary()
					_ = yym252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym253 := z.EncBinary()
					_ = yym253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[1] {
					yym255 := z.EncBinary()
					_ = yym255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym256 := z.EncBinary()
					_ = yym256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[2] {
					yy258 := &x.ObjectMeta
					yy258.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy259 := &x.ObjectMeta
					yy259.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[3] {
					yy261 := &x.Spec
					yy261.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy262 := &x.Spec
					yy262.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[4] {
					yy264 := &x.Status
					yy264.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy265 := &x.Status
					yy265.CodecEncodeSelf(e)
				}
			}
			if yysep250 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym266 := z.DecBinary()
	_ = yym266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl267 := r.ReadMapStart()
			if yyl267 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl267, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl267 := r.ReadArrayStart()
			if yyl267 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl267, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys268Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys268Slc
	var yyhl268 bool = l >= 0
	for yyj268 := 0; ; yyj268++ {
		if yyhl268 {
			if yyj268 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys268Slc = r.DecodeBytes(yys268Slc, true, true)
		yys268 := string(yys268Slc)
		switch yys268 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv271 := &x.ObjectMeta
				yyv271.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv272 := &x.Spec
				yyv272.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv273 := &x.Status
				yyv273.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys268)
		} // end switch yys268
	} // end for yyj268
	if !yyhl268 {
		r.ReadEnd()
	}
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj274 int
	var yyb274 bool
	var yyhl274 bool = l >= 0
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv277 := &x.ObjectMeta
		yyv277.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv278 := &x.Spec
		yyv278.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv279 := &x.Status
		yyv279.CodecDecodeSelf(d)
	}
	for {
		yyj274++
		if yyhl274 {
			yyb274 = yyj274 > l
		} else {
			yyb274 = r.CheckBreak()
		}
		if yyb274 {
			break
		}
		z.DecStructFieldNotFound(yyj274-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym280 := z.EncBinary()
		_ = yym280
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep281 := !z.EncBinary()
			yy2arr281 := z.EncBasicHandle().StructToArray
			var yyq281 [15]bool
			_, _, _ = yysep281, yyq281, yy2arr281
			const yyr281 bool = false
			yyq281[0] = len(x.Capacity) != 0
			yyq281[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq281[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq281[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq281[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq281[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq281[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq281[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq281[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq281[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq281[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq281[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq281[12] = len(x.AccessModes) != 0
			yyq281[13] = x.ClaimRef != nil
			yyq281[14] = x.PersistentVolumeReclaimPolicy != ""
			if yyr281 || yy2arr281 {
				r.EncodeArrayStart(15)
			} else {
				var yynn281 int = 0
				for _, b := range yyq281 {
					if b {
						yynn281++
					}
				}
				r.EncodeMapStart(yynn281)
			}
			if yyr281 || yy2arr281 {
				if yyq281[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			var yyn283 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn283 = true
				goto LABEL283
			}
		LABEL283:
			if yyr281 || yy2arr281 {
				if yyn283 {
					r.EncodeNil()
				} else {
					if yyq281[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[1] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yyn283 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn284 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn284 = true
				goto LABEL284
			}
		LABEL284:
			if yyr281 || yy2arr281 {
				if yyn284 {
					r.EncodeNil()
				} else {
					if yyq281[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[2] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yyn284 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn285 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn285 = true
				goto LABEL285
			}
		LABEL285:
			if yyr281 || yy2arr281 {
				if yyn285 {
					r.EncodeNil()
				} else {
					if yyq281[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[3] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yyn285 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn286 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn286 = true
				goto LABEL286
			}
		LABEL286:
			if yyr281 || yy2arr281 {
				if yyn286 {
					r.EncodeNil()
				} else {
					if yyq281[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[4] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yyn286 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn287 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn287 = true
				goto LABEL287
			}
		LABEL287:
			if yyr281 || yy2arr281 {
				if yyn287 {
					r.EncodeNil()
				} else {
					if yyq281[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[5] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yyn287 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn288 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn288 = true
				goto LABEL288
			}
		LABEL288:
			if yyr281 || yy2arr281 {
				if yyn288 {
					r.EncodeNil()
				} else {
					if yyq281[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[6] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yyn288 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn289 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn289 = true
				goto LABEL289
			}
		LABEL289:
			if yyr281 || yy2arr281 {
				if yyn289 {
					r.EncodeNil()
				} else {
					if yyq281[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[7] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yyn289 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn290 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn290 = true
				goto LABEL290
			}
		LABEL290:
			if yyr281 || yy2arr281 {
				if yyn290 {
					r.EncodeNil()
				} else {
					if yyq281[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[8] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yyn290 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn291 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn291 = true
				goto LABEL291
			}
		LABEL291:
			if yyr281 || yy2arr281 {
				if yyn291 {
					r.EncodeNil()
				} else {
					if yyq281[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[9] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yyn291 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn292 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn292 = true
				goto LABEL292
			}
		LABEL292:
			if yyr281 || yy2arr281 {
				if yyn292 {
					r.EncodeNil()
				} else {
					if yyq281[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[10] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if yyn292 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn293 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn293 = true
				goto LABEL293
			}
		LABEL293:
			if yyr281 || yy2arr281 {
				if yyn293 {
					r.EncodeNil()
				} else {
					if yyq281[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[11] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if yyn293 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[12] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym295 := z.EncBinary()
						_ = yym295
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[12] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym296 := z.EncBinary()
						_ = yym296
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[13] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[13] {
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[14] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq281[14] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yysep281 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym299 := z.DecBinary()
	_ = yym299
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl300 := r.ReadMapStart()
			if yyl300 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl300, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl300 := r.ReadArrayStart()
			if yyl300 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl300, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys301Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys301Slc
	var yyhl301 bool = l >= 0
	for yyj301 := 0; ; yyj301++ {
		if yyhl301 {
			if yyj301 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys301Slc = r.DecodeBytes(yys301Slc, true, true)
		yys301 := string(yys301Slc)
		switch yys301 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv302 := &x.Capacity
				yyv302.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv314 := &x.AccessModes
				yym315 := z.DecBinary()
				_ = yym315
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv314), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys301)
		} // end switch yys301
	} // end for yyj301
	if !yyhl301 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj318 int
	var yyb318 bool
	var yyhl318 bool = l >= 0
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv319 := &x.Capacity
		yyv319.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv331 := &x.AccessModes
		yym332 := z.DecBinary()
		_ = yym332
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv331), d)
		}
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj318++
		if yyhl318 {
			yyb318 = yyj318 > l
		} else {
			yyb318 = r.CheckBreak()
		}
		if yyb318 {
			break
		}
		z.DecStructFieldNotFound(yyj318-1, "")
	}
	r.ReadEnd()
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym335 := z.EncBinary()
	_ = yym335
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym336 := z.DecBinary()
	_ = yym336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym337 := z.EncBinary()
		_ = yym337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep338 := !z.EncBinary()
			yy2arr338 := z.EncBasicHandle().StructToArray
			var yyq338 [3]bool
			_, _, _ = yysep338, yyq338, yy2arr338
			const yyr338 bool = false
			yyq338[0] = x.Phase != ""
			yyq338[1] = x.Message != ""
			yyq338[2] = x.Reason != ""
			if yyr338 || yy2arr338 {
				r.EncodeArrayStart(3)
			} else {
				var yynn338 int = 0
				for _, b := range yyq338 {
					if b {
						yynn338++
					}
				}
				r.EncodeMapStart(yynn338)
			}
			if yyr338 || yy2arr338 {
				if yyq338[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr338 || yy2arr338 {
				if yyq338[1] {
					yym341 := z.EncBinary()
					_ = yym341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[1] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym342 := z.EncBinary()
					_ = yym342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr338 || yy2arr338 {
				if yyq338[2] {
					yym344 := z.EncBinary()
					_ = yym344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym345 := z.EncBinary()
					_ = yym345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yysep338 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym346 := z.DecBinary()
	_ = yym346
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl347 := r.ReadMapStart()
			if yyl347 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl347, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl347 := r.ReadArrayStart()
			if yyl347 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl347, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys348Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys348Slc
	var yyhl348 bool = l >= 0
	for yyj348 := 0; ; yyj348++ {
		if yyhl348 {
			if yyj348 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys348Slc = r.DecodeBytes(yys348Slc, true, true)
		yys348 := string(yys348Slc)
		switch yys348 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys348)
		} // end switch yys348
	} // end for yyj348
	if !yyhl348 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj352 int
	var yyb352 bool
	var yyhl352 bool = l >= 0
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj352++
		if yyhl352 {
			yyb352 = yyj352 > l
		} else {
			yyb352 = r.CheckBreak()
		}
		if yyb352 {
			break
		}
		z.DecStructFieldNotFound(yyj352-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym356 := z.EncBinary()
		_ = yym356
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep357 := !z.EncBinary()
			yy2arr357 := z.EncBasicHandle().StructToArray
			var yyq357 [4]bool
			_, _, _ = yysep357, yyq357, yy2arr357
			const yyr357 bool = false
			yyq357[0] = x.Kind != ""
			yyq357[1] = x.APIVersion != ""
			yyq357[2] = true
			if yyr357 || yy2arr357 {
				r.EncodeArrayStart(4)
			} else {
				var yynn357 int = 1
				for _, b := range yyq357 {
					if b {
						yynn357++
					}
				}
				r.EncodeMapStart(yynn357)
			}
			if yyr357 || yy2arr357 {
				if yyq357[0] {
					yym359 := z.EncBinary()
					_ = yym359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym360 := z.EncBinary()
					_ = yym360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr357 || yy2arr357 {
				if yyq357[1] {
					yym362 := z.EncBinary()
					_ = yym362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym363 := z.EncBinary()
					_ = yym363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr357 || yy2arr357 {
				if yyq357[2] {
					yy365 := &x.ListMeta
					yym366 := z.EncBinary()
					_ = yym366
					if false {
					} else if z.HasExtensions() && z.EncExt(yy365) {
					} else {
						z.EncFallback(yy365)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq357[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy367 := &x.ListMeta
					yym368 := z.EncBinary()
					_ = yym368
					if false {
					} else if z.HasExtensions() && z.EncExt(yy367) {
					} else {
						z.EncFallback(yy367)
					}
				}
			}
			if yyr357 || yy2arr357 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym370 := z.EncBinary()
					_ = yym370
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yysep357 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym372 := z.DecBinary()
	_ = yym372
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl373 := r.ReadMapStart()
			if yyl373 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl373, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl373 := r.ReadArrayStart()
			if yyl373 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl373, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys374Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys374Slc
	var yyhl374 bool = l >= 0
	for yyj374 := 0; ; yyj374++ {
		if yyhl374 {
			if yyj374 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys374Slc = r.DecodeBytes(yys374Slc, true, true)
		yys374 := string(yys374Slc)
		switch yys374 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv377 := &x.ListMeta
				yym378 := z.DecBinary()
				_ = yym378
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv377) {
				} else {
					z.DecFallback(yyv377, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv379 := &x.Items
				yym380 := z.DecBinary()
				_ = yym380
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv379), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys374)
		} // end switch yys374
	} // end for yyj374
	if !yyhl374 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj381 int
	var yyb381 bool
	var yyhl381 bool = l >= 0
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv384 := &x.ListMeta
		yym385 := z.DecBinary()
		_ = yym385
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv384) {
		} else {
			z.DecFallback(yyv384, false)
		}
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv386 := &x.Items
		yym387 := z.DecBinary()
		_ = yym387
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv386), d)
		}
	}
	for {
		yyj381++
		if yyhl381 {
			yyb381 = yyj381 > l
		} else {
			yyb381 = r.CheckBreak()
		}
		if yyb381 {
			break
		}
		z.DecStructFieldNotFound(yyj381-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym388 := z.EncBinary()
		_ = yym388
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep389 := !z.EncBinary()
			yy2arr389 := z.EncBasicHandle().StructToArray
			var yyq389 [5]bool
			_, _, _ = yysep389, yyq389, yy2arr389
			const yyr389 bool = false
			yyq389[0] = x.Kind != ""
			yyq389[1] = x.APIVersion != ""
			yyq389[2] = true
			yyq389[3] = true
			yyq389[4] = true
			if yyr389 || yy2arr389 {
				r.EncodeArrayStart(5)
			} else {
				var yynn389 int = 0
				for _, b := range yyq389 {
					if b {
						yynn389++
					}
				}
				r.EncodeMapStart(yynn389)
			}
			if yyr389 || yy2arr389 {
				if yyq389[0] {
					yym391 := z.EncBinary()
					_ = yym391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym392 := z.EncBinary()
					_ = yym392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[1] {
					yym394 := z.EncBinary()
					_ = yym394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[2] {
					yy397 := &x.ObjectMeta
					yy397.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy398 := &x.ObjectMeta
					yy398.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[3] {
					yy400 := &x.Spec
					yy400.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy401 := &x.Spec
					yy401.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[4] {
					yy403 := &x.Status
					yy403.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy404 := &x.Status
					yy404.CodecEncodeSelf(e)
				}
			}
			if yysep389 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym405 := z.DecBinary()
	_ = yym405
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl406 := r.ReadMapStart()
			if yyl406 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl406, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl406 := r.ReadArrayStart()
			if yyl406 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl406, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys407Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys407Slc
	var yyhl407 bool = l >= 0
	for yyj407 := 0; ; yyj407++ {
		if yyhl407 {
			if yyj407 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys407Slc = r.DecodeBytes(yys407Slc, true, true)
		yys407 := string(yys407Slc)
		switch yys407 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv410 := &x.ObjectMeta
				yyv410.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv411 := &x.Spec
				yyv411.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv412 := &x.Status
				yyv412.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys407)
		} // end switch yys407
	} // end for yyj407
	if !yyhl407 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj413 int
	var yyb413 bool
	var yyhl413 bool = l >= 0
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv416 := &x.ObjectMeta
		yyv416.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv417 := &x.Spec
		yyv417.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv418 := &x.Status
		yyv418.CodecDecodeSelf(d)
	}
	for {
		yyj413++
		if yyhl413 {
			yyb413 = yyj413 > l
		} else {
			yyb413 = r.CheckBreak()
		}
		if yyb413 {
			break
		}
		z.DecStructFieldNotFound(yyj413-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym419 := z.EncBinary()
		_ = yym419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep420 := !z.EncBinary()
			yy2arr420 := z.EncBasicHandle().StructToArray
			var yyq420 [4]bool
			_, _, _ = yysep420, yyq420, yy2arr420
			const yyr420 bool = false
			yyq420[0] = x.Kind != ""
			yyq420[1] = x.APIVersion != ""
			yyq420[2] = true
			if yyr420 || yy2arr420 {
				r.EncodeArrayStart(4)
			} else {
				var yynn420 int = 1
				for _, b := range yyq420 {
					if b {
						yynn420++
					}
				}
				r.EncodeMapStart(yynn420)
			}
			if yyr420 || yy2arr420 {
				if yyq420[0] {
					yym422 := z.EncBinary()
					_ = yym422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym423 := z.EncBinary()
					_ = yym423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr420 || yy2arr420 {
				if yyq420[1] {
					yym425 := z.EncBinary()
					_ = yym425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr420 || yy2arr420 {
				if yyq420[2] {
					yy428 := &x.ListMeta
					yym429 := z.EncBinary()
					_ = yym429
					if false {
					} else if z.HasExtensions() && z.EncExt(yy428) {
					} else {
						z.EncFallback(yy428)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq420[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy430 := &x.ListMeta
					yym431 := z.EncBinary()
					_ = yym431
					if false {
					} else if z.HasExtensions() && z.EncExt(yy430) {
					} else {
						z.EncFallback(yy430)
					}
				}
			}
			if yyr420 || yy2arr420 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym433 := z.EncBinary()
					_ = yym433
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yysep420 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym435 := z.DecBinary()
	_ = yym435
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl436 := r.ReadMapStart()
			if yyl436 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl436, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl436 := r.ReadArrayStart()
			if yyl436 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl436, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys437Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys437Slc
	var yyhl437 bool = l >= 0
	for yyj437 := 0; ; yyj437++ {
		if yyhl437 {
			if yyj437 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys437Slc = r.DecodeBytes(yys437Slc, true, true)
		yys437 := string(yys437Slc)
		switch yys437 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv440 := &x.ListMeta
				yym441 := z.DecBinary()
				_ = yym441
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv440) {
				} else {
					z.DecFallback(yyv440, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv442 := &x.Items
				yym443 := z.DecBinary()
				_ = yym443
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv442), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys437)
		} // end switch yys437
	} // end for yyj437
	if !yyhl437 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj444 int
	var yyb444 bool
	var yyhl444 bool = l >= 0
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv447 := &x.ListMeta
		yym448 := z.DecBinary()
		_ = yym448
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv447) {
		} else {
			z.DecFallback(yyv447, false)
		}
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv449 := &x.Items
		yym450 := z.DecBinary()
		_ = yym450
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv449), d)
		}
	}
	for {
		yyj444++
		if yyhl444 {
			yyb444 = yyj444 > l
		} else {
			yyb444 = r.CheckBreak()
		}
		if yyb444 {
			break
		}
		z.DecStructFieldNotFound(yyj444-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym451 := z.EncBinary()
		_ = yym451
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep452 := !z.EncBinary()
			yy2arr452 := z.EncBasicHandle().StructToArray
			var yyq452 [3]bool
			_, _, _ = yysep452, yyq452, yy2arr452
			const yyr452 bool = false
			yyq452[0] = len(x.AccessModes) != 0
			yyq452[1] = true
			yyq452[2] = x.VolumeName != ""
			if yyr452 || yy2arr452 {
				r.EncodeArrayStart(3)
			} else {
				var yynn452 int = 0
				for _, b := range yyq452 {
					if b {
						yynn452++
					}
				}
				r.EncodeMapStart(yynn452)
			}
			if yyr452 || yy2arr452 {
				if yyq452[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym454 := z.EncBinary()
						_ = yym454
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[0] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym455 := z.EncBinary()
						_ = yym455
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr452 || yy2arr452 {
				if yyq452[1] {
					yy457 := &x.Resources
					yy457.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[1] {
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					yy458 := &x.Resources
					yy458.CodecEncodeSelf(e)
				}
			}
			if yyr452 || yy2arr452 {
				if yyq452[2] {
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq452[2] {
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					yym461 := z.EncBinary()
					_ = yym461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yysep452 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym462 := z.DecBinary()
	_ = yym462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl463 := r.ReadMapStart()
			if yyl463 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl463, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl463 := r.ReadArrayStart()
			if yyl463 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl463, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys464Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys464Slc
	var yyhl464 bool = l >= 0
	for yyj464 := 0; ; yyj464++ {
		if yyhl464 {
			if yyj464 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys464Slc = r.DecodeBytes(yys464Slc, true, true)
		yys464 := string(yys464Slc)
		switch yys464 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv465 := &x.AccessModes
				yym466 := z.DecBinary()
				_ = yym466
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv465), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv467 := &x.Resources
				yyv467.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys464)
		} // end switch yys464
	} // end for yyj464
	if !yyhl464 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj469 int
	var yyb469 bool
	var yyhl469 bool = l >= 0
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv470 := &x.AccessModes
		yym471 := z.DecBinary()
		_ = yym471
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv470), d)
		}
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv472 := &x.Resources
		yyv472.CodecDecodeSelf(d)
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj469++
		if yyhl469 {
			yyb469 = yyj469 > l
		} else {
			yyb469 = r.CheckBreak()
		}
		if yyb469 {
			break
		}
		z.DecStructFieldNotFound(yyj469-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym474 := z.EncBinary()
		_ = yym474
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep475 := !z.EncBinary()
			yy2arr475 := z.EncBasicHandle().StructToArray
			var yyq475 [3]bool
			_, _, _ = yysep475, yyq475, yy2arr475
			const yyr475 bool = false
			yyq475[0] = x.Phase != ""
			yyq475[1] = len(x.AccessModes) != 0
			yyq475[2] = len(x.Capacity) != 0
			if yyr475 || yy2arr475 {
				r.EncodeArrayStart(3)
			} else {
				var yynn475 int = 0
				for _, b := range yyq475 {
					if b {
						yynn475++
					}
				}
				r.EncodeMapStart(yynn475)
			}
			if yyr475 || yy2arr475 {
				if yyq475[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq475[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr475 || yy2arr475 {
				if yyq475[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym478 := z.EncBinary()
						_ = yym478
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[1] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym479 := z.EncBinary()
						_ = yym479
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr475 || yy2arr475 {
				if yyq475[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[2] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yysep475 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym481 := z.DecBinary()
	_ = yym481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl482 := r.ReadMapStart()
			if yyl482 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl482, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl482 := r.ReadArrayStart()
			if yyl482 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys483Slc
	var yyhl483 bool = l >= 0
	for yyj483 := 0; ; yyj483++ {
		if yyhl483 {
			if yyj483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys483Slc = r.DecodeBytes(yys483Slc, true, true)
		yys483 := string(yys483Slc)
		switch yys483 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv485 := &x.AccessModes
				yym486 := z.DecBinary()
				_ = yym486
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv485), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv487 := &x.Capacity
				yyv487.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys483)
		} // end switch yys483
	} // end for yyj483
	if !yyhl483 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj488 int
	var yyb488 bool
	var yyhl488 bool = l >= 0
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv490 := &x.AccessModes
		yym491 := z.DecBinary()
		_ = yym491
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv490), d)
		}
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv492 := &x.Capacity
		yyv492.CodecDecodeSelf(d)
	}
	for {
		yyj488++
		if yyhl488 {
			yyb488 = yyj488 > l
		} else {
			yyb488 = r.CheckBreak()
		}
		if yyb488 {
			break
		}
		z.DecStructFieldNotFound(yyj488-1, "")
	}
	r.ReadEnd()
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym493 := z.EncBinary()
	_ = yym493
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym494 := z.DecBinary()
	_ = yym494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym495 := z.EncBinary()
	_ = yym495
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym496 := z.DecBinary()
	_ = yym496
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym497 := z.EncBinary()
	_ = yym497
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym498 := z.DecBinary()
	_ = yym498
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym499 := z.EncBinary()
		_ = yym499
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep500 := !z.EncBinary()
			yy2arr500 := z.EncBasicHandle().StructToArray
			var yyq500 [1]bool
			_, _, _ = yysep500, yyq500, yy2arr500
			const yyr500 bool = false
			if yyr500 || yy2arr500 {
				r.EncodeArrayStart(1)
			} else {
				var yynn500 int = 1
				for _, b := range yyq500 {
					if b {
						yynn500++
					}
				}
				r.EncodeMapStart(yynn500)
			}
			if yyr500 || yy2arr500 {
				yym502 := z.EncBinary()
				_ = yym502
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym503 := z.EncBinary()
				_ = yym503
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yysep500 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym504 := z.DecBinary()
	_ = yym504
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl505 := r.ReadMapStart()
			if yyl505 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl505, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl505 := r.ReadArrayStart()
			if yyl505 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl505, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys506Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys506Slc
	var yyhl506 bool = l >= 0
	for yyj506 := 0; ; yyj506++ {
		if yyhl506 {
			if yyj506 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys506Slc = r.DecodeBytes(yys506Slc, true, true)
		yys506 := string(yys506Slc)
		switch yys506 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys506)
		} // end switch yys506
	} // end for yyj506
	if !yyhl506 {
		r.ReadEnd()
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj508 int
	var yyb508 bool
	var yyhl508 bool = l >= 0
	yyj508++
	if yyhl508 {
		yyb508 = yyj508 > l
	} else {
		yyb508 = r.CheckBreak()
	}
	if yyb508 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj508++
		if yyhl508 {
			yyb508 = yyj508 > l
		} else {
			yyb508 = r.CheckBreak()
		}
		if yyb508 {
			break
		}
		z.DecStructFieldNotFound(yyj508-1, "")
	}
	r.ReadEnd()
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym510 := z.EncBinary()
		_ = yym510
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep511 := !z.EncBinary()
			yy2arr511 := z.EncBasicHandle().StructToArray
			var yyq511 [1]bool
			_, _, _ = yysep511, yyq511, yy2arr511
			const yyr511 bool = false
			yyq511[0] = x.Medium != ""
			if yyr511 || yy2arr511 {
				r.EncodeArrayStart(1)
			} else {
				var yynn511 int = 0
				for _, b := range yyq511 {
					if b {
						yynn511++
					}
				}
				r.EncodeMapStart(yynn511)
			}
			if yyr511 || yy2arr511 {
				if yyq511[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq511[0] {
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yysep511 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym513 := z.DecBinary()
	_ = yym513
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl514 := r.ReadMapStart()
			if yyl514 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl514, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl514 := r.ReadArrayStart()
			if yyl514 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl514, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys515Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys515Slc
	var yyhl515 bool = l >= 0
	for yyj515 := 0; ; yyj515++ {
		if yyhl515 {
			if yyj515 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys515Slc = r.DecodeBytes(yys515Slc, true, true)
		yys515 := string(yys515Slc)
		switch yys515 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys515)
		} // end switch yys515
	} // end for yyj515
	if !yyhl515 {
		r.ReadEnd()
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj517 int
	var yyb517 bool
	var yyhl517 bool = l >= 0
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj517++
		if yyhl517 {
			yyb517 = yyj517 > l
		} else {
			yyb517 = r.CheckBreak()
		}
		if yyb517 {
			break
		}
		z.DecStructFieldNotFound(yyj517-1, "")
	}
	r.ReadEnd()
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym519 := z.EncBinary()
		_ = yym519
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep520 := !z.EncBinary()
			yy2arr520 := z.EncBasicHandle().StructToArray
			var yyq520 [3]bool
			_, _, _ = yysep520, yyq520, yy2arr520
			const yyr520 bool = false
			yyq520[2] = x.ReadOnly != false
			if yyr520 || yy2arr520 {
				r.EncodeArrayStart(3)
			} else {
				var yynn520 int = 2
				for _, b := range yyq520 {
					if b {
						yynn520++
					}
				}
				r.EncodeMapStart(yynn520)
			}
			if yyr520 || yy2arr520 {
				yym522 := z.EncBinary()
				_ = yym522
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				yym523 := z.EncBinary()
				_ = yym523
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr520 || yy2arr520 {
				yym525 := z.EncBinary()
				_ = yym525
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym526 := z.EncBinary()
				_ = yym526
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr520 || yy2arr520 {
				if yyq520[2] {
					yym528 := z.EncBinary()
					_ = yym528
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq520[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym529 := z.EncBinary()
					_ = yym529
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep520 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym530 := z.DecBinary()
	_ = yym530
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl531 := r.ReadMapStart()
			if yyl531 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl531, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl531 := r.ReadArrayStart()
			if yyl531 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl531, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys532Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys532Slc
	var yyhl532 bool = l >= 0
	for yyj532 := 0; ; yyj532++ {
		if yyhl532 {
			if yyj532 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys532Slc = r.DecodeBytes(yys532Slc, true, true)
		yys532 := string(yys532Slc)
		switch yys532 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys532)
		} // end switch yys532
	} // end for yyj532
	if !yyhl532 {
		r.ReadEnd()
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj536 int
	var yyb536 bool
	var yyhl536 bool = l >= 0
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj536++
		if yyhl536 {
			yyb536 = yyj536 > l
		} else {
			yyb536 = r.CheckBreak()
		}
		if yyb536 {
			break
		}
		z.DecStructFieldNotFound(yyj536-1, "")
	}
	r.ReadEnd()
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym540 := z.EncBinary()
	_ = yym540
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym541 := z.DecBinary()
	_ = yym541
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym542 := z.EncBinary()
		_ = yym542
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep543 := !z.EncBinary()
			yy2arr543 := z.EncBasicHandle().StructToArray
			var yyq543 [8]bool
			_, _, _ = yysep543, yyq543, yy2arr543
			const yyr543 bool = false
			yyq543[2] = x.FSType != ""
			yyq543[7] = x.ReadOnly != false
			if yyr543 || yy2arr543 {
				r.EncodeArrayStart(8)
			} else {
				var yynn543 int = 6
				for _, b := range yyq543 {
					if b {
						yynn543++
					}
				}
				r.EncodeMapStart(yynn543)
			}
			if yyr543 || yy2arr543 {
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym545 := z.EncBinary()
					_ = yym545
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym546 := z.EncBinary()
					_ = yym546
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr543 || yy2arr543 {
				yym548 := z.EncBinary()
				_ = yym548
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym549 := z.EncBinary()
				_ = yym549
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr543 || yy2arr543 {
				if yyq543[2] {
					yym551 := z.EncBinary()
					_ = yym551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq543[2] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym552 := z.EncBinary()
					_ = yym552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr543 || yy2arr543 {
				yym554 := z.EncBinary()
				_ = yym554
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				yym555 := z.EncBinary()
				_ = yym555
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr543 || yy2arr543 {
				yym557 := z.EncBinary()
				_ = yym557
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				yym558 := z.EncBinary()
				_ = yym558
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr543 || yy2arr543 {
				yym560 := z.EncBinary()
				_ = yym560
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				yym561 := z.EncBinary()
				_ = yym561
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr543 || yy2arr543 {
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr543 || yy2arr543 {
				if yyq543[7] {
					yym564 := z.EncBinary()
					_ = yym564
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq543[7] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym565 := z.EncBinary()
					_ = yym565
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep543 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym566 := z.DecBinary()
	_ = yym566
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl567 := r.ReadMapStart()
			if yyl567 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl567, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl567 := r.ReadArrayStart()
			if yyl567 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl567, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys568Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys568Slc
	var yyhl568 bool = l >= 0
	for yyj568 := 0; ; yyj568++ {
		if yyhl568 {
			if yyj568 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys568Slc = r.DecodeBytes(yys568Slc, true, true)
		yys568 := string(yys568Slc)
		switch yys568 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv569 := &x.CephMonitors
				yym570 := z.DecBinary()
				_ = yym570
				if false {
				} else {
					z.F.DecSliceStringX(yyv569, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys568)
		} // end switch yys568
	} // end for yyj568
	if !yyhl568 {
		r.ReadEnd()
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj578 int
	var yyb578 bool
	var yyhl578 bool = l >= 0
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv579 := &x.CephMonitors
		yym580 := z.DecBinary()
		_ = yym580
		if false {
		} else {
			z.F.DecSliceStringX(yyv579, false, d)
		}
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj578++
		if yyhl578 {
			yyb578 = yyj578 > l
		} else {
			yyb578 = r.CheckBreak()
		}
		if yyb578 {
			break
		}
		z.DecStructFieldNotFound(yyj578-1, "")
	}
	r.ReadEnd()
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym588 := z.EncBinary()
		_ = yym588
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep589 := !z.EncBinary()
			yy2arr589 := z.EncBasicHandle().StructToArray
			var yyq589 [3]bool
			_, _, _ = yysep589, yyq589, yy2arr589
			const yyr589 bool = false
			yyq589[1] = x.FSType != ""
			yyq589[2] = x.ReadOnly != false
			if yyr589 || yy2arr589 {
				r.EncodeArrayStart(3)
			} else {
				var yynn589 int = 1
				for _, b := range yyq589 {
					if b {
						yynn589++
					}
				}
				r.EncodeMapStart(yynn589)
			}
			if yyr589 || yy2arr589 {
				yym591 := z.EncBinary()
				_ = yym591
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				yym592 := z.EncBinary()
				_ = yym592
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr589 || yy2arr589 {
				if yyq589[1] {
					yym594 := z.EncBinary()
					_ = yym594
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq589[1] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym595 := z.EncBinary()
					_ = yym595
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr589 || yy2arr589 {
				if yyq589[2] {
					yym597 := z.EncBinary()
					_ = yym597
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq589[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym598 := z.EncBinary()
					_ = yym598
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep589 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym599 := z.DecBinary()
	_ = yym599
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl600 := r.ReadMapStart()
			if yyl600 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl600, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl600 := r.ReadArrayStart()
			if yyl600 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl600, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys601Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys601Slc
	var yyhl601 bool = l >= 0
	for yyj601 := 0; ; yyj601++ {
		if yyhl601 {
			if yyj601 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys601Slc = r.DecodeBytes(yys601Slc, true, true)
		yys601 := string(yys601Slc)
		switch yys601 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys601)
		} // end switch yys601
	} // end for yyj601
	if !yyhl601 {
		r.ReadEnd()
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj605 int
	var yyb605 bool
	var yyhl605 bool = l >= 0
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj605++
		if yyhl605 {
			yyb605 = yyj605 > l
		} else {
			yyb605 = r.CheckBreak()
		}
		if yyb605 {
			break
		}
		z.DecStructFieldNotFound(yyj605-1, "")
	}
	r.ReadEnd()
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym609 := z.EncBinary()
		_ = yym609
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep610 := !z.EncBinary()
			yy2arr610 := z.EncBasicHandle().StructToArray
			var yyq610 [5]bool
			_, _, _ = yysep610, yyq610, yy2arr610
			const yyr610 bool = false
			yyq610[1] = x.User != ""
			yyq610[2] = x.SecretFile != ""
			yyq610[3] = x.SecretRef != nil
			yyq610[4] = x.ReadOnly != false
			if yyr610 || yy2arr610 {
				r.EncodeArrayStart(5)
			} else {
				var yynn610 int = 1
				for _, b := range yyq610 {
					if b {
						yynn610++
					}
				}
				r.EncodeMapStart(yynn610)
			}
			if yyr610 || yy2arr610 {
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym612 := z.EncBinary()
					_ = yym612
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym613 := z.EncBinary()
					_ = yym613
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yyq610[1] {
					yym615 := z.EncBinary()
					_ = yym615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq610[1] {
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					yym616 := z.EncBinary()
					_ = yym616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yyq610[2] {
					yym618 := z.EncBinary()
					_ = yym618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq610[2] {
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yyq610[3] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq610[3] {
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yyq610[4] {
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq610[4] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym623 := z.EncBinary()
					_ = yym623
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep610 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym624 := z.DecBinary()
	_ = yym624
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl625 := r.ReadMapStart()
			if yyl625 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl625, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl625 := r.ReadArrayStart()
			if yyl625 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl625, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys626Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys626Slc
	var yyhl626 bool = l >= 0
	for yyj626 := 0; ; yyj626++ {
		if yyhl626 {
			if yyj626 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys626Slc = r.DecodeBytes(yys626Slc, true, true)
		yys626 := string(yys626Slc)
		switch yys626 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv627 := &x.Monitors
				yym628 := z.DecBinary()
				_ = yym628
				if false {
				} else {
					z.F.DecSliceStringX(yyv627, false, d)
				}
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys626)
		} // end switch yys626
	} // end for yyj626
	if !yyhl626 {
		r.ReadEnd()
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj633 int
	var yyb633 bool
	var yyhl633 bool = l >= 0
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv634 := &x.Monitors
		yym635 := z.DecBinary()
		_ = yym635
		if false {
		} else {
			z.F.DecSliceStringX(yyv634, false, d)
		}
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj633++
		if yyhl633 {
			yyb633 = yyj633 > l
		} else {
			yyb633 = r.CheckBreak()
		}
		if yyb633 {
			break
		}
		z.DecStructFieldNotFound(yyj633-1, "")
	}
	r.ReadEnd()
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym640 := z.EncBinary()
		_ = yym640
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep641 := !z.EncBinary()
			yy2arr641 := z.EncBasicHandle().StructToArray
			var yyq641 [1]bool
			_, _, _ = yysep641, yyq641, yy2arr641
			const yyr641 bool = false
			if yyr641 || yy2arr641 {
				r.EncodeArrayStart(1)
			} else {
				var yynn641 int = 1
				for _, b := range yyq641 {
					if b {
						yynn641++
					}
				}
				r.EncodeMapStart(yynn641)
			}
			if yyr641 || yy2arr641 {
				yym643 := z.EncBinary()
				_ = yym643
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				yym644 := z.EncBinary()
				_ = yym644
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yysep641 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym645 := z.DecBinary()
	_ = yym645
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl646 := r.ReadMapStart()
			if yyl646 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl646, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl646 := r.ReadArrayStart()
			if yyl646 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl646, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys647Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys647Slc
	var yyhl647 bool = l >= 0
	for yyj647 := 0; ; yyj647++ {
		if yyhl647 {
			if yyj647 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys647Slc = r.DecodeBytes(yys647Slc, true, true)
		yys647 := string(yys647Slc)
		switch yys647 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys647)
		} // end switch yys647
	} // end for yyj647
	if !yyhl647 {
		r.ReadEnd()
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj649 int
	var yyb649 bool
	var yyhl649 bool = l >= 0
	yyj649++
	if yyhl649 {
		yyb649 = yyj649 > l
	} else {
		yyb649 = r.CheckBreak()
	}
	if yyb649 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj649++
		if yyhl649 {
			yyb649 = yyj649 > l
		} else {
			yyb649 = r.CheckBreak()
		}
		if yyb649 {
			break
		}
		z.DecStructFieldNotFound(yyj649-1, "")
	}
	r.ReadEnd()
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym651 := z.EncBinary()
	_ = yym651
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym652 := z.DecBinary()
	_ = yym652
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym653 := z.EncBinary()
		_ = yym653
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep654 := !z.EncBinary()
			yy2arr654 := z.EncBasicHandle().StructToArray
			var yyq654 [4]bool
			_, _, _ = yysep654, yyq654, yy2arr654
			const yyr654 bool = false
			yyq654[2] = x.Partition != 0
			yyq654[3] = x.ReadOnly != false
			if yyr654 || yy2arr654 {
				r.EncodeArrayStart(4)
			} else {
				var yynn654 int = 2
				for _, b := range yyq654 {
					if b {
						yynn654++
					}
				}
				r.EncodeMapStart(yynn654)
			}
			if yyr654 || yy2arr654 {
				yym656 := z.EncBinary()
				_ = yym656
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				yym657 := z.EncBinary()
				_ = yym657
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr654 || yy2arr654 {
				yym659 := z.EncBinary()
				_ = yym659
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym660 := z.EncBinary()
				_ = yym660
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr654 || yy2arr654 {
				if yyq654[2] {
					yym662 := z.EncBinary()
					_ = yym662
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq654[2] {
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					yym663 := z.EncBinary()
					_ = yym663
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr654 || yy2arr654 {
				if yyq654[3] {
					yym665 := z.EncBinary()
					_ = yym665
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq654[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym666 := z.EncBinary()
					_ = yym666
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep654 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym667 := z.DecBinary()
	_ = yym667
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl668 := r.ReadMapStart()
			if yyl668 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl668, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl668 := r.ReadArrayStart()
			if yyl668 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl668, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys669Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys669Slc
	var yyhl669 bool = l >= 0
	for yyj669 := 0; ; yyj669++ {
		if yyhl669 {
			if yyj669 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys669Slc = r.DecodeBytes(yys669Slc, true, true)
		yys669 := string(yys669Slc)
		switch yys669 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys669)
		} // end switch yys669
	} // end for yyj669
	if !yyhl669 {
		r.ReadEnd()
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj674 int
	var yyb674 bool
	var yyhl674 bool = l >= 0
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj674++
		if yyhl674 {
			yyb674 = yyj674 > l
		} else {
			yyb674 = r.CheckBreak()
		}
		if yyb674 {
			break
		}
		z.DecStructFieldNotFound(yyj674-1, "")
	}
	r.ReadEnd()
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym679 := z.EncBinary()
		_ = yym679
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep680 := !z.EncBinary()
			yy2arr680 := z.EncBasicHandle().StructToArray
			var yyq680 [4]bool
			_, _, _ = yysep680, yyq680, yy2arr680
			const yyr680 bool = false
			yyq680[2] = x.Partition != 0
			yyq680[3] = x.ReadOnly != false
			if yyr680 || yy2arr680 {
				r.EncodeArrayStart(4)
			} else {
				var yynn680 int = 2
				for _, b := range yyq680 {
					if b {
						yynn680++
					}
				}
				r.EncodeMapStart(yynn680)
			}
			if yyr680 || yy2arr680 {
				yym682 := z.EncBinary()
				_ = yym682
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				yym683 := z.EncBinary()
				_ = yym683
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr680 || yy2arr680 {
				yym685 := z.EncBinary()
				_ = yym685
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym686 := z.EncBinary()
				_ = yym686
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr680 || yy2arr680 {
				if yyq680[2] {
					yym688 := z.EncBinary()
					_ = yym688
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq680[2] {
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					yym689 := z.EncBinary()
					_ = yym689
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr680 || yy2arr680 {
				if yyq680[3] {
					yym691 := z.EncBinary()
					_ = yym691
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq680[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym692 := z.EncBinary()
					_ = yym692
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep680 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym693 := z.DecBinary()
	_ = yym693
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl694 := r.ReadMapStart()
			if yyl694 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl694, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl694 := r.ReadArrayStart()
			if yyl694 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl694, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys695Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys695Slc
	var yyhl695 bool = l >= 0
	for yyj695 := 0; ; yyj695++ {
		if yyhl695 {
			if yyj695 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys695Slc = r.DecodeBytes(yys695Slc, true, true)
		yys695 := string(yys695Slc)
		switch yys695 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys695)
		} // end switch yys695
	} // end for yyj695
	if !yyhl695 {
		r.ReadEnd()
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj700 int
	var yyb700 bool
	var yyhl700 bool = l >= 0
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj700++
		if yyhl700 {
			yyb700 = yyj700 > l
		} else {
			yyb700 = r.CheckBreak()
		}
		if yyb700 {
			break
		}
		z.DecStructFieldNotFound(yyj700-1, "")
	}
	r.ReadEnd()
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym705 := z.EncBinary()
		_ = yym705
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep706 := !z.EncBinary()
			yy2arr706 := z.EncBasicHandle().StructToArray
			var yyq706 [2]bool
			_, _, _ = yysep706, yyq706, yy2arr706
			const yyr706 bool = false
			if yyr706 || yy2arr706 {
				r.EncodeArrayStart(2)
			} else {
				var yynn706 int = 2
				for _, b := range yyq706 {
					if b {
						yynn706++
					}
				}
				r.EncodeMapStart(yynn706)
			}
			if yyr706 || yy2arr706 {
				yym708 := z.EncBinary()
				_ = yym708
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				yym709 := z.EncBinary()
				_ = yym709
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr706 || yy2arr706 {
				yym711 := z.EncBinary()
				_ = yym711
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("revision"))
				yym712 := z.EncBinary()
				_ = yym712
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			}
			if yysep706 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym713 := z.DecBinary()
	_ = yym713
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl714 := r.ReadMapStart()
			if yyl714 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl714, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl714 := r.ReadArrayStart()
			if yyl714 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl714, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys715Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys715Slc
	var yyhl715 bool = l >= 0
	for yyj715 := 0; ; yyj715++ {
		if yyhl715 {
			if yyj715 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys715Slc = r.DecodeBytes(yys715Slc, true, true)
		yys715 := string(yys715Slc)
		switch yys715 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys715)
		} // end switch yys715
	} // end for yyj715
	if !yyhl715 {
		r.ReadEnd()
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj718 int
	var yyb718 bool
	var yyhl718 bool = l >= 0
	yyj718++
	if yyhl718 {
		yyb718 = yyj718 > l
	} else {
		yyb718 = r.CheckBreak()
	}
	if yyb718 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj718++
	if yyhl718 {
		yyb718 = yyj718 > l
	} else {
		yyb718 = r.CheckBreak()
	}
	if yyb718 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	for {
		yyj718++
		if yyhl718 {
			yyb718 = yyj718 > l
		} else {
			yyb718 = r.CheckBreak()
		}
		if yyb718 {
			break
		}
		z.DecStructFieldNotFound(yyj718-1, "")
	}
	r.ReadEnd()
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym721 := z.EncBinary()
		_ = yym721
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep722 := !z.EncBinary()
			yy2arr722 := z.EncBasicHandle().StructToArray
			var yyq722 [1]bool
			_, _, _ = yysep722, yyq722, yy2arr722
			const yyr722 bool = false
			if yyr722 || yy2arr722 {
				r.EncodeArrayStart(1)
			} else {
				var yynn722 int = 1
				for _, b := range yyq722 {
					if b {
						yynn722++
					}
				}
				r.EncodeMapStart(yynn722)
			}
			if yyr722 || yy2arr722 {
				yym724 := z.EncBinary()
				_ = yym724
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				yym725 := z.EncBinary()
				_ = yym725
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yysep722 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym726 := z.DecBinary()
	_ = yym726
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl727 := r.ReadMapStart()
			if yyl727 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl727, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl727 := r.ReadArrayStart()
			if yyl727 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl727, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys728Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys728Slc
	var yyhl728 bool = l >= 0
	for yyj728 := 0; ; yyj728++ {
		if yyhl728 {
			if yyj728 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys728Slc = r.DecodeBytes(yys728Slc, true, true)
		yys728 := string(yys728Slc)
		switch yys728 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys728)
		} // end switch yys728
	} // end for yyj728
	if !yyhl728 {
		r.ReadEnd()
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj730 int
	var yyb730 bool
	var yyhl730 bool = l >= 0
	yyj730++
	if yyhl730 {
		yyb730 = yyj730 > l
	} else {
		yyb730 = r.CheckBreak()
	}
	if yyb730 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj730++
		if yyhl730 {
			yyb730 = yyj730 > l
		} else {
			yyb730 = r.CheckBreak()
		}
		if yyb730 {
			break
		}
		z.DecStructFieldNotFound(yyj730-1, "")
	}
	r.ReadEnd()
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym732 := z.EncBinary()
		_ = yym732
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep733 := !z.EncBinary()
			yy2arr733 := z.EncBasicHandle().StructToArray
			var yyq733 [3]bool
			_, _, _ = yysep733, yyq733, yy2arr733
			const yyr733 bool = false
			yyq733[2] = x.ReadOnly != false
			if yyr733 || yy2arr733 {
				r.EncodeArrayStart(3)
			} else {
				var yynn733 int = 2
				for _, b := range yyq733 {
					if b {
						yynn733++
					}
				}
				r.EncodeMapStart(yynn733)
			}
			if yyr733 || yy2arr733 {
				yym735 := z.EncBinary()
				_ = yym735
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				yym736 := z.EncBinary()
				_ = yym736
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr733 || yy2arr733 {
				yym738 := z.EncBinary()
				_ = yym738
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym739 := z.EncBinary()
				_ = yym739
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr733 || yy2arr733 {
				if yyq733[2] {
					yym741 := z.EncBinary()
					_ = yym741
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq733[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym742 := z.EncBinary()
					_ = yym742
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep733 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym743 := z.DecBinary()
	_ = yym743
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl744 := r.ReadMapStart()
			if yyl744 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl744, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl744 := r.ReadArrayStart()
			if yyl744 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl744, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys745Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys745Slc
	var yyhl745 bool = l >= 0
	for yyj745 := 0; ; yyj745++ {
		if yyhl745 {
			if yyj745 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys745Slc = r.DecodeBytes(yys745Slc, true, true)
		yys745 := string(yys745Slc)
		switch yys745 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys745)
		} // end switch yys745
	} // end for yyj745
	if !yyhl745 {
		r.ReadEnd()
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj749 int
	var yyb749 bool
	var yyhl749 bool = l >= 0
	yyj749++
	if yyhl749 {
		yyb749 = yyj749 > l
	} else {
		yyb749 = r.CheckBreak()
	}
	if yyb749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj749++
	if yyhl749 {
		yyb749 = yyj749 > l
	} else {
		yyb749 = r.CheckBreak()
	}
	if yyb749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj749++
	if yyhl749 {
		yyb749 = yyj749 > l
	} else {
		yyb749 = r.CheckBreak()
	}
	if yyb749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj749++
		if yyhl749 {
			yyb749 = yyj749 > l
		} else {
			yyb749 = r.CheckBreak()
		}
		if yyb749 {
			break
		}
		z.DecStructFieldNotFound(yyj749-1, "")
	}
	r.ReadEnd()
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym753 := z.EncBinary()
		_ = yym753
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep754 := !z.EncBinary()
			yy2arr754 := z.EncBasicHandle().StructToArray
			var yyq754 [5]bool
			_, _, _ = yysep754, yyq754, yy2arr754
			const yyr754 bool = false
			yyq754[4] = x.ReadOnly != false
			if yyr754 || yy2arr754 {
				r.EncodeArrayStart(5)
			} else {
				var yynn754 int = 4
				for _, b := range yyq754 {
					if b {
						yynn754++
					}
				}
				r.EncodeMapStart(yynn754)
			}
			if yyr754 || yy2arr754 {
				yym756 := z.EncBinary()
				_ = yym756
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				yym757 := z.EncBinary()
				_ = yym757
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr754 || yy2arr754 {
				yym759 := z.EncBinary()
				_ = yym759
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				yym760 := z.EncBinary()
				_ = yym760
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr754 || yy2arr754 {
				yym762 := z.EncBinary()
				_ = yym762
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				yym763 := z.EncBinary()
				_ = yym763
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr754 || yy2arr754 {
				yym765 := z.EncBinary()
				_ = yym765
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym766 := z.EncBinary()
				_ = yym766
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr754 || yy2arr754 {
				if yyq754[4] {
					yym768 := z.EncBinary()
					_ = yym768
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq754[4] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym769 := z.EncBinary()
					_ = yym769
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep754 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym770 := z.DecBinary()
	_ = yym770
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl771 := r.ReadMapStart()
			if yyl771 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl771, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl771 := r.ReadArrayStart()
			if yyl771 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl771, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys772Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys772Slc
	var yyhl772 bool = l >= 0
	for yyj772 := 0; ; yyj772++ {
		if yyhl772 {
			if yyj772 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys772Slc = r.DecodeBytes(yys772Slc, true, true)
		yys772 := string(yys772Slc)
		switch yys772 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys772)
		} // end switch yys772
	} // end for yyj772
	if !yyhl772 {
		r.ReadEnd()
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj778 int
	var yyb778 bool
	var yyhl778 bool = l >= 0
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj778++
		if yyhl778 {
			yyb778 = yyj778 > l
		} else {
			yyb778 = r.CheckBreak()
		}
		if yyb778 {
			break
		}
		z.DecStructFieldNotFound(yyj778-1, "")
	}
	r.ReadEnd()
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym784 := z.EncBinary()
		_ = yym784
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep785 := !z.EncBinary()
			yy2arr785 := z.EncBasicHandle().StructToArray
			var yyq785 [4]bool
			_, _, _ = yysep785, yyq785, yy2arr785
			const yyr785 bool = false
			yyq785[3] = x.ReadOnly != false
			if yyr785 || yy2arr785 {
				r.EncodeArrayStart(4)
			} else {
				var yynn785 int = 3
				for _, b := range yyq785 {
					if b {
						yynn785++
					}
				}
				r.EncodeMapStart(yynn785)
			}
			if yyr785 || yy2arr785 {
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym787 := z.EncBinary()
					_ = yym787
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym788 := z.EncBinary()
					_ = yym788
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr785 || yy2arr785 {
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy790 := *x.Lun
					yym791 := z.EncBinary()
					_ = yym791
					if false {
					} else {
						r.EncodeInt(int64(yy790))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy792 := *x.Lun
					yym793 := z.EncBinary()
					_ = yym793
					if false {
					} else {
						r.EncodeInt(int64(yy792))
					}
				}
			}
			if yyr785 || yy2arr785 {
				yym795 := z.EncBinary()
				_ = yym795
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym796 := z.EncBinary()
				_ = yym796
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr785 || yy2arr785 {
				if yyq785[3] {
					yym798 := z.EncBinary()
					_ = yym798
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq785[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym799 := z.EncBinary()
					_ = yym799
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep785 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym800 := z.DecBinary()
	_ = yym800
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl801 := r.ReadMapStart()
			if yyl801 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl801, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl801 := r.ReadArrayStart()
			if yyl801 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl801, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys802Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys802Slc
	var yyhl802 bool = l >= 0
	for yyj802 := 0; ; yyj802++ {
		if yyhl802 {
			if yyj802 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys802Slc = r.DecodeBytes(yys802Slc, true, true)
		yys802 := string(yys802Slc)
		switch yys802 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv803 := &x.TargetWWNs
				yym804 := z.DecBinary()
				_ = yym804
				if false {
				} else {
					z.F.DecSliceStringX(yyv803, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int)
				}
				yym806 := z.DecBinary()
				_ = yym806
				if false {
				} else {
					*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys802)
		} // end switch yys802
	} // end for yyj802
	if !yyhl802 {
		r.ReadEnd()
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj809 int
	var yyb809 bool
	var yyhl809 bool = l >= 0
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv810 := &x.TargetWWNs
		yym811 := z.DecBinary()
		_ = yym811
		if false {
		} else {
			z.F.DecSliceStringX(yyv810, false, d)
		}
	}
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int)
		}
		yym813 := z.DecBinary()
		_ = yym813
		if false {
		} else {
			*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj809++
		if yyhl809 {
			yyb809 = yyj809 > l
		} else {
			yyb809 = r.CheckBreak()
		}
		if yyb809 {
			break
		}
		z.DecStructFieldNotFound(yyj809-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym816 := z.EncBinary()
		_ = yym816
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep817 := !z.EncBinary()
			yy2arr817 := z.EncBasicHandle().StructToArray
			var yyq817 [5]bool
			_, _, _ = yysep817, yyq817, yy2arr817
			const yyr817 bool = false
			yyq817[0] = x.Name != ""
			yyq817[1] = x.HostPort != 0
			yyq817[3] = x.Protocol != ""
			yyq817[4] = x.HostIP != ""
			if yyr817 || yy2arr817 {
				r.EncodeArrayStart(5)
			} else {
				var yynn817 int = 1
				for _, b := range yyq817 {
					if b {
						yynn817++
					}
				}
				r.EncodeMapStart(yynn817)
			}
			if yyr817 || yy2arr817 {
				if yyq817[0] {
					yym819 := z.EncBinary()
					_ = yym819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq817[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym820 := z.EncBinary()
					_ = yym820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr817 || yy2arr817 {
				if yyq817[1] {
					yym822 := z.EncBinary()
					_ = yym822
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq817[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					yym823 := z.EncBinary()
					_ = yym823
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr817 || yy2arr817 {
				yym825 := z.EncBinary()
				_ = yym825
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				yym826 := z.EncBinary()
				_ = yym826
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr817 || yy2arr817 {
				if yyq817[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq817[3] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr817 || yy2arr817 {
				if yyq817[4] {
					yym829 := z.EncBinary()
					_ = yym829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq817[4] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					yym830 := z.EncBinary()
					_ = yym830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yysep817 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym831 := z.DecBinary()
	_ = yym831
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl832 := r.ReadMapStart()
			if yyl832 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl832, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl832 := r.ReadArrayStart()
			if yyl832 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl832, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys833Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys833Slc
	var yyhl833 bool = l >= 0
	for yyj833 := 0; ; yyj833++ {
		if yyhl833 {
			if yyj833 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys833Slc = r.DecodeBytes(yys833Slc, true, true)
		yys833 := string(yys833Slc)
		switch yys833 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys833)
		} // end switch yys833
	} // end for yyj833
	if !yyhl833 {
		r.ReadEnd()
	}
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj839 int
	var yyb839 bool
	var yyhl839 bool = l >= 0
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj839++
		if yyhl839 {
			yyb839 = yyj839 > l
		} else {
			yyb839 = r.CheckBreak()
		}
		if yyb839 {
			break
		}
		z.DecStructFieldNotFound(yyj839-1, "")
	}
	r.ReadEnd()
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym845 := z.EncBinary()
		_ = yym845
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep846 := !z.EncBinary()
			yy2arr846 := z.EncBasicHandle().StructToArray
			var yyq846 [3]bool
			_, _, _ = yysep846, yyq846, yy2arr846
			const yyr846 bool = false
			yyq846[1] = x.ReadOnly != false
			if yyr846 || yy2arr846 {
				r.EncodeArrayStart(3)
			} else {
				var yynn846 int = 2
				for _, b := range yyq846 {
					if b {
						yynn846++
					}
				}
				r.EncodeMapStart(yynn846)
			}
			if yyr846 || yy2arr846 {
				yym848 := z.EncBinary()
				_ = yym848
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym849 := z.EncBinary()
				_ = yym849
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr846 || yy2arr846 {
				if yyq846[1] {
					yym851 := z.EncBinary()
					_ = yym851
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq846[1] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym852 := z.EncBinary()
					_ = yym852
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr846 || yy2arr846 {
				yym854 := z.EncBinary()
				_ = yym854
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				yym855 := z.EncBinary()
				_ = yym855
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yysep846 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym856 := z.DecBinary()
	_ = yym856
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl857 := r.ReadMapStart()
			if yyl857 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl857, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl857 := r.ReadArrayStart()
			if yyl857 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl857, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys858Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys858Slc
	var yyhl858 bool = l >= 0
	for yyj858 := 0; ; yyj858++ {
		if yyhl858 {
			if yyj858 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys858Slc = r.DecodeBytes(yys858Slc, true, true)
		yys858 := string(yys858Slc)
		switch yys858 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys858)
		} // end switch yys858
	} // end for yyj858
	if !yyhl858 {
		r.ReadEnd()
	}
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj862 int
	var yyb862 bool
	var yyhl862 bool = l >= 0
	yyj862++
	if yyhl862 {
		yyb862 = yyj862 > l
	} else {
		yyb862 = r.CheckBreak()
	}
	if yyb862 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj862++
	if yyhl862 {
		yyb862 = yyj862 > l
	} else {
		yyb862 = r.CheckBreak()
	}
	if yyb862 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj862++
	if yyhl862 {
		yyb862 = yyj862 > l
	} else {
		yyb862 = r.CheckBreak()
	}
	if yyb862 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj862++
		if yyhl862 {
			yyb862 = yyj862 > l
		} else {
			yyb862 = r.CheckBreak()
		}
		if yyb862 {
			break
		}
		z.DecStructFieldNotFound(yyj862-1, "")
	}
	r.ReadEnd()
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym866 := z.EncBinary()
		_ = yym866
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep867 := !z.EncBinary()
			yy2arr867 := z.EncBasicHandle().StructToArray
			var yyq867 [3]bool
			_, _, _ = yysep867, yyq867, yy2arr867
			const yyr867 bool = false
			yyq867[1] = x.Value != ""
			yyq867[2] = x.ValueFrom != nil
			if yyr867 || yy2arr867 {
				r.EncodeArrayStart(3)
			} else {
				var yynn867 int = 1
				for _, b := range yyq867 {
					if b {
						yynn867++
					}
				}
				r.EncodeMapStart(yynn867)
			}
			if yyr867 || yy2arr867 {
				yym869 := z.EncBinary()
				_ = yym869
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym870 := z.EncBinary()
				_ = yym870
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr867 || yy2arr867 {
				if yyq867[1] {
					yym872 := z.EncBinary()
					_ = yym872
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq867[1] {
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					yym873 := z.EncBinary()
					_ = yym873
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr867 || yy2arr867 {
				if yyq867[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq867[2] {
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yysep867 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym875 := z.DecBinary()
	_ = yym875
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl876 := r.ReadMapStart()
			if yyl876 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl876, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl876 := r.ReadArrayStart()
			if yyl876 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl876, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys877Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys877Slc
	var yyhl877 bool = l >= 0
	for yyj877 := 0; ; yyj877++ {
		if yyhl877 {
			if yyj877 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys877Slc = r.DecodeBytes(yys877Slc, true, true)
		yys877 := string(yys877Slc)
		switch yys877 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys877)
		} // end switch yys877
	} // end for yyj877
	if !yyhl877 {
		r.ReadEnd()
	}
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj881 int
	var yyb881 bool
	var yyhl881 bool = l >= 0
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj881++
		if yyhl881 {
			yyb881 = yyj881 > l
		} else {
			yyb881 = r.CheckBreak()
		}
		if yyb881 {
			break
		}
		z.DecStructFieldNotFound(yyj881-1, "")
	}
	r.ReadEnd()
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym885 := z.EncBinary()
		_ = yym885
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep886 := !z.EncBinary()
			yy2arr886 := z.EncBasicHandle().StructToArray
			var yyq886 [1]bool
			_, _, _ = yysep886, yyq886, yy2arr886
			const yyr886 bool = false
			if yyr886 || yy2arr886 {
				r.EncodeArrayStart(1)
			} else {
				var yynn886 int = 1
				for _, b := range yyq886 {
					if b {
						yynn886++
					}
				}
				r.EncodeMapStart(yynn886)
			}
			if yyr886 || yy2arr886 {
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			}
			if yysep886 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym888 := z.DecBinary()
	_ = yym888
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl889 := r.ReadMapStart()
			if yyl889 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl889, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl889 := r.ReadArrayStart()
			if yyl889 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl889, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys890Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys890Slc
	var yyhl890 bool = l >= 0
	for yyj890 := 0; ; yyj890++ {
		if yyhl890 {
			if yyj890 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys890Slc = r.DecodeBytes(yys890Slc, true, true)
		yys890 := string(yys890Slc)
		switch yys890 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys890)
		} // end switch yys890
	} // end for yyj890
	if !yyhl890 {
		r.ReadEnd()
	}
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj892 int
	var yyb892 bool
	var yyhl892 bool = l >= 0
	yyj892++
	if yyhl892 {
		yyb892 = yyj892 > l
	} else {
		yyb892 = r.CheckBreak()
	}
	if yyb892 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj892++
		if yyhl892 {
			yyb892 = yyj892 > l
		} else {
			yyb892 = r.CheckBreak()
		}
		if yyb892 {
			break
		}
		z.DecStructFieldNotFound(yyj892-1, "")
	}
	r.ReadEnd()
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym894 := z.EncBinary()
		_ = yym894
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep895 := !z.EncBinary()
			yy2arr895 := z.EncBasicHandle().StructToArray
			var yyq895 [2]bool
			_, _, _ = yysep895, yyq895, yy2arr895
			const yyr895 bool = false
			yyq895[0] = x.APIVersion != ""
			if yyr895 || yy2arr895 {
				r.EncodeArrayStart(2)
			} else {
				var yynn895 int = 1
				for _, b := range yyq895 {
					if b {
						yynn895++
					}
				}
				r.EncodeMapStart(yynn895)
			}
			if yyr895 || yy2arr895 {
				if yyq895[0] {
					yym897 := z.EncBinary()
					_ = yym897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq895[0] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym898 := z.EncBinary()
					_ = yym898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr895 || yy2arr895 {
				yym900 := z.EncBinary()
				_ = yym900
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				yym901 := z.EncBinary()
				_ = yym901
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yysep895 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym902 := z.DecBinary()
	_ = yym902
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl903 := r.ReadMapStart()
			if yyl903 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl903, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl903 := r.ReadArrayStart()
			if yyl903 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl903, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys904Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys904Slc
	var yyhl904 bool = l >= 0
	for yyj904 := 0; ; yyj904++ {
		if yyhl904 {
			if yyj904 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys904Slc = r.DecodeBytes(yys904Slc, true, true)
		yys904 := string(yys904Slc)
		switch yys904 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys904)
		} // end switch yys904
	} // end for yyj904
	if !yyhl904 {
		r.ReadEnd()
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj907 int
	var yyb907 bool
	var yyhl907 bool = l >= 0
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj907++
		if yyhl907 {
			yyb907 = yyj907 > l
		} else {
			yyb907 = r.CheckBreak()
		}
		if yyb907 {
			break
		}
		z.DecStructFieldNotFound(yyj907-1, "")
	}
	r.ReadEnd()
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym910 := z.EncBinary()
		_ = yym910
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep911 := !z.EncBinary()
			yy2arr911 := z.EncBasicHandle().StructToArray
			var yyq911 [4]bool
			_, _, _ = yysep911, yyq911, yy2arr911
			const yyr911 bool = false
			yyq911[0] = x.Path != ""
			yyq911[2] = x.Host != ""
			yyq911[3] = x.Scheme != ""
			if yyr911 || yy2arr911 {
				r.EncodeArrayStart(4)
			} else {
				var yynn911 int = 1
				for _, b := range yyq911 {
					if b {
						yynn911++
					}
				}
				r.EncodeMapStart(yynn911)
			}
			if yyr911 || yy2arr911 {
				if yyq911[0] {
					yym913 := z.EncBinary()
					_ = yym913
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq911[0] {
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					yym914 := z.EncBinary()
					_ = yym914
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr911 || yy2arr911 {
				yy916 := &x.Port
				yym917 := z.EncBinary()
				_ = yym917
				if false {
				} else if z.HasExtensions() && z.EncExt(yy916) {
				} else if !yym917 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy916)
				} else {
					z.EncFallback(yy916)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yy918 := &x.Port
				yym919 := z.EncBinary()
				_ = yym919
				if false {
				} else if z.HasExtensions() && z.EncExt(yy918) {
				} else if !yym919 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy918)
				} else {
					z.EncFallback(yy918)
				}
			}
			if yyr911 || yy2arr911 {
				if yyq911[2] {
					yym921 := z.EncBinary()
					_ = yym921
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq911[2] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym922 := z.EncBinary()
					_ = yym922
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr911 || yy2arr911 {
				if yyq911[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq911[3] {
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yysep911 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym924 := z.DecBinary()
	_ = yym924
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl925 := r.ReadMapStart()
			if yyl925 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl925, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl925 := r.ReadArrayStart()
			if yyl925 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl925, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys926Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys926Slc
	var yyhl926 bool = l >= 0
	for yyj926 := 0; ; yyj926++ {
		if yyhl926 {
			if yyj926 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys926Slc = r.DecodeBytes(yys926Slc, true, true)
		yys926 := string(yys926Slc)
		switch yys926 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_util.IntOrString{}
			} else {
				yyv928 := &x.Port
				yym929 := z.DecBinary()
				_ = yym929
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv928) {
				} else if !yym929 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv928)
				} else {
					z.DecFallback(yyv928, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys926)
		} // end switch yys926
	} // end for yyj926
	if !yyhl926 {
		r.ReadEnd()
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj932 int
	var yyb932 bool
	var yyhl932 bool = l >= 0
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg5_util.IntOrString{}
	} else {
		yyv934 := &x.Port
		yym935 := z.DecBinary()
		_ = yym935
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv934) {
		} else if !yym935 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv934)
		} else {
			z.DecFallback(yyv934, false)
		}
	}
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	for {
		yyj932++
		if yyhl932 {
			yyb932 = yyj932 > l
		} else {
			yyb932 = r.CheckBreak()
		}
		if yyb932 {
			break
		}
		z.DecStructFieldNotFound(yyj932-1, "")
	}
	r.ReadEnd()
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym938 := z.EncBinary()
	_ = yym938
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym939 := z.DecBinary()
	_ = yym939
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym940 := z.EncBinary()
		_ = yym940
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep941 := !z.EncBinary()
			yy2arr941 := z.EncBasicHandle().StructToArray
			var yyq941 [1]bool
			_, _, _ = yysep941, yyq941, yy2arr941
			const yyr941 bool = false
			if yyr941 || yy2arr941 {
				r.EncodeArrayStart(1)
			} else {
				var yynn941 int = 1
				for _, b := range yyq941 {
					if b {
						yynn941++
					}
				}
				r.EncodeMapStart(yynn941)
			}
			if yyr941 || yy2arr941 {
				yy943 := &x.Port
				yym944 := z.EncBinary()
				_ = yym944
				if false {
				} else if z.HasExtensions() && z.EncExt(yy943) {
				} else if !yym944 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy943)
				} else {
					z.EncFallback(yy943)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yy945 := &x.Port
				yym946 := z.EncBinary()
				_ = yym946
				if false {
				} else if z.HasExtensions() && z.EncExt(yy945) {
				} else if !yym946 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy945)
				} else {
					z.EncFallback(yy945)
				}
			}
			if yysep941 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym947 := z.DecBinary()
	_ = yym947
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl948 := r.ReadMapStart()
			if yyl948 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl948, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl948 := r.ReadArrayStart()
			if yyl948 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl948, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys949Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys949Slc
	var yyhl949 bool = l >= 0
	for yyj949 := 0; ; yyj949++ {
		if yyhl949 {
			if yyj949 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys949Slc = r.DecodeBytes(yys949Slc, true, true)
		yys949 := string(yys949Slc)
		switch yys949 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_util.IntOrString{}
			} else {
				yyv950 := &x.Port
				yym951 := z.DecBinary()
				_ = yym951
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv950) {
				} else if !yym951 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv950)
				} else {
					z.DecFallback(yyv950, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys949)
		} // end switch yys949
	} // end for yyj949
	if !yyhl949 {
		r.ReadEnd()
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj952 int
	var yyb952 bool
	var yyhl952 bool = l >= 0
	yyj952++
	if yyhl952 {
		yyb952 = yyj952 > l
	} else {
		yyb952 = r.CheckBreak()
	}
	if yyb952 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg5_util.IntOrString{}
	} else {
		yyv953 := &x.Port
		yym954 := z.DecBinary()
		_ = yym954
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv953) {
		} else if !yym954 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv953)
		} else {
			z.DecFallback(yyv953, false)
		}
	}
	for {
		yyj952++
		if yyhl952 {
			yyb952 = yyj952 > l
		} else {
			yyb952 = r.CheckBreak()
		}
		if yyb952 {
			break
		}
		z.DecStructFieldNotFound(yyj952-1, "")
	}
	r.ReadEnd()
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym955 := z.EncBinary()
		_ = yym955
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep956 := !z.EncBinary()
			yy2arr956 := z.EncBasicHandle().StructToArray
			var yyq956 [1]bool
			_, _, _ = yysep956, yyq956, yy2arr956
			const yyr956 bool = false
			yyq956[0] = len(x.Command) != 0
			if yyr956 || yy2arr956 {
				r.EncodeArrayStart(1)
			} else {
				var yynn956 int = 0
				for _, b := range yyq956 {
					if b {
						yynn956++
					}
				}
				r.EncodeMapStart(yynn956)
			}
			if yyr956 || yy2arr956 {
				if yyq956[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym958 := z.EncBinary()
						_ = yym958
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq956[0] {
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym959 := z.EncBinary()
						_ = yym959
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yysep956 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym960 := z.DecBinary()
	_ = yym960
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl961 := r.ReadMapStart()
			if yyl961 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl961, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl961 := r.ReadArrayStart()
			if yyl961 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl961, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys962Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys962Slc
	var yyhl962 bool = l >= 0
	for yyj962 := 0; ; yyj962++ {
		if yyhl962 {
			if yyj962 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys962Slc = r.DecodeBytes(yys962Slc, true, true)
		yys962 := string(yys962Slc)
		switch yys962 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv963 := &x.Command
				yym964 := z.DecBinary()
				_ = yym964
				if false {
				} else {
					z.F.DecSliceStringX(yyv963, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys962)
		} // end switch yys962
	} // end for yyj962
	if !yyhl962 {
		r.ReadEnd()
	}
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj965 int
	var yyb965 bool
	var yyhl965 bool = l >= 0
	yyj965++
	if yyhl965 {
		yyb965 = yyj965 > l
	} else {
		yyb965 = r.CheckBreak()
	}
	if yyb965 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv966 := &x.Command
		yym967 := z.DecBinary()
		_ = yym967
		if false {
		} else {
			z.F.DecSliceStringX(yyv966, false, d)
		}
	}
	for {
		yyj965++
		if yyhl965 {
			yyb965 = yyj965 > l
		} else {
			yyb965 = r.CheckBreak()
		}
		if yyb965 {
			break
		}
		z.DecStructFieldNotFound(yyj965-1, "")
	}
	r.ReadEnd()
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym968 := z.EncBinary()
		_ = yym968
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep969 := !z.EncBinary()
			yy2arr969 := z.EncBasicHandle().StructToArray
			var yyq969 [5]bool
			_, _, _ = yysep969, yyq969, yy2arr969
			const yyr969 bool = false
			yyq969[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq969[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq969[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq969[3] = x.InitialDelaySeconds != 0
			yyq969[4] = x.TimeoutSeconds != 0
			if yyr969 || yy2arr969 {
				r.EncodeArrayStart(5)
			} else {
				var yynn969 int = 0
				for _, b := range yyq969 {
					if b {
						yynn969++
					}
				}
				r.EncodeMapStart(yynn969)
			}
			var yyn970 bool
			if x.Handler.Exec == nil {
				yyn970 = true
				goto LABEL970
			}
		LABEL970:
			if yyr969 || yy2arr969 {
				if yyn970 {
					r.EncodeNil()
				} else {
					if yyq969[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq969[0] {
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if yyn970 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn971 bool
			if x.Handler.HTTPGet == nil {
				yyn971 = true
				goto LABEL971
			}
		LABEL971:
			if yyr969 || yy2arr969 {
				if yyn971 {
					r.EncodeNil()
				} else {
					if yyq969[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq969[1] {
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if yyn971 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn972 bool
			if x.Handler.TCPSocket == nil {
				yyn972 = true
				goto LABEL972
			}
		LABEL972:
			if yyr969 || yy2arr969 {
				if yyn972 {
					r.EncodeNil()
				} else {
					if yyq969[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq969[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if yyn972 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr969 || yy2arr969 {
				if yyq969[3] {
					yym974 := z.EncBinary()
					_ = yym974
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq969[3] {
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					yym975 := z.EncBinary()
					_ = yym975
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr969 || yy2arr969 {
				if yyq969[4] {
					yym977 := z.EncBinary()
					_ = yym977
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq969[4] {
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					yym978 := z.EncBinary()
					_ = yym978
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yysep969 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym979 := z.DecBinary()
	_ = yym979
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl980 := r.ReadMapStart()
			if yyl980 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl980, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl980 := r.ReadArrayStart()
			if yyl980 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl980, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys981Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys981Slc
	var yyhl981 bool = l >= 0
	for yyj981 := 0; ; yyj981++ {
		if yyhl981 {
			if yyj981 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys981Slc = r.DecodeBytes(yys981Slc, true, true)
		yys981 := string(yys981Slc)
		switch yys981 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int64(r.DecodeInt(64))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys981)
		} // end switch yys981
	} // end for yyj981
	if !yyhl981 {
		r.ReadEnd()
	}
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj987 int
	var yyb987 bool
	var yyhl987 bool = l >= 0
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int64(r.DecodeInt(64))
	}
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int64(r.DecodeInt(64))
	}
	for {
		yyj987++
		if yyhl987 {
			yyb987 = yyj987 > l
		} else {
			yyb987 = r.CheckBreak()
		}
		if yyb987 {
			break
		}
		z.DecStructFieldNotFound(yyj987-1, "")
	}
	r.ReadEnd()
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym993 := z.EncBinary()
	_ = yym993
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym994 := z.DecBinary()
	_ = yym994
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym995 := z.EncBinary()
	_ = yym995
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym996 := z.DecBinary()
	_ = yym996
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym997 := z.EncBinary()
		_ = yym997
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep998 := !z.EncBinary()
			yy2arr998 := z.EncBasicHandle().StructToArray
			var yyq998 [2]bool
			_, _, _ = yysep998, yyq998, yy2arr998
			const yyr998 bool = false
			yyq998[0] = len(x.Add) != 0
			yyq998[1] = len(x.Drop) != 0
			if yyr998 || yy2arr998 {
				r.EncodeArrayStart(2)
			} else {
				var yynn998 int = 0
				for _, b := range yyq998 {
					if b {
						yynn998++
					}
				}
				r.EncodeMapStart(yynn998)
			}
			if yyr998 || yy2arr998 {
				if yyq998[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1000 := z.EncBinary()
						_ = yym1000
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq998[0] {
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1001 := z.EncBinary()
						_ = yym1001
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr998 || yy2arr998 {
				if yyq998[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1003 := z.EncBinary()
						_ = yym1003
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq998[1] {
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1004 := z.EncBinary()
						_ = yym1004
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yysep998 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1005 := z.DecBinary()
	_ = yym1005
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1006 := r.ReadMapStart()
			if yyl1006 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1006, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1006 := r.ReadArrayStart()
			if yyl1006 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1006, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1007Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1007Slc
	var yyhl1007 bool = l >= 0
	for yyj1007 := 0; ; yyj1007++ {
		if yyhl1007 {
			if yyj1007 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1007Slc = r.DecodeBytes(yys1007Slc, true, true)
		yys1007 := string(yys1007Slc)
		switch yys1007 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1008 := &x.Add
				yym1009 := z.DecBinary()
				_ = yym1009
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1008), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1010 := &x.Drop
				yym1011 := z.DecBinary()
				_ = yym1011
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1010), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1007)
		} // end switch yys1007
	} // end for yyj1007
	if !yyhl1007 {
		r.ReadEnd()
	}
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1012 int
	var yyb1012 bool
	var yyhl1012 bool = l >= 0
	yyj1012++
	if yyhl1012 {
		yyb1012 = yyj1012 > l
	} else {
		yyb1012 = r.CheckBreak()
	}
	if yyb1012 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1013 := &x.Add
		yym1014 := z.DecBinary()
		_ = yym1014
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1013), d)
		}
	}
	yyj1012++
	if yyhl1012 {
		yyb1012 = yyj1012 > l
	} else {
		yyb1012 = r.CheckBreak()
	}
	if yyb1012 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1015 := &x.Drop
		yym1016 := z.DecBinary()
		_ = yym1016
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1015), d)
		}
	}
	for {
		yyj1012++
		if yyhl1012 {
			yyb1012 = yyj1012 > l
		} else {
			yyb1012 = r.CheckBreak()
		}
		if yyb1012 {
			break
		}
		z.DecStructFieldNotFound(yyj1012-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1017 := z.EncBinary()
		_ = yym1017
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1018 := !z.EncBinary()
			yy2arr1018 := z.EncBasicHandle().StructToArray
			var yyq1018 [2]bool
			_, _, _ = yysep1018, yyq1018, yy2arr1018
			const yyr1018 bool = false
			yyq1018[0] = len(x.Limits) != 0
			yyq1018[1] = len(x.Requests) != 0
			if yyr1018 || yy2arr1018 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1018 int = 0
				for _, b := range yyq1018 {
					if b {
						yynn1018++
					}
				}
				r.EncodeMapStart(yynn1018)
			}
			if yyr1018 || yy2arr1018 {
				if yyq1018[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1018[0] {
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1018 || yy2arr1018 {
				if yyq1018[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1018[1] {
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1018 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1021 := z.DecBinary()
	_ = yym1021
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1022 := r.ReadMapStart()
			if yyl1022 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1022, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1022 := r.ReadArrayStart()
			if yyl1022 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1022, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1023Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1023Slc
	var yyhl1023 bool = l >= 0
	for yyj1023 := 0; ; yyj1023++ {
		if yyhl1023 {
			if yyj1023 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1023Slc = r.DecodeBytes(yys1023Slc, true, true)
		yys1023 := string(yys1023Slc)
		switch yys1023 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1024 := &x.Limits
				yyv1024.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1025 := &x.Requests
				yyv1025.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1023)
		} // end switch yys1023
	} // end for yyj1023
	if !yyhl1023 {
		r.ReadEnd()
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1026 int
	var yyb1026 bool
	var yyhl1026 bool = l >= 0
	yyj1026++
	if yyhl1026 {
		yyb1026 = yyj1026 > l
	} else {
		yyb1026 = r.CheckBreak()
	}
	if yyb1026 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1027 := &x.Limits
		yyv1027.CodecDecodeSelf(d)
	}
	yyj1026++
	if yyhl1026 {
		yyb1026 = yyj1026 > l
	} else {
		yyb1026 = r.CheckBreak()
	}
	if yyb1026 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1028 := &x.Requests
		yyv1028.CodecDecodeSelf(d)
	}
	for {
		yyj1026++
		if yyhl1026 {
			yyb1026 = yyj1026 > l
		} else {
			yyb1026 = r.CheckBreak()
		}
		if yyb1026 {
			break
		}
		z.DecStructFieldNotFound(yyj1026-1, "")
	}
	r.ReadEnd()
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1029 := z.EncBinary()
		_ = yym1029
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1030 := !z.EncBinary()
			yy2arr1030 := z.EncBasicHandle().StructToArray
			var yyq1030 [18]bool
			_, _, _ = yysep1030, yyq1030, yy2arr1030
			const yyr1030 bool = false
			yyq1030[1] = x.Image != ""
			yyq1030[2] = len(x.Command) != 0
			yyq1030[3] = len(x.Args) != 0
			yyq1030[4] = x.WorkingDir != ""
			yyq1030[5] = len(x.Ports) != 0
			yyq1030[6] = len(x.Env) != 0
			yyq1030[7] = true
			yyq1030[8] = len(x.VolumeMounts) != 0
			yyq1030[9] = x.LivenessProbe != nil
			yyq1030[10] = x.ReadinessProbe != nil
			yyq1030[11] = x.Lifecycle != nil
			yyq1030[12] = x.TerminationMessagePath != ""
			yyq1030[13] = x.ImagePullPolicy != ""
			yyq1030[14] = x.SecurityContext != nil
			yyq1030[15] = x.Stdin != false
			yyq1030[16] = x.StdinOnce != false
			yyq1030[17] = x.TTY != false
			if yyr1030 || yy2arr1030 {
				r.EncodeArrayStart(18)
			} else {
				var yynn1030 int = 1
				for _, b := range yyq1030 {
					if b {
						yynn1030++
					}
				}
				r.EncodeMapStart(yynn1030)
			}
			if yyr1030 || yy2arr1030 {
				yym1032 := z.EncBinary()
				_ = yym1032
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1033 := z.EncBinary()
				_ = yym1033
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[1] {
					yym1035 := z.EncBinary()
					_ = yym1035
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1030[1] {
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					yym1036 := z.EncBinary()
					_ = yym1036
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1038 := z.EncBinary()
						_ = yym1038
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[2] {
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1039 := z.EncBinary()
						_ = yym1039
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1041 := z.EncBinary()
						_ = yym1041
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[3] {
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1042 := z.EncBinary()
						_ = yym1042
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[4] {
					yym1044 := z.EncBinary()
					_ = yym1044
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1030[4] {
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					yym1045 := z.EncBinary()
					_ = yym1045
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1047 := z.EncBinary()
						_ = yym1047
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[5] {
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1048 := z.EncBinary()
						_ = yym1048
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1050 := z.EncBinary()
						_ = yym1050
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[6] {
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1051 := z.EncBinary()
						_ = yym1051
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[7] {
					yy1053 := &x.Resources
					yy1053.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[7] {
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					yy1054 := &x.Resources
					yy1054.CodecEncodeSelf(e)
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1056 := z.EncBinary()
						_ = yym1056
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[8] {
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1057 := z.EncBinary()
						_ = yym1057
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[9] {
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[10] {
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[11] {
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[12] {
					yym1062 := z.EncBinary()
					_ = yym1062
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1030[12] {
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					yym1063 := z.EncBinary()
					_ = yym1063
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[13] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1030[13] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[14] {
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[15] {
					yym1067 := z.EncBinary()
					_ = yym1067
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1030[15] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym1068 := z.EncBinary()
					_ = yym1068
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[16] {
					yym1070 := z.EncBinary()
					_ = yym1070
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1030[16] {
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					yym1071 := z.EncBinary()
					_ = yym1071
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[17] {
					yym1073 := z.EncBinary()
					_ = yym1073
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1030[17] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym1074 := z.EncBinary()
					_ = yym1074
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yysep1030 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1075 := z.DecBinary()
	_ = yym1075
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1076 := r.ReadMapStart()
			if yyl1076 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1076, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1076 := r.ReadArrayStart()
			if yyl1076 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1076, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1077Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1077Slc
	var yyhl1077 bool = l >= 0
	for yyj1077 := 0; ; yyj1077++ {
		if yyhl1077 {
			if yyj1077 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1077Slc = r.DecodeBytes(yys1077Slc, true, true)
		yys1077 := string(yys1077Slc)
		switch yys1077 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1080 := &x.Command
				yym1081 := z.DecBinary()
				_ = yym1081
				if false {
				} else {
					z.F.DecSliceStringX(yyv1080, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1082 := &x.Args
				yym1083 := z.DecBinary()
				_ = yym1083
				if false {
				} else {
					z.F.DecSliceStringX(yyv1082, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1085 := &x.Ports
				yym1086 := z.DecBinary()
				_ = yym1086
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1085), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1087 := &x.Env
				yym1088 := z.DecBinary()
				_ = yym1088
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1087), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1089 := &x.Resources
				yyv1089.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1090 := &x.VolumeMounts
				yym1091 := z.DecBinary()
				_ = yym1091
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1090), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1077)
		} // end switch yys1077
	} // end for yyj1077
	if !yyhl1077 {
		r.ReadEnd()
	}
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1101 int
	var yyb1101 bool
	var yyhl1101 bool = l >= 0
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1104 := &x.Command
		yym1105 := z.DecBinary()
		_ = yym1105
		if false {
		} else {
			z.F.DecSliceStringX(yyv1104, false, d)
		}
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1106 := &x.Args
		yym1107 := z.DecBinary()
		_ = yym1107
		if false {
		} else {
			z.F.DecSliceStringX(yyv1106, false, d)
		}
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1109 := &x.Ports
		yym1110 := z.DecBinary()
		_ = yym1110
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1109), d)
		}
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1111 := &x.Env
		yym1112 := z.DecBinary()
		_ = yym1112
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1111), d)
		}
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1113 := &x.Resources
		yyv1113.CodecDecodeSelf(d)
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1114 := &x.VolumeMounts
		yym1115 := z.DecBinary()
		_ = yym1115
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1114), d)
		}
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1101++
		if yyhl1101 {
			yyb1101 = yyj1101 > l
		} else {
			yyb1101 = r.CheckBreak()
		}
		if yyb1101 {
			break
		}
		z.DecStructFieldNotFound(yyj1101-1, "")
	}
	r.ReadEnd()
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1125 := z.EncBinary()
		_ = yym1125
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1126 := !z.EncBinary()
			yy2arr1126 := z.EncBasicHandle().StructToArray
			var yyq1126 [3]bool
			_, _, _ = yysep1126, yyq1126, yy2arr1126
			const yyr1126 bool = false
			yyq1126[0] = x.Exec != nil
			yyq1126[1] = x.HTTPGet != nil
			yyq1126[2] = x.TCPSocket != nil
			if yyr1126 || yy2arr1126 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1126 int = 0
				for _, b := range yyq1126 {
					if b {
						yynn1126++
					}
				}
				r.EncodeMapStart(yynn1126)
			}
			if yyr1126 || yy2arr1126 {
				if yyq1126[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1126[0] {
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1126 || yy2arr1126 {
				if yyq1126[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1126[1] {
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1126 || yy2arr1126 {
				if yyq1126[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1126[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1126 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1130 := z.DecBinary()
	_ = yym1130
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1131 := r.ReadMapStart()
			if yyl1131 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1131, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1131 := r.ReadArrayStart()
			if yyl1131 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1131, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1132Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1132Slc
	var yyhl1132 bool = l >= 0
	for yyj1132 := 0; ; yyj1132++ {
		if yyhl1132 {
			if yyj1132 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1132Slc = r.DecodeBytes(yys1132Slc, true, true)
		yys1132 := string(yys1132Slc)
		switch yys1132 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1132)
		} // end switch yys1132
	} // end for yyj1132
	if !yyhl1132 {
		r.ReadEnd()
	}
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1136 int
	var yyb1136 bool
	var yyhl1136 bool = l >= 0
	yyj1136++
	if yyhl1136 {
		yyb1136 = yyj1136 > l
	} else {
		yyb1136 = r.CheckBreak()
	}
	if yyb1136 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1136++
	if yyhl1136 {
		yyb1136 = yyj1136 > l
	} else {
		yyb1136 = r.CheckBreak()
	}
	if yyb1136 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1136++
	if yyhl1136 {
		yyb1136 = yyj1136 > l
	} else {
		yyb1136 = r.CheckBreak()
	}
	if yyb1136 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1136++
		if yyhl1136 {
			yyb1136 = yyj1136 > l
		} else {
			yyb1136 = r.CheckBreak()
		}
		if yyb1136 {
			break
		}
		z.DecStructFieldNotFound(yyj1136-1, "")
	}
	r.ReadEnd()
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1140 := z.EncBinary()
		_ = yym1140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1141 := !z.EncBinary()
			yy2arr1141 := z.EncBasicHandle().StructToArray
			var yyq1141 [2]bool
			_, _, _ = yysep1141, yyq1141, yy2arr1141
			const yyr1141 bool = false
			yyq1141[0] = x.PostStart != nil
			yyq1141[1] = x.PreStop != nil
			if yyr1141 || yy2arr1141 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1141 int = 0
				for _, b := range yyq1141 {
					if b {
						yynn1141++
					}
				}
				r.EncodeMapStart(yynn1141)
			}
			if yyr1141 || yy2arr1141 {
				if yyq1141[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1141[0] {
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1141 || yy2arr1141 {
				if yyq1141[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1141[1] {
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1141 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1144 := z.DecBinary()
	_ = yym1144
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1145 := r.ReadMapStart()
			if yyl1145 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1145, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1145 := r.ReadArrayStart()
			if yyl1145 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1145, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1146Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1146Slc
	var yyhl1146 bool = l >= 0
	for yyj1146 := 0; ; yyj1146++ {
		if yyhl1146 {
			if yyj1146 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1146Slc = r.DecodeBytes(yys1146Slc, true, true)
		yys1146 := string(yys1146Slc)
		switch yys1146 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1146)
		} // end switch yys1146
	} // end for yyj1146
	if !yyhl1146 {
		r.ReadEnd()
	}
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1149 int
	var yyb1149 bool
	var yyhl1149 bool = l >= 0
	yyj1149++
	if yyhl1149 {
		yyb1149 = yyj1149 > l
	} else {
		yyb1149 = r.CheckBreak()
	}
	if yyb1149 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1149++
	if yyhl1149 {
		yyb1149 = yyj1149 > l
	} else {
		yyb1149 = r.CheckBreak()
	}
	if yyb1149 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1149++
		if yyhl1149 {
			yyb1149 = yyj1149 > l
		} else {
			yyb1149 = r.CheckBreak()
		}
		if yyb1149 {
			break
		}
		z.DecStructFieldNotFound(yyj1149-1, "")
	}
	r.ReadEnd()
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1152 := z.EncBinary()
	_ = yym1152
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1153 := z.DecBinary()
	_ = yym1153
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1154 := z.EncBinary()
		_ = yym1154
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1155 := !z.EncBinary()
			yy2arr1155 := z.EncBasicHandle().StructToArray
			var yyq1155 [2]bool
			_, _, _ = yysep1155, yyq1155, yy2arr1155
			const yyr1155 bool = false
			yyq1155[0] = x.Reason != ""
			yyq1155[1] = x.Message != ""
			if yyr1155 || yy2arr1155 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1155 int = 0
				for _, b := range yyq1155 {
					if b {
						yynn1155++
					}
				}
				r.EncodeMapStart(yynn1155)
			}
			if yyr1155 || yy2arr1155 {
				if yyq1155[0] {
					yym1157 := z.EncBinary()
					_ = yym1157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1155[0] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1158 := z.EncBinary()
					_ = yym1158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1155 || yy2arr1155 {
				if yyq1155[1] {
					yym1160 := z.EncBinary()
					_ = yym1160
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1155[1] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1161 := z.EncBinary()
					_ = yym1161
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1155 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1162 := z.DecBinary()
	_ = yym1162
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1163 := r.ReadMapStart()
			if yyl1163 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1163, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1163 := r.ReadArrayStart()
			if yyl1163 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1163, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1164Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1164Slc
	var yyhl1164 bool = l >= 0
	for yyj1164 := 0; ; yyj1164++ {
		if yyhl1164 {
			if yyj1164 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1164Slc = r.DecodeBytes(yys1164Slc, true, true)
		yys1164 := string(yys1164Slc)
		switch yys1164 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1164)
		} // end switch yys1164
	} // end for yyj1164
	if !yyhl1164 {
		r.ReadEnd()
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1167 int
	var yyb1167 bool
	var yyhl1167 bool = l >= 0
	yyj1167++
	if yyhl1167 {
		yyb1167 = yyj1167 > l
	} else {
		yyb1167 = r.CheckBreak()
	}
	if yyb1167 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1167++
	if yyhl1167 {
		yyb1167 = yyj1167 > l
	} else {
		yyb1167 = r.CheckBreak()
	}
	if yyb1167 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1167++
		if yyhl1167 {
			yyb1167 = yyj1167 > l
		} else {
			yyb1167 = r.CheckBreak()
		}
		if yyb1167 {
			break
		}
		z.DecStructFieldNotFound(yyj1167-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1170 := z.EncBinary()
		_ = yym1170
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1171 := !z.EncBinary()
			yy2arr1171 := z.EncBasicHandle().StructToArray
			var yyq1171 [1]bool
			_, _, _ = yysep1171, yyq1171, yy2arr1171
			const yyr1171 bool = false
			yyq1171[0] = true
			if yyr1171 || yy2arr1171 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1171 int = 0
				for _, b := range yyq1171 {
					if b {
						yynn1171++
					}
				}
				r.EncodeMapStart(yynn1171)
			}
			if yyr1171 || yy2arr1171 {
				if yyq1171[0] {
					yy1173 := &x.StartedAt
					yym1174 := z.EncBinary()
					_ = yym1174
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1173) {
					} else if yym1174 {
						z.EncBinaryMarshal(yy1173)
					} else if !yym1174 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1173)
					} else {
						z.EncFallback(yy1173)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1171[0] {
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					yy1175 := &x.StartedAt
					yym1176 := z.EncBinary()
					_ = yym1176
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1175) {
					} else if yym1176 {
						z.EncBinaryMarshal(yy1175)
					} else if !yym1176 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1175)
					} else {
						z.EncFallback(yy1175)
					}
				}
			}
			if yysep1171 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1177 := z.DecBinary()
	_ = yym1177
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1178 := r.ReadMapStart()
			if yyl1178 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1178, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1178 := r.ReadArrayStart()
			if yyl1178 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1178, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1179Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1179Slc
	var yyhl1179 bool = l >= 0
	for yyj1179 := 0; ; yyj1179++ {
		if yyhl1179 {
			if yyj1179 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1179Slc = r.DecodeBytes(yys1179Slc, true, true)
		yys1179 := string(yys1179Slc)
		switch yys1179 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1180 := &x.StartedAt
				yym1181 := z.DecBinary()
				_ = yym1181
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1180) {
				} else if yym1181 {
					z.DecBinaryUnmarshal(yyv1180)
				} else if !yym1181 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1180)
				} else {
					z.DecFallback(yyv1180, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1179)
		} // end switch yys1179
	} // end for yyj1179
	if !yyhl1179 {
		r.ReadEnd()
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1182 int
	var yyb1182 bool
	var yyhl1182 bool = l >= 0
	yyj1182++
	if yyhl1182 {
		yyb1182 = yyj1182 > l
	} else {
		yyb1182 = r.CheckBreak()
	}
	if yyb1182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1183 := &x.StartedAt
		yym1184 := z.DecBinary()
		_ = yym1184
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1183) {
		} else if yym1184 {
			z.DecBinaryUnmarshal(yyv1183)
		} else if !yym1184 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1183)
		} else {
			z.DecFallback(yyv1183, false)
		}
	}
	for {
		yyj1182++
		if yyhl1182 {
			yyb1182 = yyj1182 > l
		} else {
			yyb1182 = r.CheckBreak()
		}
		if yyb1182 {
			break
		}
		z.DecStructFieldNotFound(yyj1182-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1185 := z.EncBinary()
		_ = yym1185
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1186 := !z.EncBinary()
			yy2arr1186 := z.EncBasicHandle().StructToArray
			var yyq1186 [7]bool
			_, _, _ = yysep1186, yyq1186, yy2arr1186
			const yyr1186 bool = false
			yyq1186[1] = x.Signal != 0
			yyq1186[2] = x.Reason != ""
			yyq1186[3] = x.Message != ""
			yyq1186[4] = true
			yyq1186[5] = true
			yyq1186[6] = x.ContainerID != ""
			if yyr1186 || yy2arr1186 {
				r.EncodeArrayStart(7)
			} else {
				var yynn1186 int = 1
				for _, b := range yyq1186 {
					if b {
						yynn1186++
					}
				}
				r.EncodeMapStart(yynn1186)
			}
			if yyr1186 || yy2arr1186 {
				yym1188 := z.EncBinary()
				_ = yym1188
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				yym1189 := z.EncBinary()
				_ = yym1189
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1186 || yy2arr1186 {
				if yyq1186[1] {
					yym1191 := z.EncBinary()
					_ = yym1191
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1186[1] {
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					yym1192 := z.EncBinary()
					_ = yym1192
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1186 || yy2arr1186 {
				if yyq1186[2] {
					yym1194 := z.EncBinary()
					_ = yym1194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1186[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1195 := z.EncBinary()
					_ = yym1195
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1186 || yy2arr1186 {
				if yyq1186[3] {
					yym1197 := z.EncBinary()
					_ = yym1197
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1186[3] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1198 := z.EncBinary()
					_ = yym1198
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1186 || yy2arr1186 {
				if yyq1186[4] {
					yy1200 := &x.StartedAt
					yym1201 := z.EncBinary()
					_ = yym1201
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1200) {
					} else if yym1201 {
						z.EncBinaryMarshal(yy1200)
					} else if !yym1201 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1200)
					} else {
						z.EncFallback(yy1200)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1186[4] {
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					yy1202 := &x.StartedAt
					yym1203 := z.EncBinary()
					_ = yym1203
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1202) {
					} else if yym1203 {
						z.EncBinaryMarshal(yy1202)
					} else if !yym1203 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1202)
					} else {
						z.EncFallback(yy1202)
					}
				}
			}
			if yyr1186 || yy2arr1186 {
				if yyq1186[5] {
					yy1205 := &x.FinishedAt
					yym1206 := z.EncBinary()
					_ = yym1206
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1205) {
					} else if yym1206 {
						z.EncBinaryMarshal(yy1205)
					} else if !yym1206 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1205)
					} else {
						z.EncFallback(yy1205)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1186[5] {
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					yy1207 := &x.FinishedAt
					yym1208 := z.EncBinary()
					_ = yym1208
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1207) {
					} else if yym1208 {
						z.EncBinaryMarshal(yy1207)
					} else if !yym1208 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1207)
					} else {
						z.EncFallback(yy1207)
					}
				}
			}
			if yyr1186 || yy2arr1186 {
				if yyq1186[6] {
					yym1210 := z.EncBinary()
					_ = yym1210
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1186[6] {
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					yym1211 := z.EncBinary()
					_ = yym1211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1186 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1212 := z.DecBinary()
	_ = yym1212
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1213 := r.ReadMapStart()
			if yyl1213 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1213, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1213 := r.ReadArrayStart()
			if yyl1213 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1213, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1214Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1214Slc
	var yyhl1214 bool = l >= 0
	for yyj1214 := 0; ; yyj1214++ {
		if yyhl1214 {
			if yyj1214 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1214Slc = r.DecodeBytes(yys1214Slc, true, true)
		yys1214 := string(yys1214Slc)
		switch yys1214 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1219 := &x.StartedAt
				yym1220 := z.DecBinary()
				_ = yym1220
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1219) {
				} else if yym1220 {
					z.DecBinaryUnmarshal(yyv1219)
				} else if !yym1220 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1219)
				} else {
					z.DecFallback(yyv1219, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1221 := &x.FinishedAt
				yym1222 := z.DecBinary()
				_ = yym1222
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1221) {
				} else if yym1222 {
					z.DecBinaryUnmarshal(yyv1221)
				} else if !yym1222 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1221)
				} else {
					z.DecFallback(yyv1221, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1214)
		} // end switch yys1214
	} // end for yyj1214
	if !yyhl1214 {
		r.ReadEnd()
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1224 int
	var yyb1224 bool
	var yyhl1224 bool = l >= 0
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1229 := &x.StartedAt
		yym1230 := z.DecBinary()
		_ = yym1230
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1229) {
		} else if yym1230 {
			z.DecBinaryUnmarshal(yyv1229)
		} else if !yym1230 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1229)
		} else {
			z.DecFallback(yyv1229, false)
		}
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1231 := &x.FinishedAt
		yym1232 := z.DecBinary()
		_ = yym1232
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1231) {
		} else if yym1232 {
			z.DecBinaryUnmarshal(yyv1231)
		} else if !yym1232 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1231)
		} else {
			z.DecFallback(yyv1231, false)
		}
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1224++
		if yyhl1224 {
			yyb1224 = yyj1224 > l
		} else {
			yyb1224 = r.CheckBreak()
		}
		if yyb1224 {
			break
		}
		z.DecStructFieldNotFound(yyj1224-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1234 := z.EncBinary()
		_ = yym1234
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1235 := !z.EncBinary()
			yy2arr1235 := z.EncBasicHandle().StructToArray
			var yyq1235 [3]bool
			_, _, _ = yysep1235, yyq1235, yy2arr1235
			const yyr1235 bool = false
			yyq1235[0] = x.Waiting != nil
			yyq1235[1] = x.Running != nil
			yyq1235[2] = x.Terminated != nil
			if yyr1235 || yy2arr1235 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1235 int = 0
				for _, b := range yyq1235 {
					if b {
						yynn1235++
					}
				}
				r.EncodeMapStart(yynn1235)
			}
			if yyr1235 || yy2arr1235 {
				if yyq1235[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1235[0] {
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1235 || yy2arr1235 {
				if yyq1235[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1235[1] {
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1235 || yy2arr1235 {
				if yyq1235[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1235[2] {
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1235 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1239 := z.DecBinary()
	_ = yym1239
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1240 := r.ReadMapStart()
			if yyl1240 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1240, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1240 := r.ReadArrayStart()
			if yyl1240 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1240, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1241Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1241Slc
	var yyhl1241 bool = l >= 0
	for yyj1241 := 0; ; yyj1241++ {
		if yyhl1241 {
			if yyj1241 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1241Slc = r.DecodeBytes(yys1241Slc, true, true)
		yys1241 := string(yys1241Slc)
		switch yys1241 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1241)
		} // end switch yys1241
	} // end for yyj1241
	if !yyhl1241 {
		r.ReadEnd()
	}
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1245 int
	var yyb1245 bool
	var yyhl1245 bool = l >= 0
	yyj1245++
	if yyhl1245 {
		yyb1245 = yyj1245 > l
	} else {
		yyb1245 = r.CheckBreak()
	}
	if yyb1245 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1245++
	if yyhl1245 {
		yyb1245 = yyj1245 > l
	} else {
		yyb1245 = r.CheckBreak()
	}
	if yyb1245 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1245++
	if yyhl1245 {
		yyb1245 = yyj1245 > l
	} else {
		yyb1245 = r.CheckBreak()
	}
	if yyb1245 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1245++
		if yyhl1245 {
			yyb1245 = yyj1245 > l
		} else {
			yyb1245 = r.CheckBreak()
		}
		if yyb1245 {
			break
		}
		z.DecStructFieldNotFound(yyj1245-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1249 := z.EncBinary()
		_ = yym1249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1250 := !z.EncBinary()
			yy2arr1250 := z.EncBasicHandle().StructToArray
			var yyq1250 [8]bool
			_, _, _ = yysep1250, yyq1250, yy2arr1250
			const yyr1250 bool = false
			yyq1250[1] = true
			yyq1250[2] = true
			yyq1250[7] = x.ContainerID != ""
			if yyr1250 || yy2arr1250 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1250 int = 5
				for _, b := range yyq1250 {
					if b {
						yynn1250++
					}
				}
				r.EncodeMapStart(yynn1250)
			}
			if yyr1250 || yy2arr1250 {
				yym1252 := z.EncBinary()
				_ = yym1252
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1253 := z.EncBinary()
				_ = yym1253
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1250 || yy2arr1250 {
				if yyq1250[1] {
					yy1255 := &x.State
					yy1255.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1250[1] {
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					yy1256 := &x.State
					yy1256.CodecEncodeSelf(e)
				}
			}
			if yyr1250 || yy2arr1250 {
				if yyq1250[2] {
					yy1258 := &x.LastTerminationState
					yy1258.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1250[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					yy1259 := &x.LastTerminationState
					yy1259.CodecEncodeSelf(e)
				}
			}
			if yyr1250 || yy2arr1250 {
				yym1261 := z.EncBinary()
				_ = yym1261
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				yym1262 := z.EncBinary()
				_ = yym1262
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1250 || yy2arr1250 {
				yym1264 := z.EncBinary()
				_ = yym1264
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				yym1265 := z.EncBinary()
				_ = yym1265
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1250 || yy2arr1250 {
				yym1267 := z.EncBinary()
				_ = yym1267
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym1268 := z.EncBinary()
				_ = yym1268
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1250 || yy2arr1250 {
				yym1270 := z.EncBinary()
				_ = yym1270
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				yym1271 := z.EncBinary()
				_ = yym1271
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1250 || yy2arr1250 {
				if yyq1250[7] {
					yym1273 := z.EncBinary()
					_ = yym1273
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1250[7] {
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					yym1274 := z.EncBinary()
					_ = yym1274
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1250 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1275 := z.DecBinary()
	_ = yym1275
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1276 := r.ReadMapStart()
			if yyl1276 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1276, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1276 := r.ReadArrayStart()
			if yyl1276 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1276, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1277Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1277Slc
	var yyhl1277 bool = l >= 0
	for yyj1277 := 0; ; yyj1277++ {
		if yyhl1277 {
			if yyj1277 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1277Slc = r.DecodeBytes(yys1277Slc, true, true)
		yys1277 := string(yys1277Slc)
		switch yys1277 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1279 := &x.State
				yyv1279.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1280 := &x.LastTerminationState
				yyv1280.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1277)
		} // end switch yys1277
	} // end for yyj1277
	if !yyhl1277 {
		r.ReadEnd()
	}
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1286 int
	var yyb1286 bool
	var yyhl1286 bool = l >= 0
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1288 := &x.State
		yyv1288.CodecDecodeSelf(d)
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1289 := &x.LastTerminationState
		yyv1289.CodecDecodeSelf(d)
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1286++
		if yyhl1286 {
			yyb1286 = yyj1286 > l
		} else {
			yyb1286 = r.CheckBreak()
		}
		if yyb1286 {
			break
		}
		z.DecStructFieldNotFound(yyj1286-1, "")
	}
	r.ReadEnd()
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1295 := z.EncBinary()
	_ = yym1295
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1296 := z.DecBinary()
	_ = yym1296
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1297 := z.EncBinary()
	_ = yym1297
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1298 := z.DecBinary()
	_ = yym1298
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1299 := z.EncBinary()
		_ = yym1299
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1300 := !z.EncBinary()
			yy2arr1300 := z.EncBasicHandle().StructToArray
			var yyq1300 [6]bool
			_, _, _ = yysep1300, yyq1300, yy2arr1300
			const yyr1300 bool = false
			yyq1300[2] = true
			yyq1300[3] = true
			yyq1300[4] = x.Reason != ""
			yyq1300[5] = x.Message != ""
			if yyr1300 || yy2arr1300 {
				r.EncodeArrayStart(6)
			} else {
				var yynn1300 int = 2
				for _, b := range yyq1300 {
					if b {
						yynn1300++
					}
				}
				r.EncodeMapStart(yynn1300)
			}
			if yyr1300 || yy2arr1300 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1300 || yy2arr1300 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1300 || yy2arr1300 {
				if yyq1300[2] {
					yy1304 := &x.LastProbeTime
					yym1305 := z.EncBinary()
					_ = yym1305
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1304) {
					} else if yym1305 {
						z.EncBinaryMarshal(yy1304)
					} else if !yym1305 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1304)
					} else {
						z.EncFallback(yy1304)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1300[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					yy1306 := &x.LastProbeTime
					yym1307 := z.EncBinary()
					_ = yym1307
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1306) {
					} else if yym1307 {
						z.EncBinaryMarshal(yy1306)
					} else if !yym1307 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1306)
					} else {
						z.EncFallback(yy1306)
					}
				}
			}
			if yyr1300 || yy2arr1300 {
				if yyq1300[3] {
					yy1309 := &x.LastTransitionTime
					yym1310 := z.EncBinary()
					_ = yym1310
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1309) {
					} else if yym1310 {
						z.EncBinaryMarshal(yy1309)
					} else if !yym1310 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1309)
					} else {
						z.EncFallback(yy1309)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1300[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy1311 := &x.LastTransitionTime
					yym1312 := z.EncBinary()
					_ = yym1312
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1311) {
					} else if yym1312 {
						z.EncBinaryMarshal(yy1311)
					} else if !yym1312 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1311)
					} else {
						z.EncFallback(yy1311)
					}
				}
			}
			if yyr1300 || yy2arr1300 {
				if yyq1300[4] {
					yym1314 := z.EncBinary()
					_ = yym1314
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1300[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1315 := z.EncBinary()
					_ = yym1315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1300 || yy2arr1300 {
				if yyq1300[5] {
					yym1317 := z.EncBinary()
					_ = yym1317
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1300[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1318 := z.EncBinary()
					_ = yym1318
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1300 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1319 := z.DecBinary()
	_ = yym1319
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1320 := r.ReadMapStart()
			if yyl1320 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1320, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1320 := r.ReadArrayStart()
			if yyl1320 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1320, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1321Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1321Slc
	var yyhl1321 bool = l >= 0
	for yyj1321 := 0; ; yyj1321++ {
		if yyhl1321 {
			if yyj1321 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1321Slc = r.DecodeBytes(yys1321Slc, true, true)
		yys1321 := string(yys1321Slc)
		switch yys1321 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1324 := &x.LastProbeTime
				yym1325 := z.DecBinary()
				_ = yym1325
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1324) {
				} else if yym1325 {
					z.DecBinaryUnmarshal(yyv1324)
				} else if !yym1325 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1324)
				} else {
					z.DecFallback(yyv1324, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1326 := &x.LastTransitionTime
				yym1327 := z.DecBinary()
				_ = yym1327
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1326) {
				} else if yym1327 {
					z.DecBinaryUnmarshal(yyv1326)
				} else if !yym1327 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1326)
				} else {
					z.DecFallback(yyv1326, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1321)
		} // end switch yys1321
	} // end for yyj1321
	if !yyhl1321 {
		r.ReadEnd()
	}
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1330 int
	var yyb1330 bool
	var yyhl1330 bool = l >= 0
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1333 := &x.LastProbeTime
		yym1334 := z.DecBinary()
		_ = yym1334
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1333) {
		} else if yym1334 {
			z.DecBinaryUnmarshal(yyv1333)
		} else if !yym1334 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1333)
		} else {
			z.DecFallback(yyv1333, false)
		}
	}
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1335 := &x.LastTransitionTime
		yym1336 := z.DecBinary()
		_ = yym1336
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1335) {
		} else if yym1336 {
			z.DecBinaryUnmarshal(yyv1335)
		} else if !yym1336 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1335)
		} else {
			z.DecFallback(yyv1335, false)
		}
	}
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1330++
		if yyhl1330 {
			yyb1330 = yyj1330 > l
		} else {
			yyb1330 = r.CheckBreak()
		}
		if yyb1330 {
			break
		}
		z.DecStructFieldNotFound(yyj1330-1, "")
	}
	r.ReadEnd()
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1339 := z.EncBinary()
	_ = yym1339
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1340 := z.DecBinary()
	_ = yym1340
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1341 := z.EncBinary()
	_ = yym1341
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1342 := z.DecBinary()
	_ = yym1342
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1343 := z.EncBinary()
		_ = yym1343
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1344 := !z.EncBinary()
			yy2arr1344 := z.EncBasicHandle().StructToArray
			var yyq1344 [15]bool
			_, _, _ = yysep1344, yyq1344, yy2arr1344
			const yyr1344 bool = false
			yyq1344[0] = len(x.Volumes) != 0
			yyq1344[2] = x.RestartPolicy != ""
			yyq1344[3] = x.TerminationGracePeriodSeconds != nil
			yyq1344[4] = x.ActiveDeadlineSeconds != nil
			yyq1344[5] = x.DNSPolicy != ""
			yyq1344[6] = len(x.NodeSelector) != 0
			yyq1344[7] = x.ServiceAccountName != ""
			yyq1344[8] = x.DeprecatedServiceAccount != ""
			yyq1344[9] = x.NodeName != ""
			yyq1344[10] = x.HostNetwork != false
			yyq1344[11] = x.HostPID != false
			yyq1344[12] = x.HostIPC != false
			yyq1344[13] = x.SecurityContext != nil
			yyq1344[14] = len(x.ImagePullSecrets) != 0
			if yyr1344 || yy2arr1344 {
				r.EncodeArrayStart(15)
			} else {
				var yynn1344 int = 1
				for _, b := range yyq1344 {
					if b {
						yynn1344++
					}
				}
				r.EncodeMapStart(yynn1344)
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1346 := z.EncBinary()
						_ = yym1346
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[0] {
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1347 := z.EncBinary()
						_ = yym1347
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1349 := z.EncBinary()
					_ = yym1349
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1350 := z.EncBinary()
					_ = yym1350
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1344[2] {
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1353 := *x.TerminationGracePeriodSeconds
						yym1354 := z.EncBinary()
						_ = yym1354
						if false {
						} else {
							r.EncodeInt(int64(yy1353))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[3] {
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1355 := *x.TerminationGracePeriodSeconds
						yym1356 := z.EncBinary()
						_ = yym1356
						if false {
						} else {
							r.EncodeInt(int64(yy1355))
						}
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1358 := *x.ActiveDeadlineSeconds
						yym1359 := z.EncBinary()
						_ = yym1359
						if false {
						} else {
							r.EncodeInt(int64(yy1358))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[4] {
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1360 := *x.ActiveDeadlineSeconds
						yym1361 := z.EncBinary()
						_ = yym1361
						if false {
						} else {
							r.EncodeInt(int64(yy1360))
						}
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1344[5] {
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1364 := z.EncBinary()
						_ = yym1364
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[6] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1365 := z.EncBinary()
						_ = yym1365
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[7] {
					yym1367 := z.EncBinary()
					_ = yym1367
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1344[7] {
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					yym1368 := z.EncBinary()
					_ = yym1368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[8] {
					yym1370 := z.EncBinary()
					_ = yym1370
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1344[8] {
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					yym1371 := z.EncBinary()
					_ = yym1371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[9] {
					yym1373 := z.EncBinary()
					_ = yym1373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1344[9] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					yym1374 := z.EncBinary()
					_ = yym1374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[10] {
					yym1376 := z.EncBinary()
					_ = yym1376
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1344[10] {
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					yym1377 := z.EncBinary()
					_ = yym1377
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[11] {
					yym1379 := z.EncBinary()
					_ = yym1379
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1344[11] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					yym1380 := z.EncBinary()
					_ = yym1380
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[12] {
					yym1382 := z.EncBinary()
					_ = yym1382
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1344[12] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					yym1383 := z.EncBinary()
					_ = yym1383
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[13] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[13] {
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[14] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1386 := z.EncBinary()
						_ = yym1386
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[14] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1387 := z.EncBinary()
						_ = yym1387
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep1344 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1388 := z.DecBinary()
	_ = yym1388
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1389 := r.ReadMapStart()
			if yyl1389 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1389, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1389 := r.ReadArrayStart()
			if yyl1389 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1389, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1390Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1390Slc
	var yyhl1390 bool = l >= 0
	for yyj1390 := 0; ; yyj1390++ {
		if yyhl1390 {
			if yyj1390 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1390Slc = r.DecodeBytes(yys1390Slc, true, true)
		yys1390 := string(yys1390Slc)
		switch yys1390 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1391 := &x.Volumes
				yym1392 := z.DecBinary()
				_ = yym1392
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1391), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1393 := &x.Containers
				yym1394 := z.DecBinary()
				_ = yym1394
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1393), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1397 := z.DecBinary()
				_ = yym1397
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1399 := z.DecBinary()
				_ = yym1399
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1401 := &x.NodeSelector
				yym1402 := z.DecBinary()
				_ = yym1402
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1401, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1410 := &x.ImagePullSecrets
				yym1411 := z.DecBinary()
				_ = yym1411
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1410), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1390)
		} // end switch yys1390
	} // end for yyj1390
	if !yyhl1390 {
		r.ReadEnd()
	}
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1412 int
	var yyb1412 bool
	var yyhl1412 bool = l >= 0
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1413 := &x.Volumes
		yym1414 := z.DecBinary()
		_ = yym1414
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1413), d)
		}
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1415 := &x.Containers
		yym1416 := z.DecBinary()
		_ = yym1416
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1415), d)
		}
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1419 := z.DecBinary()
		_ = yym1419
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1421 := z.DecBinary()
		_ = yym1421
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1423 := &x.NodeSelector
		yym1424 := z.DecBinary()
		_ = yym1424
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1423, false, d)
		}
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1412++
	if yyhl1412 {
		yyb1412 = yyj1412 > l
	} else {
		yyb1412 = r.CheckBreak()
	}
	if yyb1412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1432 := &x.ImagePullSecrets
		yym1433 := z.DecBinary()
		_ = yym1433
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1432), d)
		}
	}
	for {
		yyj1412++
		if yyhl1412 {
			yyb1412 = yyj1412 > l
		} else {
			yyb1412 = r.CheckBreak()
		}
		if yyb1412 {
			break
		}
		z.DecStructFieldNotFound(yyj1412-1, "")
	}
	r.ReadEnd()
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1434 := z.EncBinary()
		_ = yym1434
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1435 := !z.EncBinary()
			yy2arr1435 := z.EncBasicHandle().StructToArray
			var yyq1435 [4]bool
			_, _, _ = yysep1435, yyq1435, yy2arr1435
			const yyr1435 bool = false
			yyq1435[0] = len(x.SupplementalGroups) != 0
			yyq1435[1] = x.SELinuxOptions != nil
			yyq1435[2] = x.RunAsUser != nil
			yyq1435[3] = x.RunAsNonRoot != nil
			if yyr1435 || yy2arr1435 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1435 int = 0
				for _, b := range yyq1435 {
					if b {
						yynn1435++
					}
				}
				r.EncodeMapStart(yynn1435)
			}
			if yyr1435 || yy2arr1435 {
				if yyq1435[0] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1437 := z.EncBinary()
						_ = yym1437
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1435[0] {
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1438 := z.EncBinary()
						_ = yym1438
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr1435 || yy2arr1435 {
				if yyq1435[1] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1435[1] {
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1435 || yy2arr1435 {
				if yyq1435[2] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1441 := *x.RunAsUser
						yym1442 := z.EncBinary()
						_ = yym1442
						if false {
						} else {
							r.EncodeInt(int64(yy1441))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1435[2] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1443 := *x.RunAsUser
						yym1444 := z.EncBinary()
						_ = yym1444
						if false {
						} else {
							r.EncodeInt(int64(yy1443))
						}
					}
				}
			}
			if yyr1435 || yy2arr1435 {
				if yyq1435[3] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1446 := *x.RunAsNonRoot
						yym1447 := z.EncBinary()
						_ = yym1447
						if false {
						} else {
							r.EncodeBool(bool(yy1446))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1435[3] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1448 := *x.RunAsNonRoot
						yym1449 := z.EncBinary()
						_ = yym1449
						if false {
						} else {
							r.EncodeBool(bool(yy1448))
						}
					}
				}
			}
			if yysep1435 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1450 := z.DecBinary()
	_ = yym1450
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1451 := r.ReadMapStart()
			if yyl1451 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1451, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1451 := r.ReadArrayStart()
			if yyl1451 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1451, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1452Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1452Slc
	var yyhl1452 bool = l >= 0
	for yyj1452 := 0; ; yyj1452++ {
		if yyhl1452 {
			if yyj1452 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1452Slc = r.DecodeBytes(yys1452Slc, true, true)
		yys1452 := string(yys1452Slc)
		switch yys1452 {
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv1453 := &x.SupplementalGroups
				yym1454 := z.DecBinary()
				_ = yym1454
				if false {
				} else {
					z.F.DecSliceInt64X(yyv1453, false, d)
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym1457 := z.DecBinary()
				_ = yym1457
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym1459 := z.DecBinary()
				_ = yym1459
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1452)
		} // end switch yys1452
	} // end for yyj1452
	if !yyhl1452 {
		r.ReadEnd()
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1460 int
	var yyb1460 bool
	var yyhl1460 bool = l >= 0
	yyj1460++
	if yyhl1460 {
		yyb1460 = yyj1460 > l
	} else {
		yyb1460 = r.CheckBreak()
	}
	if yyb1460 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv1461 := &x.SupplementalGroups
		yym1462 := z.DecBinary()
		_ = yym1462
		if false {
		} else {
			z.F.DecSliceInt64X(yyv1461, false, d)
		}
	}
	yyj1460++
	if yyhl1460 {
		yyb1460 = yyj1460 > l
	} else {
		yyb1460 = r.CheckBreak()
	}
	if yyb1460 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj1460++
	if yyhl1460 {
		yyb1460 = yyj1460 > l
	} else {
		yyb1460 = r.CheckBreak()
	}
	if yyb1460 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym1465 := z.DecBinary()
		_ = yym1465
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj1460++
	if yyhl1460 {
		yyb1460 = yyj1460 > l
	} else {
		yyb1460 = r.CheckBreak()
	}
	if yyb1460 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym1467 := z.DecBinary()
		_ = yym1467
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	for {
		yyj1460++
		if yyhl1460 {
			yyb1460 = yyj1460 > l
		} else {
			yyb1460 = r.CheckBreak()
		}
		if yyb1460 {
			break
		}
		z.DecStructFieldNotFound(yyj1460-1, "")
	}
	r.ReadEnd()
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1468 := z.EncBinary()
		_ = yym1468
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1469 := !z.EncBinary()
			yy2arr1469 := z.EncBasicHandle().StructToArray
			var yyq1469 [8]bool
			_, _, _ = yysep1469, yyq1469, yy2arr1469
			const yyr1469 bool = false
			yyq1469[0] = x.Phase != ""
			yyq1469[1] = len(x.Conditions) != 0
			yyq1469[2] = x.Message != ""
			yyq1469[3] = x.Reason != ""
			yyq1469[4] = x.HostIP != ""
			yyq1469[5] = x.PodIP != ""
			yyq1469[6] = x.StartTime != nil
			yyq1469[7] = len(x.ContainerStatuses) != 0
			if yyr1469 || yy2arr1469 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1469 int = 0
				for _, b := range yyq1469 {
					if b {
						yynn1469++
					}
				}
				r.EncodeMapStart(yynn1469)
			}
			if yyr1469 || yy2arr1469 {
				if yyq1469[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1469[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1469 || yy2arr1469 {
				if yyq1469[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1472 := z.EncBinary()
						_ = yym1472
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1469[1] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1473 := z.EncBinary()
						_ = yym1473
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1469 || yy2arr1469 {
				if yyq1469[2] {
					yym1475 := z.EncBinary()
					_ = yym1475
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1469[2] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1476 := z.EncBinary()
					_ = yym1476
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1469 || yy2arr1469 {
				if yyq1469[3] {
					yym1478 := z.EncBinary()
					_ = yym1478
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1469[3] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1479 := z.EncBinary()
					_ = yym1479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1469 || yy2arr1469 {
				if yyq1469[4] {
					yym1481 := z.EncBinary()
					_ = yym1481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1469[4] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					yym1482 := z.EncBinary()
					_ = yym1482
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1469 || yy2arr1469 {
				if yyq1469[5] {
					yym1484 := z.EncBinary()
					_ = yym1484
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1469[5] {
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					yym1485 := z.EncBinary()
					_ = yym1485
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1469 || yy2arr1469 {
				if yyq1469[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1487 := z.EncBinary()
						_ = yym1487
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1487 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1487 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1469[6] {
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1488 := z.EncBinary()
						_ = yym1488
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1488 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1488 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1469 || yy2arr1469 {
				if yyq1469[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1490 := z.EncBinary()
						_ = yym1490
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1469[7] {
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1491 := z.EncBinary()
						_ = yym1491
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yysep1469 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1492 := z.DecBinary()
	_ = yym1492
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1493 := r.ReadMapStart()
			if yyl1493 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1493, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1493 := r.ReadArrayStart()
			if yyl1493 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1493, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1494Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1494Slc
	var yyhl1494 bool = l >= 0
	for yyj1494 := 0; ; yyj1494++ {
		if yyhl1494 {
			if yyj1494 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1494Slc = r.DecodeBytes(yys1494Slc, true, true)
		yys1494 := string(yys1494Slc)
		switch yys1494 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1496 := &x.Conditions
				yym1497 := z.DecBinary()
				_ = yym1497
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1496), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym1503 := z.DecBinary()
				_ = yym1503
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1503 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1503 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1504 := &x.ContainerStatuses
				yym1505 := z.DecBinary()
				_ = yym1505
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1504), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1494)
		} // end switch yys1494
	} // end for yyj1494
	if !yyhl1494 {
		r.ReadEnd()
	}
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1506 int
	var yyb1506 bool
	var yyhl1506 bool = l >= 0
	yyj1506++
	if yyhl1506 {
		yyb1506 = yyj1506 > l
	} else {
		yyb1506 = r.CheckBreak()
	}
	if yyb1506 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1506++
	if yyhl1506 {
		yyb1506 = yyj1506 > l
	} else {
		yyb1506 = r.CheckBreak()
	}
	if yyb1506 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1508 := &x.Conditions
		yym1509 := z.DecBinary()
		_ = yym1509
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1508), d)
		}
	}
	yyj1506++
	if yyhl1506 {
		yyb1506 = yyj1506 > l
	} else {
		yyb1506 = r.CheckBreak()
	}
	if yyb1506 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1506++
	if yyhl1506 {
		yyb1506 = yyj1506 > l
	} else {
		yyb1506 = r.CheckBreak()
	}
	if yyb1506 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1506++
	if yyhl1506 {
		yyb1506 = yyj1506 > l
	} else {
		yyb1506 = r.CheckBreak()
	}
	if yyb1506 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1506++
	if yyhl1506 {
		yyb1506 = yyj1506 > l
	} else {
		yyb1506 = r.CheckBreak()
	}
	if yyb1506 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1506++
	if yyhl1506 {
		yyb1506 = yyj1506 > l
	} else {
		yyb1506 = r.CheckBreak()
	}
	if yyb1506 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym1515 := z.DecBinary()
		_ = yym1515
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1515 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1515 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1506++
	if yyhl1506 {
		yyb1506 = yyj1506 > l
	} else {
		yyb1506 = r.CheckBreak()
	}
	if yyb1506 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1516 := &x.ContainerStatuses
		yym1517 := z.DecBinary()
		_ = yym1517
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1516), d)
		}
	}
	for {
		yyj1506++
		if yyhl1506 {
			yyb1506 = yyj1506 > l
		} else {
			yyb1506 = r.CheckBreak()
		}
		if yyb1506 {
			break
		}
		z.DecStructFieldNotFound(yyj1506-1, "")
	}
	r.ReadEnd()
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1518 := z.EncBinary()
		_ = yym1518
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1519 := !z.EncBinary()
			yy2arr1519 := z.EncBasicHandle().StructToArray
			var yyq1519 [4]bool
			_, _, _ = yysep1519, yyq1519, yy2arr1519
			const yyr1519 bool = false
			yyq1519[0] = x.Kind != ""
			yyq1519[1] = x.APIVersion != ""
			yyq1519[2] = true
			yyq1519[3] = true
			if yyr1519 || yy2arr1519 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1519 int = 0
				for _, b := range yyq1519 {
					if b {
						yynn1519++
					}
				}
				r.EncodeMapStart(yynn1519)
			}
			if yyr1519 || yy2arr1519 {
				if yyq1519[0] {
					yym1521 := z.EncBinary()
					_ = yym1521
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1519[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1522 := z.EncBinary()
					_ = yym1522
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1519 || yy2arr1519 {
				if yyq1519[1] {
					yym1524 := z.EncBinary()
					_ = yym1524
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1519[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1525 := z.EncBinary()
					_ = yym1525
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1519 || yy2arr1519 {
				if yyq1519[2] {
					yy1527 := &x.ObjectMeta
					yy1527.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1519[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1528 := &x.ObjectMeta
					yy1528.CodecEncodeSelf(e)
				}
			}
			if yyr1519 || yy2arr1519 {
				if yyq1519[3] {
					yy1530 := &x.Status
					yy1530.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1519[3] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1531 := &x.Status
					yy1531.CodecEncodeSelf(e)
				}
			}
			if yysep1519 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1532 := z.DecBinary()
	_ = yym1532
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1533 := r.ReadMapStart()
			if yyl1533 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1533, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1533 := r.ReadArrayStart()
			if yyl1533 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1533, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1534Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1534Slc
	var yyhl1534 bool = l >= 0
	for yyj1534 := 0; ; yyj1534++ {
		if yyhl1534 {
			if yyj1534 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1534Slc = r.DecodeBytes(yys1534Slc, true, true)
		yys1534 := string(yys1534Slc)
		switch yys1534 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1537 := &x.ObjectMeta
				yyv1537.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1538 := &x.Status
				yyv1538.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1534)
		} // end switch yys1534
	} // end for yyj1534
	if !yyhl1534 {
		r.ReadEnd()
	}
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1539 int
	var yyb1539 bool
	var yyhl1539 bool = l >= 0
	yyj1539++
	if yyhl1539 {
		yyb1539 = yyj1539 > l
	} else {
		yyb1539 = r.CheckBreak()
	}
	if yyb1539 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1539++
	if yyhl1539 {
		yyb1539 = yyj1539 > l
	} else {
		yyb1539 = r.CheckBreak()
	}
	if yyb1539 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1539++
	if yyhl1539 {
		yyb1539 = yyj1539 > l
	} else {
		yyb1539 = r.CheckBreak()
	}
	if yyb1539 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1542 := &x.ObjectMeta
		yyv1542.CodecDecodeSelf(d)
	}
	yyj1539++
	if yyhl1539 {
		yyb1539 = yyj1539 > l
	} else {
		yyb1539 = r.CheckBreak()
	}
	if yyb1539 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1543 := &x.Status
		yyv1543.CodecDecodeSelf(d)
	}
	for {
		yyj1539++
		if yyhl1539 {
			yyb1539 = yyj1539 > l
		} else {
			yyb1539 = r.CheckBreak()
		}
		if yyb1539 {
			break
		}
		z.DecStructFieldNotFound(yyj1539-1, "")
	}
	r.ReadEnd()
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1544 := z.EncBinary()
		_ = yym1544
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1545 := !z.EncBinary()
			yy2arr1545 := z.EncBasicHandle().StructToArray
			var yyq1545 [5]bool
			_, _, _ = yysep1545, yyq1545, yy2arr1545
			const yyr1545 bool = false
			yyq1545[0] = x.Kind != ""
			yyq1545[1] = x.APIVersion != ""
			yyq1545[2] = true
			yyq1545[3] = true
			yyq1545[4] = true
			if yyr1545 || yy2arr1545 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1545 int = 0
				for _, b := range yyq1545 {
					if b {
						yynn1545++
					}
				}
				r.EncodeMapStart(yynn1545)
			}
			if yyr1545 || yy2arr1545 {
				if yyq1545[0] {
					yym1547 := z.EncBinary()
					_ = yym1547
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1545[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1548 := z.EncBinary()
					_ = yym1548
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1545 || yy2arr1545 {
				if yyq1545[1] {
					yym1550 := z.EncBinary()
					_ = yym1550
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1545[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1551 := z.EncBinary()
					_ = yym1551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1545 || yy2arr1545 {
				if yyq1545[2] {
					yy1553 := &x.ObjectMeta
					yy1553.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1545[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1554 := &x.ObjectMeta
					yy1554.CodecEncodeSelf(e)
				}
			}
			if yyr1545 || yy2arr1545 {
				if yyq1545[3] {
					yy1556 := &x.Spec
					yy1556.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1545[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1557 := &x.Spec
					yy1557.CodecEncodeSelf(e)
				}
			}
			if yyr1545 || yy2arr1545 {
				if yyq1545[4] {
					yy1559 := &x.Status
					yy1559.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1545[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1560 := &x.Status
					yy1560.CodecEncodeSelf(e)
				}
			}
			if yysep1545 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1561 := z.DecBinary()
	_ = yym1561
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1562 := r.ReadMapStart()
			if yyl1562 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1562, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1562 := r.ReadArrayStart()
			if yyl1562 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1562, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1563Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1563Slc
	var yyhl1563 bool = l >= 0
	for yyj1563 := 0; ; yyj1563++ {
		if yyhl1563 {
			if yyj1563 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1563Slc = r.DecodeBytes(yys1563Slc, true, true)
		yys1563 := string(yys1563Slc)
		switch yys1563 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1566 := &x.ObjectMeta
				yyv1566.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1567 := &x.Spec
				yyv1567.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1568 := &x.Status
				yyv1568.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1563)
		} // end switch yys1563
	} // end for yyj1563
	if !yyhl1563 {
		r.ReadEnd()
	}
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1569 int
	var yyb1569 bool
	var yyhl1569 bool = l >= 0
	yyj1569++
	if yyhl1569 {
		yyb1569 = yyj1569 > l
	} else {
		yyb1569 = r.CheckBreak()
	}
	if yyb1569 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1569++
	if yyhl1569 {
		yyb1569 = yyj1569 > l
	} else {
		yyb1569 = r.CheckBreak()
	}
	if yyb1569 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1569++
	if yyhl1569 {
		yyb1569 = yyj1569 > l
	} else {
		yyb1569 = r.CheckBreak()
	}
	if yyb1569 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1572 := &x.ObjectMeta
		yyv1572.CodecDecodeSelf(d)
	}
	yyj1569++
	if yyhl1569 {
		yyb1569 = yyj1569 > l
	} else {
		yyb1569 = r.CheckBreak()
	}
	if yyb1569 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1573 := &x.Spec
		yyv1573.CodecDecodeSelf(d)
	}
	yyj1569++
	if yyhl1569 {
		yyb1569 = yyj1569 > l
	} else {
		yyb1569 = r.CheckBreak()
	}
	if yyb1569 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1574 := &x.Status
		yyv1574.CodecDecodeSelf(d)
	}
	for {
		yyj1569++
		if yyhl1569 {
			yyb1569 = yyj1569 > l
		} else {
			yyb1569 = r.CheckBreak()
		}
		if yyb1569 {
			break
		}
		z.DecStructFieldNotFound(yyj1569-1, "")
	}
	r.ReadEnd()
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1575 := z.EncBinary()
		_ = yym1575
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1576 := !z.EncBinary()
			yy2arr1576 := z.EncBasicHandle().StructToArray
			var yyq1576 [4]bool
			_, _, _ = yysep1576, yyq1576, yy2arr1576
			const yyr1576 bool = false
			yyq1576[0] = x.Kind != ""
			yyq1576[1] = x.APIVersion != ""
			yyq1576[2] = true
			if yyr1576 || yy2arr1576 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1576 int = 1
				for _, b := range yyq1576 {
					if b {
						yynn1576++
					}
				}
				r.EncodeMapStart(yynn1576)
			}
			if yyr1576 || yy2arr1576 {
				if yyq1576[0] {
					yym1578 := z.EncBinary()
					_ = yym1578
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1576[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1579 := z.EncBinary()
					_ = yym1579
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1576 || yy2arr1576 {
				if yyq1576[1] {
					yym1581 := z.EncBinary()
					_ = yym1581
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1576[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1582 := z.EncBinary()
					_ = yym1582
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1576 || yy2arr1576 {
				if yyq1576[2] {
					yy1584 := &x.ListMeta
					yym1585 := z.EncBinary()
					_ = yym1585
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1584) {
					} else {
						z.EncFallback(yy1584)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1576[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1586 := &x.ListMeta
					yym1587 := z.EncBinary()
					_ = yym1587
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1586) {
					} else {
						z.EncFallback(yy1586)
					}
				}
			}
			if yyr1576 || yy2arr1576 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1589 := z.EncBinary()
					_ = yym1589
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1590 := z.EncBinary()
					_ = yym1590
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yysep1576 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1591 := z.DecBinary()
	_ = yym1591
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1592 := r.ReadMapStart()
			if yyl1592 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1592, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1592 := r.ReadArrayStart()
			if yyl1592 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1592, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1593Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1593Slc
	var yyhl1593 bool = l >= 0
	for yyj1593 := 0; ; yyj1593++ {
		if yyhl1593 {
			if yyj1593 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1593Slc = r.DecodeBytes(yys1593Slc, true, true)
		yys1593 := string(yys1593Slc)
		switch yys1593 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1596 := &x.ListMeta
				yym1597 := z.DecBinary()
				_ = yym1597
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1596) {
				} else {
					z.DecFallback(yyv1596, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1598 := &x.Items
				yym1599 := z.DecBinary()
				_ = yym1599
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1598), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1593)
		} // end switch yys1593
	} // end for yyj1593
	if !yyhl1593 {
		r.ReadEnd()
	}
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1600 int
	var yyb1600 bool
	var yyhl1600 bool = l >= 0
	yyj1600++
	if yyhl1600 {
		yyb1600 = yyj1600 > l
	} else {
		yyb1600 = r.CheckBreak()
	}
	if yyb1600 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1600++
	if yyhl1600 {
		yyb1600 = yyj1600 > l
	} else {
		yyb1600 = r.CheckBreak()
	}
	if yyb1600 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1600++
	if yyhl1600 {
		yyb1600 = yyj1600 > l
	} else {
		yyb1600 = r.CheckBreak()
	}
	if yyb1600 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1603 := &x.ListMeta
		yym1604 := z.DecBinary()
		_ = yym1604
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1603) {
		} else {
			z.DecFallback(yyv1603, false)
		}
	}
	yyj1600++
	if yyhl1600 {
		yyb1600 = yyj1600 > l
	} else {
		yyb1600 = r.CheckBreak()
	}
	if yyb1600 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1605 := &x.Items
		yym1606 := z.DecBinary()
		_ = yym1606
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1605), d)
		}
	}
	for {
		yyj1600++
		if yyhl1600 {
			yyb1600 = yyj1600 > l
		} else {
			yyb1600 = r.CheckBreak()
		}
		if yyb1600 {
			break
		}
		z.DecStructFieldNotFound(yyj1600-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1607 := z.EncBinary()
		_ = yym1607
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1608 := !z.EncBinary()
			yy2arr1608 := z.EncBasicHandle().StructToArray
			var yyq1608 [2]bool
			_, _, _ = yysep1608, yyq1608, yy2arr1608
			const yyr1608 bool = false
			yyq1608[0] = true
			yyq1608[1] = true
			if yyr1608 || yy2arr1608 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1608 int = 0
				for _, b := range yyq1608 {
					if b {
						yynn1608++
					}
				}
				r.EncodeMapStart(yynn1608)
			}
			if yyr1608 || yy2arr1608 {
				if yyq1608[0] {
					yy1610 := &x.ObjectMeta
					yy1610.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1608[0] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1611 := &x.ObjectMeta
					yy1611.CodecEncodeSelf(e)
				}
			}
			if yyr1608 || yy2arr1608 {
				if yyq1608[1] {
					yy1613 := &x.Spec
					yy1613.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1608[1] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1614 := &x.Spec
					yy1614.CodecEncodeSelf(e)
				}
			}
			if yysep1608 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1615 := z.DecBinary()
	_ = yym1615
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1616 := r.ReadMapStart()
			if yyl1616 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1616, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1616 := r.ReadArrayStart()
			if yyl1616 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1616, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1617Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1617Slc
	var yyhl1617 bool = l >= 0
	for yyj1617 := 0; ; yyj1617++ {
		if yyhl1617 {
			if yyj1617 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1617Slc = r.DecodeBytes(yys1617Slc, true, true)
		yys1617 := string(yys1617Slc)
		switch yys1617 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1618 := &x.ObjectMeta
				yyv1618.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1619 := &x.Spec
				yyv1619.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1617)
		} // end switch yys1617
	} // end for yyj1617
	if !yyhl1617 {
		r.ReadEnd()
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1620 int
	var yyb1620 bool
	var yyhl1620 bool = l >= 0
	yyj1620++
	if yyhl1620 {
		yyb1620 = yyj1620 > l
	} else {
		yyb1620 = r.CheckBreak()
	}
	if yyb1620 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1621 := &x.ObjectMeta
		yyv1621.CodecDecodeSelf(d)
	}
	yyj1620++
	if yyhl1620 {
		yyb1620 = yyj1620 > l
	} else {
		yyb1620 = r.CheckBreak()
	}
	if yyb1620 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1622 := &x.Spec
		yyv1622.CodecDecodeSelf(d)
	}
	for {
		yyj1620++
		if yyhl1620 {
			yyb1620 = yyj1620 > l
		} else {
			yyb1620 = r.CheckBreak()
		}
		if yyb1620 {
			break
		}
		z.DecStructFieldNotFound(yyj1620-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1623 := z.EncBinary()
		_ = yym1623
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1624 := !z.EncBinary()
			yy2arr1624 := z.EncBasicHandle().StructToArray
			var yyq1624 [4]bool
			_, _, _ = yysep1624, yyq1624, yy2arr1624
			const yyr1624 bool = false
			yyq1624[0] = x.Kind != ""
			yyq1624[1] = x.APIVersion != ""
			yyq1624[2] = true
			yyq1624[3] = true
			if yyr1624 || yy2arr1624 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1624 int = 0
				for _, b := range yyq1624 {
					if b {
						yynn1624++
					}
				}
				r.EncodeMapStart(yynn1624)
			}
			if yyr1624 || yy2arr1624 {
				if yyq1624[0] {
					yym1626 := z.EncBinary()
					_ = yym1626
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1624[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1627 := z.EncBinary()
					_ = yym1627
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1624 || yy2arr1624 {
				if yyq1624[1] {
					yym1629 := z.EncBinary()
					_ = yym1629
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1624[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1630 := z.EncBinary()
					_ = yym1630
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1624 || yy2arr1624 {
				if yyq1624[2] {
					yy1632 := &x.ObjectMeta
					yy1632.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1624[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1633 := &x.ObjectMeta
					yy1633.CodecEncodeSelf(e)
				}
			}
			if yyr1624 || yy2arr1624 {
				if yyq1624[3] {
					yy1635 := &x.Template
					yy1635.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1624[3] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					yy1636 := &x.Template
					yy1636.CodecEncodeSelf(e)
				}
			}
			if yysep1624 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1637 := z.DecBinary()
	_ = yym1637
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1638 := r.ReadMapStart()
			if yyl1638 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1638, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1638 := r.ReadArrayStart()
			if yyl1638 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1638, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1639Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1639Slc
	var yyhl1639 bool = l >= 0
	for yyj1639 := 0; ; yyj1639++ {
		if yyhl1639 {
			if yyj1639 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1639Slc = r.DecodeBytes(yys1639Slc, true, true)
		yys1639 := string(yys1639Slc)
		switch yys1639 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1642 := &x.ObjectMeta
				yyv1642.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv1643 := &x.Template
				yyv1643.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1639)
		} // end switch yys1639
	} // end for yyj1639
	if !yyhl1639 {
		r.ReadEnd()
	}
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1644 int
	var yyb1644 bool
	var yyhl1644 bool = l >= 0
	yyj1644++
	if yyhl1644 {
		yyb1644 = yyj1644 > l
	} else {
		yyb1644 = r.CheckBreak()
	}
	if yyb1644 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1644++
	if yyhl1644 {
		yyb1644 = yyj1644 > l
	} else {
		yyb1644 = r.CheckBreak()
	}
	if yyb1644 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1644++
	if yyhl1644 {
		yyb1644 = yyj1644 > l
	} else {
		yyb1644 = r.CheckBreak()
	}
	if yyb1644 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1647 := &x.ObjectMeta
		yyv1647.CodecDecodeSelf(d)
	}
	yyj1644++
	if yyhl1644 {
		yyb1644 = yyj1644 > l
	} else {
		yyb1644 = r.CheckBreak()
	}
	if yyb1644 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv1648 := &x.Template
		yyv1648.CodecDecodeSelf(d)
	}
	for {
		yyj1644++
		if yyhl1644 {
			yyb1644 = yyj1644 > l
		} else {
			yyb1644 = r.CheckBreak()
		}
		if yyb1644 {
			break
		}
		z.DecStructFieldNotFound(yyj1644-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1649 := z.EncBinary()
		_ = yym1649
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1650 := !z.EncBinary()
			yy2arr1650 := z.EncBasicHandle().StructToArray
			var yyq1650 [4]bool
			_, _, _ = yysep1650, yyq1650, yy2arr1650
			const yyr1650 bool = false
			yyq1650[0] = x.Kind != ""
			yyq1650[1] = x.APIVersion != ""
			yyq1650[2] = true
			if yyr1650 || yy2arr1650 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1650 int = 1
				for _, b := range yyq1650 {
					if b {
						yynn1650++
					}
				}
				r.EncodeMapStart(yynn1650)
			}
			if yyr1650 || yy2arr1650 {
				if yyq1650[0] {
					yym1652 := z.EncBinary()
					_ = yym1652
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1650[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1653 := z.EncBinary()
					_ = yym1653
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1650 || yy2arr1650 {
				if yyq1650[1] {
					yym1655 := z.EncBinary()
					_ = yym1655
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1650[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1656 := z.EncBinary()
					_ = yym1656
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1650 || yy2arr1650 {
				if yyq1650[2] {
					yy1658 := &x.ListMeta
					yym1659 := z.EncBinary()
					_ = yym1659
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1658) {
					} else {
						z.EncFallback(yy1658)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1650[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1660 := &x.ListMeta
					yym1661 := z.EncBinary()
					_ = yym1661
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1660) {
					} else {
						z.EncFallback(yy1660)
					}
				}
			}
			if yyr1650 || yy2arr1650 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1663 := z.EncBinary()
					_ = yym1663
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1664 := z.EncBinary()
					_ = yym1664
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yysep1650 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1665 := z.DecBinary()
	_ = yym1665
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1666 := r.ReadMapStart()
			if yyl1666 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1666, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1666 := r.ReadArrayStart()
			if yyl1666 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1666, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1667Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1667Slc
	var yyhl1667 bool = l >= 0
	for yyj1667 := 0; ; yyj1667++ {
		if yyhl1667 {
			if yyj1667 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1667Slc = r.DecodeBytes(yys1667Slc, true, true)
		yys1667 := string(yys1667Slc)
		switch yys1667 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1670 := &x.ListMeta
				yym1671 := z.DecBinary()
				_ = yym1671
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1670) {
				} else {
					z.DecFallback(yyv1670, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1672 := &x.Items
				yym1673 := z.DecBinary()
				_ = yym1673
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv1672), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1667)
		} // end switch yys1667
	} // end for yyj1667
	if !yyhl1667 {
		r.ReadEnd()
	}
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1674 int
	var yyb1674 bool
	var yyhl1674 bool = l >= 0
	yyj1674++
	if yyhl1674 {
		yyb1674 = yyj1674 > l
	} else {
		yyb1674 = r.CheckBreak()
	}
	if yyb1674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1674++
	if yyhl1674 {
		yyb1674 = yyj1674 > l
	} else {
		yyb1674 = r.CheckBreak()
	}
	if yyb1674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1674++
	if yyhl1674 {
		yyb1674 = yyj1674 > l
	} else {
		yyb1674 = r.CheckBreak()
	}
	if yyb1674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1677 := &x.ListMeta
		yym1678 := z.DecBinary()
		_ = yym1678
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1677) {
		} else {
			z.DecFallback(yyv1677, false)
		}
	}
	yyj1674++
	if yyhl1674 {
		yyb1674 = yyj1674 > l
	} else {
		yyb1674 = r.CheckBreak()
	}
	if yyb1674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1679 := &x.Items
		yym1680 := z.DecBinary()
		_ = yym1680
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv1679), d)
		}
	}
	for {
		yyj1674++
		if yyhl1674 {
			yyb1674 = yyj1674 > l
		} else {
			yyb1674 = r.CheckBreak()
		}
		if yyb1674 {
			break
		}
		z.DecStructFieldNotFound(yyj1674-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1681 := z.EncBinary()
		_ = yym1681
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1682 := !z.EncBinary()
			yy2arr1682 := z.EncBasicHandle().StructToArray
			var yyq1682 [3]bool
			_, _, _ = yysep1682, yyq1682, yy2arr1682
			const yyr1682 bool = false
			yyq1682[0] = x.Replicas != nil
			yyq1682[1] = len(x.Selector) != 0
			yyq1682[2] = x.Template != nil
			if yyr1682 || yy2arr1682 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1682 int = 0
				for _, b := range yyq1682 {
					if b {
						yynn1682++
					}
				}
				r.EncodeMapStart(yynn1682)
			}
			if yyr1682 || yy2arr1682 {
				if yyq1682[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1684 := *x.Replicas
						yym1685 := z.EncBinary()
						_ = yym1685
						if false {
						} else {
							r.EncodeInt(int64(yy1684))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1682[0] {
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1686 := *x.Replicas
						yym1687 := z.EncBinary()
						_ = yym1687
						if false {
						} else {
							r.EncodeInt(int64(yy1686))
						}
					}
				}
			}
			if yyr1682 || yy2arr1682 {
				if yyq1682[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1689 := z.EncBinary()
						_ = yym1689
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1682[1] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1690 := z.EncBinary()
						_ = yym1690
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr1682 || yy2arr1682 {
				if yyq1682[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1682[2] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1682 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1692 := z.DecBinary()
	_ = yym1692
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1693 := r.ReadMapStart()
			if yyl1693 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1693, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1693 := r.ReadArrayStart()
			if yyl1693 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1693, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1694Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1694Slc
	var yyhl1694 bool = l >= 0
	for yyj1694 := 0; ; yyj1694++ {
		if yyhl1694 {
			if yyj1694 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1694Slc = r.DecodeBytes(yys1694Slc, true, true)
		yys1694 := string(yys1694Slc)
		switch yys1694 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int)
				}
				yym1696 := z.DecBinary()
				_ = yym1696
				if false {
				} else {
					*((*int)(x.Replicas)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1697 := &x.Selector
				yym1698 := z.DecBinary()
				_ = yym1698
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1697, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1694)
		} // end switch yys1694
	} // end for yyj1694
	if !yyhl1694 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1700 int
	var yyb1700 bool
	var yyhl1700 bool = l >= 0
	yyj1700++
	if yyhl1700 {
		yyb1700 = yyj1700 > l
	} else {
		yyb1700 = r.CheckBreak()
	}
	if yyb1700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int)
		}
		yym1702 := z.DecBinary()
		_ = yym1702
		if false {
		} else {
			*((*int)(x.Replicas)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj1700++
	if yyhl1700 {
		yyb1700 = yyj1700 > l
	} else {
		yyb1700 = r.CheckBreak()
	}
	if yyb1700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1703 := &x.Selector
		yym1704 := z.DecBinary()
		_ = yym1704
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1703, false, d)
		}
	}
	yyj1700++
	if yyhl1700 {
		yyb1700 = yyj1700 > l
	} else {
		yyb1700 = r.CheckBreak()
	}
	if yyb1700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1700++
		if yyhl1700 {
			yyb1700 = yyj1700 > l
		} else {
			yyb1700 = r.CheckBreak()
		}
		if yyb1700 {
			break
		}
		z.DecStructFieldNotFound(yyj1700-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1706 := z.EncBinary()
		_ = yym1706
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1707 := !z.EncBinary()
			yy2arr1707 := z.EncBasicHandle().StructToArray
			var yyq1707 [2]bool
			_, _, _ = yysep1707, yyq1707, yy2arr1707
			const yyr1707 bool = false
			yyq1707[1] = x.ObservedGeneration != 0
			if yyr1707 || yy2arr1707 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1707 int = 1
				for _, b := range yyq1707 {
					if b {
						yynn1707++
					}
				}
				r.EncodeMapStart(yynn1707)
			}
			if yyr1707 || yy2arr1707 {
				yym1709 := z.EncBinary()
				_ = yym1709
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				yym1710 := z.EncBinary()
				_ = yym1710
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1707 || yy2arr1707 {
				if yyq1707[1] {
					yym1712 := z.EncBinary()
					_ = yym1712
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1707[1] {
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					yym1713 := z.EncBinary()
					_ = yym1713
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yysep1707 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1714 := z.DecBinary()
	_ = yym1714
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1715 := r.ReadMapStart()
			if yyl1715 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1715, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1715 := r.ReadArrayStart()
			if yyl1715 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1715, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1716Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1716Slc
	var yyhl1716 bool = l >= 0
	for yyj1716 := 0; ; yyj1716++ {
		if yyhl1716 {
			if yyj1716 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1716Slc = r.DecodeBytes(yys1716Slc, true, true)
		yys1716 := string(yys1716Slc)
		switch yys1716 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1716)
		} // end switch yys1716
	} // end for yyj1716
	if !yyhl1716 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1719 int
	var yyb1719 bool
	var yyhl1719 bool = l >= 0
	yyj1719++
	if yyhl1719 {
		yyb1719 = yyj1719 > l
	} else {
		yyb1719 = r.CheckBreak()
	}
	if yyb1719 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1719++
	if yyhl1719 {
		yyb1719 = yyj1719 > l
	} else {
		yyb1719 = r.CheckBreak()
	}
	if yyb1719 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1719++
		if yyhl1719 {
			yyb1719 = yyj1719 > l
		} else {
			yyb1719 = r.CheckBreak()
		}
		if yyb1719 {
			break
		}
		z.DecStructFieldNotFound(yyj1719-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1722 := z.EncBinary()
		_ = yym1722
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1723 := !z.EncBinary()
			yy2arr1723 := z.EncBasicHandle().StructToArray
			var yyq1723 [5]bool
			_, _, _ = yysep1723, yyq1723, yy2arr1723
			const yyr1723 bool = false
			yyq1723[0] = x.Kind != ""
			yyq1723[1] = x.APIVersion != ""
			yyq1723[2] = true
			yyq1723[3] = true
			yyq1723[4] = true
			if yyr1723 || yy2arr1723 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1723 int = 0
				for _, b := range yyq1723 {
					if b {
						yynn1723++
					}
				}
				r.EncodeMapStart(yynn1723)
			}
			if yyr1723 || yy2arr1723 {
				if yyq1723[0] {
					yym1725 := z.EncBinary()
					_ = yym1725
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1723[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1726 := z.EncBinary()
					_ = yym1726
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1723 || yy2arr1723 {
				if yyq1723[1] {
					yym1728 := z.EncBinary()
					_ = yym1728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1723[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1729 := z.EncBinary()
					_ = yym1729
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1723 || yy2arr1723 {
				if yyq1723[2] {
					yy1731 := &x.ObjectMeta
					yy1731.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1723[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1732 := &x.ObjectMeta
					yy1732.CodecEncodeSelf(e)
				}
			}
			if yyr1723 || yy2arr1723 {
				if yyq1723[3] {
					yy1734 := &x.Spec
					yy1734.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1723[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1735 := &x.Spec
					yy1735.CodecEncodeSelf(e)
				}
			}
			if yyr1723 || yy2arr1723 {
				if yyq1723[4] {
					yy1737 := &x.Status
					yy1737.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1723[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1738 := &x.Status
					yy1738.CodecEncodeSelf(e)
				}
			}
			if yysep1723 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1739 := z.DecBinary()
	_ = yym1739
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1740 := r.ReadMapStart()
			if yyl1740 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1740, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1740 := r.ReadArrayStart()
			if yyl1740 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1740, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1741Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1741Slc
	var yyhl1741 bool = l >= 0
	for yyj1741 := 0; ; yyj1741++ {
		if yyhl1741 {
			if yyj1741 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1741Slc = r.DecodeBytes(yys1741Slc, true, true)
		yys1741 := string(yys1741Slc)
		switch yys1741 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1744 := &x.ObjectMeta
				yyv1744.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv1745 := &x.Spec
				yyv1745.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv1746 := &x.Status
				yyv1746.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1741)
		} // end switch yys1741
	} // end for yyj1741
	if !yyhl1741 {
		r.ReadEnd()
	}
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1747 int
	var yyb1747 bool
	var yyhl1747 bool = l >= 0
	yyj1747++
	if yyhl1747 {
		yyb1747 = yyj1747 > l
	} else {
		yyb1747 = r.CheckBreak()
	}
	if yyb1747 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1747++
	if yyhl1747 {
		yyb1747 = yyj1747 > l
	} else {
		yyb1747 = r.CheckBreak()
	}
	if yyb1747 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1747++
	if yyhl1747 {
		yyb1747 = yyj1747 > l
	} else {
		yyb1747 = r.CheckBreak()
	}
	if yyb1747 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1750 := &x.ObjectMeta
		yyv1750.CodecDecodeSelf(d)
	}
	yyj1747++
	if yyhl1747 {
		yyb1747 = yyj1747 > l
	} else {
		yyb1747 = r.CheckBreak()
	}
	if yyb1747 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv1751 := &x.Spec
		yyv1751.CodecDecodeSelf(d)
	}
	yyj1747++
	if yyhl1747 {
		yyb1747 = yyj1747 > l
	} else {
		yyb1747 = r.CheckBreak()
	}
	if yyb1747 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv1752 := &x.Status
		yyv1752.CodecDecodeSelf(d)
	}
	for {
		yyj1747++
		if yyhl1747 {
			yyb1747 = yyj1747 > l
		} else {
			yyb1747 = r.CheckBreak()
		}
		if yyb1747 {
			break
		}
		z.DecStructFieldNotFound(yyj1747-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1753 := z.EncBinary()
		_ = yym1753
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1754 := !z.EncBinary()
			yy2arr1754 := z.EncBasicHandle().StructToArray
			var yyq1754 [4]bool
			_, _, _ = yysep1754, yyq1754, yy2arr1754
			const yyr1754 bool = false
			yyq1754[0] = x.Kind != ""
			yyq1754[1] = x.APIVersion != ""
			yyq1754[2] = true
			if yyr1754 || yy2arr1754 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1754 int = 1
				for _, b := range yyq1754 {
					if b {
						yynn1754++
					}
				}
				r.EncodeMapStart(yynn1754)
			}
			if yyr1754 || yy2arr1754 {
				if yyq1754[0] {
					yym1756 := z.EncBinary()
					_ = yym1756
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1754[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1757 := z.EncBinary()
					_ = yym1757
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1754 || yy2arr1754 {
				if yyq1754[1] {
					yym1759 := z.EncBinary()
					_ = yym1759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1754[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1760 := z.EncBinary()
					_ = yym1760
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1754 || yy2arr1754 {
				if yyq1754[2] {
					yy1762 := &x.ListMeta
					yym1763 := z.EncBinary()
					_ = yym1763
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1762) {
					} else {
						z.EncFallback(yy1762)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1754[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1764 := &x.ListMeta
					yym1765 := z.EncBinary()
					_ = yym1765
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1764) {
					} else {
						z.EncFallback(yy1764)
					}
				}
			}
			if yyr1754 || yy2arr1754 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1767 := z.EncBinary()
					_ = yym1767
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1768 := z.EncBinary()
					_ = yym1768
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yysep1754 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1769 := z.DecBinary()
	_ = yym1769
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1770 := r.ReadMapStart()
			if yyl1770 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1770, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1770 := r.ReadArrayStart()
			if yyl1770 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1770, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1771Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1771Slc
	var yyhl1771 bool = l >= 0
	for yyj1771 := 0; ; yyj1771++ {
		if yyhl1771 {
			if yyj1771 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1771Slc = r.DecodeBytes(yys1771Slc, true, true)
		yys1771 := string(yys1771Slc)
		switch yys1771 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1774 := &x.ListMeta
				yym1775 := z.DecBinary()
				_ = yym1775
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1774) {
				} else {
					z.DecFallback(yyv1774, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1776 := &x.Items
				yym1777 := z.DecBinary()
				_ = yym1777
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv1776), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1771)
		} // end switch yys1771
	} // end for yyj1771
	if !yyhl1771 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1778 int
	var yyb1778 bool
	var yyhl1778 bool = l >= 0
	yyj1778++
	if yyhl1778 {
		yyb1778 = yyj1778 > l
	} else {
		yyb1778 = r.CheckBreak()
	}
	if yyb1778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1778++
	if yyhl1778 {
		yyb1778 = yyj1778 > l
	} else {
		yyb1778 = r.CheckBreak()
	}
	if yyb1778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1778++
	if yyhl1778 {
		yyb1778 = yyj1778 > l
	} else {
		yyb1778 = r.CheckBreak()
	}
	if yyb1778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1781 := &x.ListMeta
		yym1782 := z.DecBinary()
		_ = yym1782
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1781) {
		} else {
			z.DecFallback(yyv1781, false)
		}
	}
	yyj1778++
	if yyhl1778 {
		yyb1778 = yyj1778 > l
	} else {
		yyb1778 = r.CheckBreak()
	}
	if yyb1778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1783 := &x.Items
		yym1784 := z.DecBinary()
		_ = yym1784
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv1783), d)
		}
	}
	for {
		yyj1778++
		if yyhl1778 {
			yyb1778 = yyj1778 > l
		} else {
			yyb1778 = r.CheckBreak()
		}
		if yyb1778 {
			break
		}
		z.DecStructFieldNotFound(yyj1778-1, "")
	}
	r.ReadEnd()
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1785 := z.EncBinary()
	_ = yym1785
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1786 := z.DecBinary()
	_ = yym1786
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1787 := z.EncBinary()
	_ = yym1787
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1788 := z.DecBinary()
	_ = yym1788
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1789 := z.EncBinary()
		_ = yym1789
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1790 := !z.EncBinary()
			yy2arr1790 := z.EncBasicHandle().StructToArray
			var yyq1790 [1]bool
			_, _, _ = yysep1790, yyq1790, yy2arr1790
			const yyr1790 bool = false
			yyq1790[0] = true
			if yyr1790 || yy2arr1790 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1790 int = 0
				for _, b := range yyq1790 {
					if b {
						yynn1790++
					}
				}
				r.EncodeMapStart(yynn1790)
			}
			if yyr1790 || yy2arr1790 {
				if yyq1790[0] {
					yy1792 := &x.LoadBalancer
					yy1792.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1790[0] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					yy1793 := &x.LoadBalancer
					yy1793.CodecEncodeSelf(e)
				}
			}
			if yysep1790 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1794 := z.DecBinary()
	_ = yym1794
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1795 := r.ReadMapStart()
			if yyl1795 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1795, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1795 := r.ReadArrayStart()
			if yyl1795 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1795, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1796Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1796Slc
	var yyhl1796 bool = l >= 0
	for yyj1796 := 0; ; yyj1796++ {
		if yyhl1796 {
			if yyj1796 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1796Slc = r.DecodeBytes(yys1796Slc, true, true)
		yys1796 := string(yys1796Slc)
		switch yys1796 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv1797 := &x.LoadBalancer
				yyv1797.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1796)
		} // end switch yys1796
	} // end for yyj1796
	if !yyhl1796 {
		r.ReadEnd()
	}
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1798 int
	var yyb1798 bool
	var yyhl1798 bool = l >= 0
	yyj1798++
	if yyhl1798 {
		yyb1798 = yyj1798 > l
	} else {
		yyb1798 = r.CheckBreak()
	}
	if yyb1798 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv1799 := &x.LoadBalancer
		yyv1799.CodecDecodeSelf(d)
	}
	for {
		yyj1798++
		if yyhl1798 {
			yyb1798 = yyj1798 > l
		} else {
			yyb1798 = r.CheckBreak()
		}
		if yyb1798 {
			break
		}
		z.DecStructFieldNotFound(yyj1798-1, "")
	}
	r.ReadEnd()
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1800 := z.EncBinary()
		_ = yym1800
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1801 := !z.EncBinary()
			yy2arr1801 := z.EncBasicHandle().StructToArray
			var yyq1801 [1]bool
			_, _, _ = yysep1801, yyq1801, yy2arr1801
			const yyr1801 bool = false
			yyq1801[0] = len(x.Ingress) != 0
			if yyr1801 || yy2arr1801 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1801 int = 0
				for _, b := range yyq1801 {
					if b {
						yynn1801++
					}
				}
				r.EncodeMapStart(yynn1801)
			}
			if yyr1801 || yy2arr1801 {
				if yyq1801[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1803 := z.EncBinary()
						_ = yym1803
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1801[0] {
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1804 := z.EncBinary()
						_ = yym1804
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yysep1801 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1805 := z.DecBinary()
	_ = yym1805
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1806 := r.ReadMapStart()
			if yyl1806 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1806, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1806 := r.ReadArrayStart()
			if yyl1806 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1806, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1807Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1807Slc
	var yyhl1807 bool = l >= 0
	for yyj1807 := 0; ; yyj1807++ {
		if yyhl1807 {
			if yyj1807 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1807Slc = r.DecodeBytes(yys1807Slc, true, true)
		yys1807 := string(yys1807Slc)
		switch yys1807 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1808 := &x.Ingress
				yym1809 := z.DecBinary()
				_ = yym1809
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1808), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1807)
		} // end switch yys1807
	} // end for yyj1807
	if !yyhl1807 {
		r.ReadEnd()
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1810 int
	var yyb1810 bool
	var yyhl1810 bool = l >= 0
	yyj1810++
	if yyhl1810 {
		yyb1810 = yyj1810 > l
	} else {
		yyb1810 = r.CheckBreak()
	}
	if yyb1810 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1811 := &x.Ingress
		yym1812 := z.DecBinary()
		_ = yym1812
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1811), d)
		}
	}
	for {
		yyj1810++
		if yyhl1810 {
			yyb1810 = yyj1810 > l
		} else {
			yyb1810 = r.CheckBreak()
		}
		if yyb1810 {
			break
		}
		z.DecStructFieldNotFound(yyj1810-1, "")
	}
	r.ReadEnd()
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1813 := z.EncBinary()
		_ = yym1813
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1814 := !z.EncBinary()
			yy2arr1814 := z.EncBasicHandle().StructToArray
			var yyq1814 [2]bool
			_, _, _ = yysep1814, yyq1814, yy2arr1814
			const yyr1814 bool = false
			yyq1814[0] = x.IP != ""
			yyq1814[1] = x.Hostname != ""
			if yyr1814 || yy2arr1814 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1814 int = 0
				for _, b := range yyq1814 {
					if b {
						yynn1814++
					}
				}
				r.EncodeMapStart(yynn1814)
			}
			if yyr1814 || yy2arr1814 {
				if yyq1814[0] {
					yym1816 := z.EncBinary()
					_ = yym1816
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1814[0] {
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					yym1817 := z.EncBinary()
					_ = yym1817
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr1814 || yy2arr1814 {
				if yyq1814[1] {
					yym1819 := z.EncBinary()
					_ = yym1819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1814[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					yym1820 := z.EncBinary()
					_ = yym1820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yysep1814 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1821 := z.DecBinary()
	_ = yym1821
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1822 := r.ReadMapStart()
			if yyl1822 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1822, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1822 := r.ReadArrayStart()
			if yyl1822 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1822, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1823Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1823Slc
	var yyhl1823 bool = l >= 0
	for yyj1823 := 0; ; yyj1823++ {
		if yyhl1823 {
			if yyj1823 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1823Slc = r.DecodeBytes(yys1823Slc, true, true)
		yys1823 := string(yys1823Slc)
		switch yys1823 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1823)
		} // end switch yys1823
	} // end for yyj1823
	if !yyhl1823 {
		r.ReadEnd()
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1826 int
	var yyb1826 bool
	var yyhl1826 bool = l >= 0
	yyj1826++
	if yyhl1826 {
		yyb1826 = yyj1826 > l
	} else {
		yyb1826 = r.CheckBreak()
	}
	if yyb1826 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj1826++
	if yyhl1826 {
		yyb1826 = yyj1826 > l
	} else {
		yyb1826 = r.CheckBreak()
	}
	if yyb1826 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj1826++
		if yyhl1826 {
			yyb1826 = yyj1826 > l
		} else {
			yyb1826 = r.CheckBreak()
		}
		if yyb1826 {
			break
		}
		z.DecStructFieldNotFound(yyj1826-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1829 := z.EncBinary()
		_ = yym1829
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1830 := !z.EncBinary()
			yy2arr1830 := z.EncBasicHandle().StructToArray
			var yyq1830 [8]bool
			_, _, _ = yysep1830, yyq1830, yy2arr1830
			const yyr1830 bool = false
			yyq1830[1] = len(x.Selector) != 0
			yyq1830[2] = x.ClusterIP != ""
			yyq1830[3] = x.Type != ""
			yyq1830[4] = len(x.ExternalIPs) != 0
			yyq1830[5] = len(x.DeprecatedPublicIPs) != 0
			yyq1830[6] = x.SessionAffinity != ""
			yyq1830[7] = x.LoadBalancerIP != ""
			if yyr1830 || yy2arr1830 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1830 int = 1
				for _, b := range yyq1830 {
					if b {
						yynn1830++
					}
				}
				r.EncodeMapStart(yynn1830)
			}
			if yyr1830 || yy2arr1830 {
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1832 := z.EncBinary()
					_ = yym1832
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1833 := z.EncBinary()
					_ = yym1833
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr1830 || yy2arr1830 {
				if yyq1830[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1835 := z.EncBinary()
						_ = yym1835
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1830[1] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1836 := z.EncBinary()
						_ = yym1836
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr1830 || yy2arr1830 {
				if yyq1830[2] {
					yym1838 := z.EncBinary()
					_ = yym1838
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1830[2] {
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					yym1839 := z.EncBinary()
					_ = yym1839
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr1830 || yy2arr1830 {
				if yyq1830[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1830[3] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr1830 || yy2arr1830 {
				if yyq1830[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1842 := z.EncBinary()
						_ = yym1842
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1830[4] {
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1843 := z.EncBinary()
						_ = yym1843
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr1830 || yy2arr1830 {
				if yyq1830[5] {
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym1845 := z.EncBinary()
						_ = yym1845
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1830[5] {
					r.EncodeString(codecSelferC_UTF81234, string("deprecatedPublicIPs"))
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym1846 := z.EncBinary()
						_ = yym1846
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				}
			}
			if yyr1830 || yy2arr1830 {
				if yyq1830[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1830[6] {
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr1830 || yy2arr1830 {
				if yyq1830[7] {
					yym1849 := z.EncBinary()
					_ = yym1849
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1830[7] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					yym1850 := z.EncBinary()
					_ = yym1850
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yysep1830 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1851 := z.DecBinary()
	_ = yym1851
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1852 := r.ReadMapStart()
			if yyl1852 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1852, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1852 := r.ReadArrayStart()
			if yyl1852 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1852, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1853Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1853Slc
	var yyhl1853 bool = l >= 0
	for yyj1853 := 0; ; yyj1853++ {
		if yyhl1853 {
			if yyj1853 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1853Slc = r.DecodeBytes(yys1853Slc, true, true)
		yys1853 := string(yys1853Slc)
		switch yys1853 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1854 := &x.Ports
				yym1855 := z.DecBinary()
				_ = yym1855
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv1854), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1856 := &x.Selector
				yym1857 := z.DecBinary()
				_ = yym1857
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1856, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv1860 := &x.ExternalIPs
				yym1861 := z.DecBinary()
				_ = yym1861
				if false {
				} else {
					z.F.DecSliceStringX(yyv1860, false, d)
				}
			}
		case "deprecatedPublicIPs":
			if r.TryDecodeAsNil() {
				x.DeprecatedPublicIPs = nil
			} else {
				yyv1862 := &x.DeprecatedPublicIPs
				yym1863 := z.DecBinary()
				_ = yym1863
				if false {
				} else {
					z.F.DecSliceStringX(yyv1862, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1853)
		} // end switch yys1853
	} // end for yyj1853
	if !yyhl1853 {
		r.ReadEnd()
	}
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1866 int
	var yyb1866 bool
	var yyhl1866 bool = l >= 0
	yyj1866++
	if yyhl1866 {
		yyb1866 = yyj1866 > l
	} else {
		yyb1866 = r.CheckBreak()
	}
	if yyb1866 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1867 := &x.Ports
		yym1868 := z.DecBinary()
		_ = yym1868
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv1867), d)
		}
	}
	yyj1866++
	if yyhl1866 {
		yyb1866 = yyj1866 > l
	} else {
		yyb1866 = r.CheckBreak()
	}
	if yyb1866 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1869 := &x.Selector
		yym1870 := z.DecBinary()
		_ = yym1870
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1869, false, d)
		}
	}
	yyj1866++
	if yyhl1866 {
		yyb1866 = yyj1866 > l
	} else {
		yyb1866 = r.CheckBreak()
	}
	if yyb1866 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj1866++
	if yyhl1866 {
		yyb1866 = yyj1866 > l
	} else {
		yyb1866 = r.CheckBreak()
	}
	if yyb1866 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj1866++
	if yyhl1866 {
		yyb1866 = yyj1866 > l
	} else {
		yyb1866 = r.CheckBreak()
	}
	if yyb1866 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv1873 := &x.ExternalIPs
		yym1874 := z.DecBinary()
		_ = yym1874
		if false {
		} else {
			z.F.DecSliceStringX(yyv1873, false, d)
		}
	}
	yyj1866++
	if yyhl1866 {
		yyb1866 = yyj1866 > l
	} else {
		yyb1866 = r.CheckBreak()
	}
	if yyb1866 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DeprecatedPublicIPs = nil
	} else {
		yyv1875 := &x.DeprecatedPublicIPs
		yym1876 := z.DecBinary()
		_ = yym1876
		if false {
		} else {
			z.F.DecSliceStringX(yyv1875, false, d)
		}
	}
	yyj1866++
	if yyhl1866 {
		yyb1866 = yyj1866 > l
	} else {
		yyb1866 = r.CheckBreak()
	}
	if yyb1866 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj1866++
	if yyhl1866 {
		yyb1866 = yyj1866 > l
	} else {
		yyb1866 = r.CheckBreak()
	}
	if yyb1866 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	for {
		yyj1866++
		if yyhl1866 {
			yyb1866 = yyj1866 > l
		} else {
			yyb1866 = r.CheckBreak()
		}
		if yyb1866 {
			break
		}
		z.DecStructFieldNotFound(yyj1866-1, "")
	}
	r.ReadEnd()
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1879 := z.EncBinary()
		_ = yym1879
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1880 := !z.EncBinary()
			yy2arr1880 := z.EncBasicHandle().StructToArray
			var yyq1880 [5]bool
			_, _, _ = yysep1880, yyq1880, yy2arr1880
			const yyr1880 bool = false
			yyq1880[0] = x.Name != ""
			yyq1880[1] = x.Protocol != ""
			yyq1880[3] = true
			yyq1880[4] = x.NodePort != 0
			if yyr1880 || yy2arr1880 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1880 int = 1
				for _, b := range yyq1880 {
					if b {
						yynn1880++
					}
				}
				r.EncodeMapStart(yynn1880)
			}
			if yyr1880 || yy2arr1880 {
				if yyq1880[0] {
					yym1882 := z.EncBinary()
					_ = yym1882
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1880[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym1883 := z.EncBinary()
					_ = yym1883
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1880 || yy2arr1880 {
				if yyq1880[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1880[1] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1880 || yy2arr1880 {
				yym1886 := z.EncBinary()
				_ = yym1886
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yym1887 := z.EncBinary()
				_ = yym1887
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr1880 || yy2arr1880 {
				if yyq1880[3] {
					yy1889 := &x.TargetPort
					yym1890 := z.EncBinary()
					_ = yym1890
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1889) {
					} else if !yym1890 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1889)
					} else {
						z.EncFallback(yy1889)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1880[3] {
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					yy1891 := &x.TargetPort
					yym1892 := z.EncBinary()
					_ = yym1892
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1891) {
					} else if !yym1892 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1891)
					} else {
						z.EncFallback(yy1891)
					}
				}
			}
			if yyr1880 || yy2arr1880 {
				if yyq1880[4] {
					yym1894 := z.EncBinary()
					_ = yym1894
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1880[4] {
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					yym1895 := z.EncBinary()
					_ = yym1895
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yysep1880 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1896 := z.DecBinary()
	_ = yym1896
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1897 := r.ReadMapStart()
			if yyl1897 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1897, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1897 := r.ReadArrayStart()
			if yyl1897 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1897, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1898Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1898Slc
	var yyhl1898 bool = l >= 0
	for yyj1898 := 0; ; yyj1898++ {
		if yyhl1898 {
			if yyj1898 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1898Slc = r.DecodeBytes(yys1898Slc, true, true)
		yys1898 := string(yys1898Slc)
		switch yys1898 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg5_util.IntOrString{}
			} else {
				yyv1902 := &x.TargetPort
				yym1903 := z.DecBinary()
				_ = yym1903
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1902) {
				} else if !yym1903 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1902)
				} else {
					z.DecFallback(yyv1902, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1898)
		} // end switch yys1898
	} // end for yyj1898
	if !yyhl1898 {
		r.ReadEnd()
	}
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1905 int
	var yyb1905 bool
	var yyhl1905 bool = l >= 0
	yyj1905++
	if yyhl1905 {
		yyb1905 = yyj1905 > l
	} else {
		yyb1905 = r.CheckBreak()
	}
	if yyb1905 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1905++
	if yyhl1905 {
		yyb1905 = yyj1905 > l
	} else {
		yyb1905 = r.CheckBreak()
	}
	if yyb1905 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1905++
	if yyhl1905 {
		yyb1905 = yyj1905 > l
	} else {
		yyb1905 = r.CheckBreak()
	}
	if yyb1905 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1905++
	if yyhl1905 {
		yyb1905 = yyj1905 > l
	} else {
		yyb1905 = r.CheckBreak()
	}
	if yyb1905 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg5_util.IntOrString{}
	} else {
		yyv1909 := &x.TargetPort
		yym1910 := z.DecBinary()
		_ = yym1910
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1909) {
		} else if !yym1910 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1909)
		} else {
			z.DecFallback(yyv1909, false)
		}
	}
	yyj1905++
	if yyhl1905 {
		yyb1905 = yyj1905 > l
	} else {
		yyb1905 = r.CheckBreak()
	}
	if yyb1905 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1905++
		if yyhl1905 {
			yyb1905 = yyj1905 > l
		} else {
			yyb1905 = r.CheckBreak()
		}
		if yyb1905 {
			break
		}
		z.DecStructFieldNotFound(yyj1905-1, "")
	}
	r.ReadEnd()
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1912 := z.EncBinary()
		_ = yym1912
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1913 := !z.EncBinary()
			yy2arr1913 := z.EncBasicHandle().StructToArray
			var yyq1913 [5]bool
			_, _, _ = yysep1913, yyq1913, yy2arr1913
			const yyr1913 bool = false
			yyq1913[0] = x.Kind != ""
			yyq1913[1] = x.APIVersion != ""
			yyq1913[2] = true
			yyq1913[3] = true
			yyq1913[4] = true
			if yyr1913 || yy2arr1913 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1913 int = 0
				for _, b := range yyq1913 {
					if b {
						yynn1913++
					}
				}
				r.EncodeMapStart(yynn1913)
			}
			if yyr1913 || yy2arr1913 {
				if yyq1913[0] {
					yym1915 := z.EncBinary()
					_ = yym1915
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1913[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1916 := z.EncBinary()
					_ = yym1916
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1913 || yy2arr1913 {
				if yyq1913[1] {
					yym1918 := z.EncBinary()
					_ = yym1918
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1913[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1919 := z.EncBinary()
					_ = yym1919
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1913 || yy2arr1913 {
				if yyq1913[2] {
					yy1921 := &x.ObjectMeta
					yy1921.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1913[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1922 := &x.ObjectMeta
					yy1922.CodecEncodeSelf(e)
				}
			}
			if yyr1913 || yy2arr1913 {
				if yyq1913[3] {
					yy1924 := &x.Spec
					yy1924.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1913[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1925 := &x.Spec
					yy1925.CodecEncodeSelf(e)
				}
			}
			if yyr1913 || yy2arr1913 {
				if yyq1913[4] {
					yy1927 := &x.Status
					yy1927.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1913[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1928 := &x.Status
					yy1928.CodecEncodeSelf(e)
				}
			}
			if yysep1913 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1929 := z.DecBinary()
	_ = yym1929
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1930 := r.ReadMapStart()
			if yyl1930 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1930, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1930 := r.ReadArrayStart()
			if yyl1930 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1930, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1931Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1931Slc
	var yyhl1931 bool = l >= 0
	for yyj1931 := 0; ; yyj1931++ {
		if yyhl1931 {
			if yyj1931 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1931Slc = r.DecodeBytes(yys1931Slc, true, true)
		yys1931 := string(yys1931Slc)
		switch yys1931 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1934 := &x.ObjectMeta
				yyv1934.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv1935 := &x.Spec
				yyv1935.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv1936 := &x.Status
				yyv1936.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1931)
		} // end switch yys1931
	} // end for yyj1931
	if !yyhl1931 {
		r.ReadEnd()
	}
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1937 int
	var yyb1937 bool
	var yyhl1937 bool = l >= 0
	yyj1937++
	if yyhl1937 {
		yyb1937 = yyj1937 > l
	} else {
		yyb1937 = r.CheckBreak()
	}
	if yyb1937 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1937++
	if yyhl1937 {
		yyb1937 = yyj1937 > l
	} else {
		yyb1937 = r.CheckBreak()
	}
	if yyb1937 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1937++
	if yyhl1937 {
		yyb1937 = yyj1937 > l
	} else {
		yyb1937 = r.CheckBreak()
	}
	if yyb1937 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1940 := &x.ObjectMeta
		yyv1940.CodecDecodeSelf(d)
	}
	yyj1937++
	if yyhl1937 {
		yyb1937 = yyj1937 > l
	} else {
		yyb1937 = r.CheckBreak()
	}
	if yyb1937 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv1941 := &x.Spec
		yyv1941.CodecDecodeSelf(d)
	}
	yyj1937++
	if yyhl1937 {
		yyb1937 = yyj1937 > l
	} else {
		yyb1937 = r.CheckBreak()
	}
	if yyb1937 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv1942 := &x.Status
		yyv1942.CodecDecodeSelf(d)
	}
	for {
		yyj1937++
		if yyhl1937 {
			yyb1937 = yyj1937 > l
		} else {
			yyb1937 = r.CheckBreak()
		}
		if yyb1937 {
			break
		}
		z.DecStructFieldNotFound(yyj1937-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1943 := z.EncBinary()
		_ = yym1943
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1944 := !z.EncBinary()
			yy2arr1944 := z.EncBasicHandle().StructToArray
			var yyq1944 [4]bool
			_, _, _ = yysep1944, yyq1944, yy2arr1944
			const yyr1944 bool = false
			yyq1944[0] = x.Kind != ""
			yyq1944[1] = x.APIVersion != ""
			yyq1944[2] = true
			if yyr1944 || yy2arr1944 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1944 int = 1
				for _, b := range yyq1944 {
					if b {
						yynn1944++
					}
				}
				r.EncodeMapStart(yynn1944)
			}
			if yyr1944 || yy2arr1944 {
				if yyq1944[0] {
					yym1946 := z.EncBinary()
					_ = yym1946
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1944[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1947 := z.EncBinary()
					_ = yym1947
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1944 || yy2arr1944 {
				if yyq1944[1] {
					yym1949 := z.EncBinary()
					_ = yym1949
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1944[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1950 := z.EncBinary()
					_ = yym1950
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1944 || yy2arr1944 {
				if yyq1944[2] {
					yy1952 := &x.ListMeta
					yym1953 := z.EncBinary()
					_ = yym1953
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1952) {
					} else {
						z.EncFallback(yy1952)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1944[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1954 := &x.ListMeta
					yym1955 := z.EncBinary()
					_ = yym1955
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1954) {
					} else {
						z.EncFallback(yy1954)
					}
				}
			}
			if yyr1944 || yy2arr1944 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1957 := z.EncBinary()
					_ = yym1957
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1958 := z.EncBinary()
					_ = yym1958
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yysep1944 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1959 := z.DecBinary()
	_ = yym1959
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1960 := r.ReadMapStart()
			if yyl1960 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1960, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1960 := r.ReadArrayStart()
			if yyl1960 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1960, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1961Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1961Slc
	var yyhl1961 bool = l >= 0
	for yyj1961 := 0; ; yyj1961++ {
		if yyhl1961 {
			if yyj1961 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1961Slc = r.DecodeBytes(yys1961Slc, true, true)
		yys1961 := string(yys1961Slc)
		switch yys1961 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1964 := &x.ListMeta
				yym1965 := z.DecBinary()
				_ = yym1965
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1964) {
				} else {
					z.DecFallback(yyv1964, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1966 := &x.Items
				yym1967 := z.DecBinary()
				_ = yym1967
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv1966), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1961)
		} // end switch yys1961
	} // end for yyj1961
	if !yyhl1961 {
		r.ReadEnd()
	}
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1968 int
	var yyb1968 bool
	var yyhl1968 bool = l >= 0
	yyj1968++
	if yyhl1968 {
		yyb1968 = yyj1968 > l
	} else {
		yyb1968 = r.CheckBreak()
	}
	if yyb1968 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1968++
	if yyhl1968 {
		yyb1968 = yyj1968 > l
	} else {
		yyb1968 = r.CheckBreak()
	}
	if yyb1968 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1968++
	if yyhl1968 {
		yyb1968 = yyj1968 > l
	} else {
		yyb1968 = r.CheckBreak()
	}
	if yyb1968 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1971 := &x.ListMeta
		yym1972 := z.DecBinary()
		_ = yym1972
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1971) {
		} else {
			z.DecFallback(yyv1971, false)
		}
	}
	yyj1968++
	if yyhl1968 {
		yyb1968 = yyj1968 > l
	} else {
		yyb1968 = r.CheckBreak()
	}
	if yyb1968 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1973 := &x.Items
		yym1974 := z.DecBinary()
		_ = yym1974
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv1973), d)
		}
	}
	for {
		yyj1968++
		if yyhl1968 {
			yyb1968 = yyj1968 > l
		} else {
			yyb1968 = r.CheckBreak()
		}
		if yyb1968 {
			break
		}
		z.DecStructFieldNotFound(yyj1968-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1975 := z.EncBinary()
		_ = yym1975
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1976 := !z.EncBinary()
			yy2arr1976 := z.EncBasicHandle().StructToArray
			var yyq1976 [5]bool
			_, _, _ = yysep1976, yyq1976, yy2arr1976
			const yyr1976 bool = false
			yyq1976[0] = x.Kind != ""
			yyq1976[1] = x.APIVersion != ""
			yyq1976[2] = true
			yyq1976[3] = len(x.Secrets) != 0
			yyq1976[4] = len(x.ImagePullSecrets) != 0
			if yyr1976 || yy2arr1976 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1976 int = 0
				for _, b := range yyq1976 {
					if b {
						yynn1976++
					}
				}
				r.EncodeMapStart(yynn1976)
			}
			if yyr1976 || yy2arr1976 {
				if yyq1976[0] {
					yym1978 := z.EncBinary()
					_ = yym1978
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1976[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1979 := z.EncBinary()
					_ = yym1979
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1976 || yy2arr1976 {
				if yyq1976[1] {
					yym1981 := z.EncBinary()
					_ = yym1981
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1976[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1982 := z.EncBinary()
					_ = yym1982
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1976 || yy2arr1976 {
				if yyq1976[2] {
					yy1984 := &x.ObjectMeta
					yy1984.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1976[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1985 := &x.ObjectMeta
					yy1985.CodecEncodeSelf(e)
				}
			}
			if yyr1976 || yy2arr1976 {
				if yyq1976[3] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym1987 := z.EncBinary()
						_ = yym1987
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1976[3] {
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym1988 := z.EncBinary()
						_ = yym1988
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr1976 || yy2arr1976 {
				if yyq1976[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1990 := z.EncBinary()
						_ = yym1990
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1976[4] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1991 := z.EncBinary()
						_ = yym1991
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep1976 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1992 := z.DecBinary()
	_ = yym1992
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1993 := r.ReadMapStart()
			if yyl1993 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1993, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1993 := r.ReadArrayStart()
			if yyl1993 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1993, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1994Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1994Slc
	var yyhl1994 bool = l >= 0
	for yyj1994 := 0; ; yyj1994++ {
		if yyhl1994 {
			if yyj1994 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1994Slc = r.DecodeBytes(yys1994Slc, true, true)
		yys1994 := string(yys1994Slc)
		switch yys1994 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1997 := &x.ObjectMeta
				yyv1997.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv1998 := &x.Secrets
				yym1999 := z.DecBinary()
				_ = yym1999
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv1998), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2000 := &x.ImagePullSecrets
				yym2001 := z.DecBinary()
				_ = yym2001
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2000), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1994)
		} // end switch yys1994
	} // end for yyj1994
	if !yyhl1994 {
		r.ReadEnd()
	}
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2002 int
	var yyb2002 bool
	var yyhl2002 bool = l >= 0
	yyj2002++
	if yyhl2002 {
		yyb2002 = yyj2002 > l
	} else {
		yyb2002 = r.CheckBreak()
	}
	if yyb2002 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2002++
	if yyhl2002 {
		yyb2002 = yyj2002 > l
	} else {
		yyb2002 = r.CheckBreak()
	}
	if yyb2002 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2002++
	if yyhl2002 {
		yyb2002 = yyj2002 > l
	} else {
		yyb2002 = r.CheckBreak()
	}
	if yyb2002 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2005 := &x.ObjectMeta
		yyv2005.CodecDecodeSelf(d)
	}
	yyj2002++
	if yyhl2002 {
		yyb2002 = yyj2002 > l
	} else {
		yyb2002 = r.CheckBreak()
	}
	if yyb2002 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2006 := &x.Secrets
		yym2007 := z.DecBinary()
		_ = yym2007
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2006), d)
		}
	}
	yyj2002++
	if yyhl2002 {
		yyb2002 = yyj2002 > l
	} else {
		yyb2002 = r.CheckBreak()
	}
	if yyb2002 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2008 := &x.ImagePullSecrets
		yym2009 := z.DecBinary()
		_ = yym2009
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2008), d)
		}
	}
	for {
		yyj2002++
		if yyhl2002 {
			yyb2002 = yyj2002 > l
		} else {
			yyb2002 = r.CheckBreak()
		}
		if yyb2002 {
			break
		}
		z.DecStructFieldNotFound(yyj2002-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2010 := z.EncBinary()
		_ = yym2010
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2011 := !z.EncBinary()
			yy2arr2011 := z.EncBasicHandle().StructToArray
			var yyq2011 [4]bool
			_, _, _ = yysep2011, yyq2011, yy2arr2011
			const yyr2011 bool = false
			yyq2011[0] = x.Kind != ""
			yyq2011[1] = x.APIVersion != ""
			yyq2011[2] = true
			if yyr2011 || yy2arr2011 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2011 int = 1
				for _, b := range yyq2011 {
					if b {
						yynn2011++
					}
				}
				r.EncodeMapStart(yynn2011)
			}
			if yyr2011 || yy2arr2011 {
				if yyq2011[0] {
					yym2013 := z.EncBinary()
					_ = yym2013
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2011[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2014 := z.EncBinary()
					_ = yym2014
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2011 || yy2arr2011 {
				if yyq2011[1] {
					yym2016 := z.EncBinary()
					_ = yym2016
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2011[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2017 := z.EncBinary()
					_ = yym2017
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2011 || yy2arr2011 {
				if yyq2011[2] {
					yy2019 := &x.ListMeta
					yym2020 := z.EncBinary()
					_ = yym2020
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2019) {
					} else {
						z.EncFallback(yy2019)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2011[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2021 := &x.ListMeta
					yym2022 := z.EncBinary()
					_ = yym2022
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2021) {
					} else {
						z.EncFallback(yy2021)
					}
				}
			}
			if yyr2011 || yy2arr2011 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2024 := z.EncBinary()
					_ = yym2024
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2025 := z.EncBinary()
					_ = yym2025
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yysep2011 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2026 := z.DecBinary()
	_ = yym2026
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2027 := r.ReadMapStart()
			if yyl2027 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2027, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2027 := r.ReadArrayStart()
			if yyl2027 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2027, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2028Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2028Slc
	var yyhl2028 bool = l >= 0
	for yyj2028 := 0; ; yyj2028++ {
		if yyhl2028 {
			if yyj2028 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2028Slc = r.DecodeBytes(yys2028Slc, true, true)
		yys2028 := string(yys2028Slc)
		switch yys2028 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2031 := &x.ListMeta
				yym2032 := z.DecBinary()
				_ = yym2032
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2031) {
				} else {
					z.DecFallback(yyv2031, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2033 := &x.Items
				yym2034 := z.DecBinary()
				_ = yym2034
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2033), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2028)
		} // end switch yys2028
	} // end for yyj2028
	if !yyhl2028 {
		r.ReadEnd()
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2035 int
	var yyb2035 bool
	var yyhl2035 bool = l >= 0
	yyj2035++
	if yyhl2035 {
		yyb2035 = yyj2035 > l
	} else {
		yyb2035 = r.CheckBreak()
	}
	if yyb2035 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2035++
	if yyhl2035 {
		yyb2035 = yyj2035 > l
	} else {
		yyb2035 = r.CheckBreak()
	}
	if yyb2035 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2035++
	if yyhl2035 {
		yyb2035 = yyj2035 > l
	} else {
		yyb2035 = r.CheckBreak()
	}
	if yyb2035 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2038 := &x.ListMeta
		yym2039 := z.DecBinary()
		_ = yym2039
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2038) {
		} else {
			z.DecFallback(yyv2038, false)
		}
	}
	yyj2035++
	if yyhl2035 {
		yyb2035 = yyj2035 > l
	} else {
		yyb2035 = r.CheckBreak()
	}
	if yyb2035 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2040 := &x.Items
		yym2041 := z.DecBinary()
		_ = yym2041
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2040), d)
		}
	}
	for {
		yyj2035++
		if yyhl2035 {
			yyb2035 = yyj2035 > l
		} else {
			yyb2035 = r.CheckBreak()
		}
		if yyb2035 {
			break
		}
		z.DecStructFieldNotFound(yyj2035-1, "")
	}
	r.ReadEnd()
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2042 := z.EncBinary()
		_ = yym2042
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2043 := !z.EncBinary()
			yy2arr2043 := z.EncBasicHandle().StructToArray
			var yyq2043 [4]bool
			_, _, _ = yysep2043, yyq2043, yy2arr2043
			const yyr2043 bool = false
			yyq2043[0] = x.Kind != ""
			yyq2043[1] = x.APIVersion != ""
			yyq2043[2] = true
			if yyr2043 || yy2arr2043 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2043 int = 1
				for _, b := range yyq2043 {
					if b {
						yynn2043++
					}
				}
				r.EncodeMapStart(yynn2043)
			}
			if yyr2043 || yy2arr2043 {
				if yyq2043[0] {
					yym2045 := z.EncBinary()
					_ = yym2045
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2043[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2046 := z.EncBinary()
					_ = yym2046
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2043 || yy2arr2043 {
				if yyq2043[1] {
					yym2048 := z.EncBinary()
					_ = yym2048
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2043[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2049 := z.EncBinary()
					_ = yym2049
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2043 || yy2arr2043 {
				if yyq2043[2] {
					yy2051 := &x.ObjectMeta
					yy2051.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2043[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2052 := &x.ObjectMeta
					yy2052.CodecEncodeSelf(e)
				}
			}
			if yyr2043 || yy2arr2043 {
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2054 := z.EncBinary()
					_ = yym2054
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2055 := z.EncBinary()
					_ = yym2055
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yysep2043 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2056 := z.DecBinary()
	_ = yym2056
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2057 := r.ReadMapStart()
			if yyl2057 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2057, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2057 := r.ReadArrayStart()
			if yyl2057 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2057, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2058Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2058Slc
	var yyhl2058 bool = l >= 0
	for yyj2058 := 0; ; yyj2058++ {
		if yyhl2058 {
			if yyj2058 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2058Slc = r.DecodeBytes(yys2058Slc, true, true)
		yys2058 := string(yys2058Slc)
		switch yys2058 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2061 := &x.ObjectMeta
				yyv2061.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2062 := &x.Subsets
				yym2063 := z.DecBinary()
				_ = yym2063
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2062), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2058)
		} // end switch yys2058
	} // end for yyj2058
	if !yyhl2058 {
		r.ReadEnd()
	}
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2064 int
	var yyb2064 bool
	var yyhl2064 bool = l >= 0
	yyj2064++
	if yyhl2064 {
		yyb2064 = yyj2064 > l
	} else {
		yyb2064 = r.CheckBreak()
	}
	if yyb2064 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2064++
	if yyhl2064 {
		yyb2064 = yyj2064 > l
	} else {
		yyb2064 = r.CheckBreak()
	}
	if yyb2064 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2064++
	if yyhl2064 {
		yyb2064 = yyj2064 > l
	} else {
		yyb2064 = r.CheckBreak()
	}
	if yyb2064 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2067 := &x.ObjectMeta
		yyv2067.CodecDecodeSelf(d)
	}
	yyj2064++
	if yyhl2064 {
		yyb2064 = yyj2064 > l
	} else {
		yyb2064 = r.CheckBreak()
	}
	if yyb2064 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2068 := &x.Subsets
		yym2069 := z.DecBinary()
		_ = yym2069
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2068), d)
		}
	}
	for {
		yyj2064++
		if yyhl2064 {
			yyb2064 = yyj2064 > l
		} else {
			yyb2064 = r.CheckBreak()
		}
		if yyb2064 {
			break
		}
		z.DecStructFieldNotFound(yyj2064-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2070 := z.EncBinary()
		_ = yym2070
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2071 := !z.EncBinary()
			yy2arr2071 := z.EncBasicHandle().StructToArray
			var yyq2071 [3]bool
			_, _, _ = yysep2071, yyq2071, yy2arr2071
			const yyr2071 bool = false
			yyq2071[0] = len(x.Addresses) != 0
			yyq2071[1] = len(x.NotReadyAddresses) != 0
			yyq2071[2] = len(x.Ports) != 0
			if yyr2071 || yy2arr2071 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2071 int = 0
				for _, b := range yyq2071 {
					if b {
						yynn2071++
					}
				}
				r.EncodeMapStart(yynn2071)
			}
			if yyr2071 || yy2arr2071 {
				if yyq2071[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2073 := z.EncBinary()
						_ = yym2073
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2071[0] {
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2074 := z.EncBinary()
						_ = yym2074
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2071 || yy2arr2071 {
				if yyq2071[1] {
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2076 := z.EncBinary()
						_ = yym2076
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2071[1] {
					r.EncodeString(codecSelferC_UTF81234, string("notReadyAddresses"))
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2077 := z.EncBinary()
						_ = yym2077
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				}
			}
			if yyr2071 || yy2arr2071 {
				if yyq2071[2] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2079 := z.EncBinary()
						_ = yym2079
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2071[2] {
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2080 := z.EncBinary()
						_ = yym2080
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yysep2071 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2081 := z.DecBinary()
	_ = yym2081
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2082 := r.ReadMapStart()
			if yyl2082 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2082, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2082 := r.ReadArrayStart()
			if yyl2082 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2082, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2083Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2083Slc
	var yyhl2083 bool = l >= 0
	for yyj2083 := 0; ; yyj2083++ {
		if yyhl2083 {
			if yyj2083 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2083Slc = r.DecodeBytes(yys2083Slc, true, true)
		yys2083 := string(yys2083Slc)
		switch yys2083 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2084 := &x.Addresses
				yym2085 := z.DecBinary()
				_ = yym2085
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2084), d)
				}
			}
		case "notReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2086 := &x.NotReadyAddresses
				yym2087 := z.DecBinary()
				_ = yym2087
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2086), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2088 := &x.Ports
				yym2089 := z.DecBinary()
				_ = yym2089
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2088), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2083)
		} // end switch yys2083
	} // end for yyj2083
	if !yyhl2083 {
		r.ReadEnd()
	}
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2090 int
	var yyb2090 bool
	var yyhl2090 bool = l >= 0
	yyj2090++
	if yyhl2090 {
		yyb2090 = yyj2090 > l
	} else {
		yyb2090 = r.CheckBreak()
	}
	if yyb2090 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2091 := &x.Addresses
		yym2092 := z.DecBinary()
		_ = yym2092
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2091), d)
		}
	}
	yyj2090++
	if yyhl2090 {
		yyb2090 = yyj2090 > l
	} else {
		yyb2090 = r.CheckBreak()
	}
	if yyb2090 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2093 := &x.NotReadyAddresses
		yym2094 := z.DecBinary()
		_ = yym2094
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2093), d)
		}
	}
	yyj2090++
	if yyhl2090 {
		yyb2090 = yyj2090 > l
	} else {
		yyb2090 = r.CheckBreak()
	}
	if yyb2090 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2095 := &x.Ports
		yym2096 := z.DecBinary()
		_ = yym2096
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2095), d)
		}
	}
	for {
		yyj2090++
		if yyhl2090 {
			yyb2090 = yyj2090 > l
		} else {
			yyb2090 = r.CheckBreak()
		}
		if yyb2090 {
			break
		}
		z.DecStructFieldNotFound(yyj2090-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2097 := z.EncBinary()
		_ = yym2097
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2098 := !z.EncBinary()
			yy2arr2098 := z.EncBasicHandle().StructToArray
			var yyq2098 [2]bool
			_, _, _ = yysep2098, yyq2098, yy2arr2098
			const yyr2098 bool = false
			yyq2098[1] = x.TargetRef != nil
			if yyr2098 || yy2arr2098 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2098 int = 1
				for _, b := range yyq2098 {
					if b {
						yynn2098++
					}
				}
				r.EncodeMapStart(yynn2098)
			}
			if yyr2098 || yy2arr2098 {
				yym2100 := z.EncBinary()
				_ = yym2100
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				yym2101 := z.EncBinary()
				_ = yym2101
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2098 || yy2arr2098 {
				if yyq2098[1] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2098[1] {
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yysep2098 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2103 := z.DecBinary()
	_ = yym2103
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2104 := r.ReadMapStart()
			if yyl2104 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2104, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2104 := r.ReadArrayStart()
			if yyl2104 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2104, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2105Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2105Slc
	var yyhl2105 bool = l >= 0
	for yyj2105 := 0; ; yyj2105++ {
		if yyhl2105 {
			if yyj2105 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2105Slc = r.DecodeBytes(yys2105Slc, true, true)
		yys2105 := string(yys2105Slc)
		switch yys2105 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2105)
		} // end switch yys2105
	} // end for yyj2105
	if !yyhl2105 {
		r.ReadEnd()
	}
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2108 int
	var yyb2108 bool
	var yyhl2108 bool = l >= 0
	yyj2108++
	if yyhl2108 {
		yyb2108 = yyj2108 > l
	} else {
		yyb2108 = r.CheckBreak()
	}
	if yyb2108 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2108++
	if yyhl2108 {
		yyb2108 = yyj2108 > l
	} else {
		yyb2108 = r.CheckBreak()
	}
	if yyb2108 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2108++
		if yyhl2108 {
			yyb2108 = yyj2108 > l
		} else {
			yyb2108 = r.CheckBreak()
		}
		if yyb2108 {
			break
		}
		z.DecStructFieldNotFound(yyj2108-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2111 := z.EncBinary()
		_ = yym2111
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2112 := !z.EncBinary()
			yy2arr2112 := z.EncBasicHandle().StructToArray
			var yyq2112 [3]bool
			_, _, _ = yysep2112, yyq2112, yy2arr2112
			const yyr2112 bool = false
			yyq2112[0] = x.Name != ""
			yyq2112[2] = x.Protocol != ""
			if yyr2112 || yy2arr2112 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2112 int = 1
				for _, b := range yyq2112 {
					if b {
						yynn2112++
					}
				}
				r.EncodeMapStart(yynn2112)
			}
			if yyr2112 || yy2arr2112 {
				if yyq2112[0] {
					yym2114 := z.EncBinary()
					_ = yym2114
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2112[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym2115 := z.EncBinary()
					_ = yym2115
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2112 || yy2arr2112 {
				yym2117 := z.EncBinary()
				_ = yym2117
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yym2118 := z.EncBinary()
				_ = yym2118
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2112 || yy2arr2112 {
				if yyq2112[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2112[2] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yysep2112 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2120 := z.DecBinary()
	_ = yym2120
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2121 := r.ReadMapStart()
			if yyl2121 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2121, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2121 := r.ReadArrayStart()
			if yyl2121 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2121, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2122Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2122Slc
	var yyhl2122 bool = l >= 0
	for yyj2122 := 0; ; yyj2122++ {
		if yyhl2122 {
			if yyj2122 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2122Slc = r.DecodeBytes(yys2122Slc, true, true)
		yys2122 := string(yys2122Slc)
		switch yys2122 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2122)
		} // end switch yys2122
	} // end for yyj2122
	if !yyhl2122 {
		r.ReadEnd()
	}
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2126 int
	var yyb2126 bool
	var yyhl2126 bool = l >= 0
	yyj2126++
	if yyhl2126 {
		yyb2126 = yyj2126 > l
	} else {
		yyb2126 = r.CheckBreak()
	}
	if yyb2126 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2126++
	if yyhl2126 {
		yyb2126 = yyj2126 > l
	} else {
		yyb2126 = r.CheckBreak()
	}
	if yyb2126 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2126++
	if yyhl2126 {
		yyb2126 = yyj2126 > l
	} else {
		yyb2126 = r.CheckBreak()
	}
	if yyb2126 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2126++
		if yyhl2126 {
			yyb2126 = yyj2126 > l
		} else {
			yyb2126 = r.CheckBreak()
		}
		if yyb2126 {
			break
		}
		z.DecStructFieldNotFound(yyj2126-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2130 := z.EncBinary()
		_ = yym2130
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2131 := !z.EncBinary()
			yy2arr2131 := z.EncBasicHandle().StructToArray
			var yyq2131 [4]bool
			_, _, _ = yysep2131, yyq2131, yy2arr2131
			const yyr2131 bool = false
			yyq2131[0] = x.Kind != ""
			yyq2131[1] = x.APIVersion != ""
			yyq2131[2] = true
			if yyr2131 || yy2arr2131 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2131 int = 1
				for _, b := range yyq2131 {
					if b {
						yynn2131++
					}
				}
				r.EncodeMapStart(yynn2131)
			}
			if yyr2131 || yy2arr2131 {
				if yyq2131[0] {
					yym2133 := z.EncBinary()
					_ = yym2133
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2131[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2134 := z.EncBinary()
					_ = yym2134
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2131 || yy2arr2131 {
				if yyq2131[1] {
					yym2136 := z.EncBinary()
					_ = yym2136
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2131[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2137 := z.EncBinary()
					_ = yym2137
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2131 || yy2arr2131 {
				if yyq2131[2] {
					yy2139 := &x.ListMeta
					yym2140 := z.EncBinary()
					_ = yym2140
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2139) {
					} else {
						z.EncFallback(yy2139)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2131[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2141 := &x.ListMeta
					yym2142 := z.EncBinary()
					_ = yym2142
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2141) {
					} else {
						z.EncFallback(yy2141)
					}
				}
			}
			if yyr2131 || yy2arr2131 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2144 := z.EncBinary()
					_ = yym2144
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2145 := z.EncBinary()
					_ = yym2145
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yysep2131 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2146 := z.DecBinary()
	_ = yym2146
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2147 := r.ReadMapStart()
			if yyl2147 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2147, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2147 := r.ReadArrayStart()
			if yyl2147 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2147, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2148Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2148Slc
	var yyhl2148 bool = l >= 0
	for yyj2148 := 0; ; yyj2148++ {
		if yyhl2148 {
			if yyj2148 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2148Slc = r.DecodeBytes(yys2148Slc, true, true)
		yys2148 := string(yys2148Slc)
		switch yys2148 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2151 := &x.ListMeta
				yym2152 := z.DecBinary()
				_ = yym2152
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2151) {
				} else {
					z.DecFallback(yyv2151, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2153 := &x.Items
				yym2154 := z.DecBinary()
				_ = yym2154
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2153), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2148)
		} // end switch yys2148
	} // end for yyj2148
	if !yyhl2148 {
		r.ReadEnd()
	}
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2155 int
	var yyb2155 bool
	var yyhl2155 bool = l >= 0
	yyj2155++
	if yyhl2155 {
		yyb2155 = yyj2155 > l
	} else {
		yyb2155 = r.CheckBreak()
	}
	if yyb2155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2155++
	if yyhl2155 {
		yyb2155 = yyj2155 > l
	} else {
		yyb2155 = r.CheckBreak()
	}
	if yyb2155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2155++
	if yyhl2155 {
		yyb2155 = yyj2155 > l
	} else {
		yyb2155 = r.CheckBreak()
	}
	if yyb2155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2158 := &x.ListMeta
		yym2159 := z.DecBinary()
		_ = yym2159
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2158) {
		} else {
			z.DecFallback(yyv2158, false)
		}
	}
	yyj2155++
	if yyhl2155 {
		yyb2155 = yyj2155 > l
	} else {
		yyb2155 = r.CheckBreak()
	}
	if yyb2155 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2160 := &x.Items
		yym2161 := z.DecBinary()
		_ = yym2161
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2160), d)
		}
	}
	for {
		yyj2155++
		if yyhl2155 {
			yyb2155 = yyj2155 > l
		} else {
			yyb2155 = r.CheckBreak()
		}
		if yyb2155 {
			break
		}
		z.DecStructFieldNotFound(yyj2155-1, "")
	}
	r.ReadEnd()
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2162 := z.EncBinary()
		_ = yym2162
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2163 := !z.EncBinary()
			yy2arr2163 := z.EncBasicHandle().StructToArray
			var yyq2163 [4]bool
			_, _, _ = yysep2163, yyq2163, yy2arr2163
			const yyr2163 bool = false
			yyq2163[0] = x.PodCIDR != ""
			yyq2163[1] = x.ExternalID != ""
			yyq2163[2] = x.ProviderID != ""
			yyq2163[3] = x.Unschedulable != false
			if yyr2163 || yy2arr2163 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2163 int = 0
				for _, b := range yyq2163 {
					if b {
						yynn2163++
					}
				}
				r.EncodeMapStart(yynn2163)
			}
			if yyr2163 || yy2arr2163 {
				if yyq2163[0] {
					yym2165 := z.EncBinary()
					_ = yym2165
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2163[0] {
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					yym2166 := z.EncBinary()
					_ = yym2166
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2163 || yy2arr2163 {
				if yyq2163[1] {
					yym2168 := z.EncBinary()
					_ = yym2168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2163[1] {
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					yym2169 := z.EncBinary()
					_ = yym2169
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2163 || yy2arr2163 {
				if yyq2163[2] {
					yym2171 := z.EncBinary()
					_ = yym2171
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2163[2] {
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					yym2172 := z.EncBinary()
					_ = yym2172
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2163 || yy2arr2163 {
				if yyq2163[3] {
					yym2174 := z.EncBinary()
					_ = yym2174
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2163[3] {
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					yym2175 := z.EncBinary()
					_ = yym2175
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yysep2163 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2176 := z.DecBinary()
	_ = yym2176
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2177 := r.ReadMapStart()
			if yyl2177 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2177, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2177 := r.ReadArrayStart()
			if yyl2177 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2177, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2178Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2178Slc
	var yyhl2178 bool = l >= 0
	for yyj2178 := 0; ; yyj2178++ {
		if yyhl2178 {
			if yyj2178 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2178Slc = r.DecodeBytes(yys2178Slc, true, true)
		yys2178 := string(yys2178Slc)
		switch yys2178 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2178)
		} // end switch yys2178
	} // end for yyj2178
	if !yyhl2178 {
		r.ReadEnd()
	}
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2183 int
	var yyb2183 bool
	var yyhl2183 bool = l >= 0
	yyj2183++
	if yyhl2183 {
		yyb2183 = yyj2183 > l
	} else {
		yyb2183 = r.CheckBreak()
	}
	if yyb2183 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2183++
	if yyhl2183 {
		yyb2183 = yyj2183 > l
	} else {
		yyb2183 = r.CheckBreak()
	}
	if yyb2183 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2183++
	if yyhl2183 {
		yyb2183 = yyj2183 > l
	} else {
		yyb2183 = r.CheckBreak()
	}
	if yyb2183 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2183++
	if yyhl2183 {
		yyb2183 = yyj2183 > l
	} else {
		yyb2183 = r.CheckBreak()
	}
	if yyb2183 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2183++
		if yyhl2183 {
			yyb2183 = yyj2183 > l
		} else {
			yyb2183 = r.CheckBreak()
		}
		if yyb2183 {
			break
		}
		z.DecStructFieldNotFound(yyj2183-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2188 := z.EncBinary()
		_ = yym2188
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2189 := !z.EncBinary()
			yy2arr2189 := z.EncBasicHandle().StructToArray
			var yyq2189 [1]bool
			_, _, _ = yysep2189, yyq2189, yy2arr2189
			const yyr2189 bool = false
			if yyr2189 || yy2arr2189 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2189 int = 1
				for _, b := range yyq2189 {
					if b {
						yynn2189++
					}
				}
				r.EncodeMapStart(yynn2189)
			}
			if yyr2189 || yy2arr2189 {
				yym2191 := z.EncBinary()
				_ = yym2191
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				yym2192 := z.EncBinary()
				_ = yym2192
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yysep2189 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2193 := z.DecBinary()
	_ = yym2193
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2194 := r.ReadMapStart()
			if yyl2194 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2194, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2194 := r.ReadArrayStart()
			if yyl2194 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2194, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2195Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2195Slc
	var yyhl2195 bool = l >= 0
	for yyj2195 := 0; ; yyj2195++ {
		if yyhl2195 {
			if yyj2195 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2195Slc = r.DecodeBytes(yys2195Slc, true, true)
		yys2195 := string(yys2195Slc)
		switch yys2195 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2195)
		} // end switch yys2195
	} // end for yyj2195
	if !yyhl2195 {
		r.ReadEnd()
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2197 int
	var yyb2197 bool
	var yyhl2197 bool = l >= 0
	yyj2197++
	if yyhl2197 {
		yyb2197 = yyj2197 > l
	} else {
		yyb2197 = r.CheckBreak()
	}
	if yyb2197 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2197++
		if yyhl2197 {
			yyb2197 = yyj2197 > l
		} else {
			yyb2197 = r.CheckBreak()
		}
		if yyb2197 {
			break
		}
		z.DecStructFieldNotFound(yyj2197-1, "")
	}
	r.ReadEnd()
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2199 := z.EncBinary()
		_ = yym2199
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2200 := !z.EncBinary()
			yy2arr2200 := z.EncBasicHandle().StructToArray
			var yyq2200 [1]bool
			_, _, _ = yysep2200, yyq2200, yy2arr2200
			const yyr2200 bool = false
			yyq2200[0] = true
			if yyr2200 || yy2arr2200 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2200 int = 0
				for _, b := range yyq2200 {
					if b {
						yynn2200++
					}
				}
				r.EncodeMapStart(yynn2200)
			}
			if yyr2200 || yy2arr2200 {
				if yyq2200[0] {
					yy2202 := &x.KubeletEndpoint
					yy2202.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2200[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					yy2203 := &x.KubeletEndpoint
					yy2203.CodecEncodeSelf(e)
				}
			}
			if yysep2200 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2204 := z.DecBinary()
	_ = yym2204
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2205 := r.ReadMapStart()
			if yyl2205 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2205, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2205 := r.ReadArrayStart()
			if yyl2205 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2205, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2206Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2206Slc
	var yyhl2206 bool = l >= 0
	for yyj2206 := 0; ; yyj2206++ {
		if yyhl2206 {
			if yyj2206 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2206Slc = r.DecodeBytes(yys2206Slc, true, true)
		yys2206 := string(yys2206Slc)
		switch yys2206 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2207 := &x.KubeletEndpoint
				yyv2207.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2206)
		} // end switch yys2206
	} // end for yyj2206
	if !yyhl2206 {
		r.ReadEnd()
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2208 int
	var yyb2208 bool
	var yyhl2208 bool = l >= 0
	yyj2208++
	if yyhl2208 {
		yyb2208 = yyj2208 > l
	} else {
		yyb2208 = r.CheckBreak()
	}
	if yyb2208 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2209 := &x.KubeletEndpoint
		yyv2209.CodecDecodeSelf(d)
	}
	for {
		yyj2208++
		if yyhl2208 {
			yyb2208 = yyj2208 > l
		} else {
			yyb2208 = r.CheckBreak()
		}
		if yyb2208 {
			break
		}
		z.DecStructFieldNotFound(yyj2208-1, "")
	}
	r.ReadEnd()
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2210 := z.EncBinary()
		_ = yym2210
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2211 := !z.EncBinary()
			yy2arr2211 := z.EncBasicHandle().StructToArray
			var yyq2211 [8]bool
			_, _, _ = yysep2211, yyq2211, yy2arr2211
			const yyr2211 bool = false
			if yyr2211 || yy2arr2211 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2211 int = 8
				for _, b := range yyq2211 {
					if b {
						yynn2211++
					}
				}
				r.EncodeMapStart(yynn2211)
			}
			if yyr2211 || yy2arr2211 {
				yym2213 := z.EncBinary()
				_ = yym2213
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				yym2214 := z.EncBinary()
				_ = yym2214
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2211 || yy2arr2211 {
				yym2216 := z.EncBinary()
				_ = yym2216
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				yym2217 := z.EncBinary()
				_ = yym2217
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2211 || yy2arr2211 {
				yym2219 := z.EncBinary()
				_ = yym2219
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				yym2220 := z.EncBinary()
				_ = yym2220
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2211 || yy2arr2211 {
				yym2222 := z.EncBinary()
				_ = yym2222
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				yym2223 := z.EncBinary()
				_ = yym2223
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2211 || yy2arr2211 {
				yym2225 := z.EncBinary()
				_ = yym2225
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				yym2226 := z.EncBinary()
				_ = yym2226
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			}
			if yyr2211 || yy2arr2211 {
				yym2228 := z.EncBinary()
				_ = yym2228
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				yym2229 := z.EncBinary()
				_ = yym2229
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2211 || yy2arr2211 {
				yym2231 := z.EncBinary()
				_ = yym2231
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				yym2232 := z.EncBinary()
				_ = yym2232
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2211 || yy2arr2211 {
				yym2234 := z.EncBinary()
				_ = yym2234
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				yym2235 := z.EncBinary()
				_ = yym2235
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yysep2211 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2236 := z.DecBinary()
	_ = yym2236
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2237 := r.ReadMapStart()
			if yyl2237 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2237, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2237 := r.ReadArrayStart()
			if yyl2237 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2237, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2238Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2238Slc
	var yyhl2238 bool = l >= 0
	for yyj2238 := 0; ; yyj2238++ {
		if yyhl2238 {
			if yyj2238 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2238Slc = r.DecodeBytes(yys2238Slc, true, true)
		yys2238 := string(yys2238Slc)
		switch yys2238 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OsImage = ""
			} else {
				x.OsImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2238)
		} // end switch yys2238
	} // end for yyj2238
	if !yyhl2238 {
		r.ReadEnd()
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2247 int
	var yyb2247 bool
	var yyhl2247 bool = l >= 0
	yyj2247++
	if yyhl2247 {
		yyb2247 = yyj2247 > l
	} else {
		yyb2247 = r.CheckBreak()
	}
	if yyb2247 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2247++
	if yyhl2247 {
		yyb2247 = yyj2247 > l
	} else {
		yyb2247 = r.CheckBreak()
	}
	if yyb2247 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2247++
	if yyhl2247 {
		yyb2247 = yyj2247 > l
	} else {
		yyb2247 = r.CheckBreak()
	}
	if yyb2247 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2247++
	if yyhl2247 {
		yyb2247 = yyj2247 > l
	} else {
		yyb2247 = r.CheckBreak()
	}
	if yyb2247 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2247++
	if yyhl2247 {
		yyb2247 = yyj2247 > l
	} else {
		yyb2247 = r.CheckBreak()
	}
	if yyb2247 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.OsImage = ""
	} else {
		x.OsImage = string(r.DecodeString())
	}
	yyj2247++
	if yyhl2247 {
		yyb2247 = yyj2247 > l
	} else {
		yyb2247 = r.CheckBreak()
	}
	if yyb2247 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2247++
	if yyhl2247 {
		yyb2247 = yyj2247 > l
	} else {
		yyb2247 = r.CheckBreak()
	}
	if yyb2247 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2247++
	if yyhl2247 {
		yyb2247 = yyj2247 > l
	} else {
		yyb2247 = r.CheckBreak()
	}
	if yyb2247 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2247++
		if yyhl2247 {
			yyb2247 = yyj2247 > l
		} else {
			yyb2247 = r.CheckBreak()
		}
		if yyb2247 {
			break
		}
		z.DecStructFieldNotFound(yyj2247-1, "")
	}
	r.ReadEnd()
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2256 := z.EncBinary()
		_ = yym2256
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2257 := !z.EncBinary()
			yy2arr2257 := z.EncBasicHandle().StructToArray
			var yyq2257 [6]bool
			_, _, _ = yysep2257, yyq2257, yy2arr2257
			const yyr2257 bool = false
			yyq2257[0] = len(x.Capacity) != 0
			yyq2257[1] = x.Phase != ""
			yyq2257[2] = len(x.Conditions) != 0
			yyq2257[3] = len(x.Addresses) != 0
			yyq2257[4] = true
			yyq2257[5] = true
			if yyr2257 || yy2arr2257 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2257 int = 0
				for _, b := range yyq2257 {
					if b {
						yynn2257++
					}
				}
				r.EncodeMapStart(yynn2257)
			}
			if yyr2257 || yy2arr2257 {
				if yyq2257[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2257[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2257 || yy2arr2257 {
				if yyq2257[1] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2257[1] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2257 || yy2arr2257 {
				if yyq2257[2] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2261 := z.EncBinary()
						_ = yym2261
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2257[2] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2262 := z.EncBinary()
						_ = yym2262
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2257 || yy2arr2257 {
				if yyq2257[3] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2264 := z.EncBinary()
						_ = yym2264
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2257[3] {
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2265 := z.EncBinary()
						_ = yym2265
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2257 || yy2arr2257 {
				if yyq2257[4] {
					yy2267 := &x.DaemonEndpoints
					yy2267.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2257[4] {
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					yy2268 := &x.DaemonEndpoints
					yy2268.CodecEncodeSelf(e)
				}
			}
			if yyr2257 || yy2arr2257 {
				if yyq2257[5] {
					yy2270 := &x.NodeInfo
					yy2270.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2257[5] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					yy2271 := &x.NodeInfo
					yy2271.CodecEncodeSelf(e)
				}
			}
			if yysep2257 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2272 := z.DecBinary()
	_ = yym2272
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2273 := r.ReadMapStart()
			if yyl2273 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2273, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2273 := r.ReadArrayStart()
			if yyl2273 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2273, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2274Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2274Slc
	var yyhl2274 bool = l >= 0
	for yyj2274 := 0; ; yyj2274++ {
		if yyhl2274 {
			if yyj2274 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2274Slc = r.DecodeBytes(yys2274Slc, true, true)
		yys2274 := string(yys2274Slc)
		switch yys2274 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2275 := &x.Capacity
				yyv2275.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2277 := &x.Conditions
				yym2278 := z.DecBinary()
				_ = yym2278
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2277), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2279 := &x.Addresses
				yym2280 := z.DecBinary()
				_ = yym2280
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2279), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2281 := &x.DaemonEndpoints
				yyv2281.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2282 := &x.NodeInfo
				yyv2282.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2274)
		} // end switch yys2274
	} // end for yyj2274
	if !yyhl2274 {
		r.ReadEnd()
	}
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2283 int
	var yyb2283 bool
	var yyhl2283 bool = l >= 0
	yyj2283++
	if yyhl2283 {
		yyb2283 = yyj2283 > l
	} else {
		yyb2283 = r.CheckBreak()
	}
	if yyb2283 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2284 := &x.Capacity
		yyv2284.CodecDecodeSelf(d)
	}
	yyj2283++
	if yyhl2283 {
		yyb2283 = yyj2283 > l
	} else {
		yyb2283 = r.CheckBreak()
	}
	if yyb2283 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2283++
	if yyhl2283 {
		yyb2283 = yyj2283 > l
	} else {
		yyb2283 = r.CheckBreak()
	}
	if yyb2283 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2286 := &x.Conditions
		yym2287 := z.DecBinary()
		_ = yym2287
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2286), d)
		}
	}
	yyj2283++
	if yyhl2283 {
		yyb2283 = yyj2283 > l
	} else {
		yyb2283 = r.CheckBreak()
	}
	if yyb2283 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2288 := &x.Addresses
		yym2289 := z.DecBinary()
		_ = yym2289
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2288), d)
		}
	}
	yyj2283++
	if yyhl2283 {
		yyb2283 = yyj2283 > l
	} else {
		yyb2283 = r.CheckBreak()
	}
	if yyb2283 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2290 := &x.DaemonEndpoints
		yyv2290.CodecDecodeSelf(d)
	}
	yyj2283++
	if yyhl2283 {
		yyb2283 = yyj2283 > l
	} else {
		yyb2283 = r.CheckBreak()
	}
	if yyb2283 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2291 := &x.NodeInfo
		yyv2291.CodecDecodeSelf(d)
	}
	for {
		yyj2283++
		if yyhl2283 {
			yyb2283 = yyj2283 > l
		} else {
			yyb2283 = r.CheckBreak()
		}
		if yyb2283 {
			break
		}
		z.DecStructFieldNotFound(yyj2283-1, "")
	}
	r.ReadEnd()
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2292 := z.EncBinary()
	_ = yym2292
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2293 := z.DecBinary()
	_ = yym2293
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2294 := z.EncBinary()
	_ = yym2294
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2295 := z.DecBinary()
	_ = yym2295
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2296 := z.EncBinary()
		_ = yym2296
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2297 := !z.EncBinary()
			yy2arr2297 := z.EncBasicHandle().StructToArray
			var yyq2297 [6]bool
			_, _, _ = yysep2297, yyq2297, yy2arr2297
			const yyr2297 bool = false
			yyq2297[2] = true
			yyq2297[3] = true
			yyq2297[4] = x.Reason != ""
			yyq2297[5] = x.Message != ""
			if yyr2297 || yy2arr2297 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2297 int = 2
				for _, b := range yyq2297 {
					if b {
						yynn2297++
					}
				}
				r.EncodeMapStart(yynn2297)
			}
			if yyr2297 || yy2arr2297 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2297 || yy2arr2297 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2297 || yy2arr2297 {
				if yyq2297[2] {
					yy2301 := &x.LastHeartbeatTime
					yym2302 := z.EncBinary()
					_ = yym2302
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2301) {
					} else if yym2302 {
						z.EncBinaryMarshal(yy2301)
					} else if !yym2302 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2301)
					} else {
						z.EncFallback(yy2301)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2297[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					yy2303 := &x.LastHeartbeatTime
					yym2304 := z.EncBinary()
					_ = yym2304
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2303) {
					} else if yym2304 {
						z.EncBinaryMarshal(yy2303)
					} else if !yym2304 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2303)
					} else {
						z.EncFallback(yy2303)
					}
				}
			}
			if yyr2297 || yy2arr2297 {
				if yyq2297[3] {
					yy2306 := &x.LastTransitionTime
					yym2307 := z.EncBinary()
					_ = yym2307
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2306) {
					} else if yym2307 {
						z.EncBinaryMarshal(yy2306)
					} else if !yym2307 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2306)
					} else {
						z.EncFallback(yy2306)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2297[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy2308 := &x.LastTransitionTime
					yym2309 := z.EncBinary()
					_ = yym2309
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2308) {
					} else if yym2309 {
						z.EncBinaryMarshal(yy2308)
					} else if !yym2309 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2308)
					} else {
						z.EncFallback(yy2308)
					}
				}
			}
			if yyr2297 || yy2arr2297 {
				if yyq2297[4] {
					yym2311 := z.EncBinary()
					_ = yym2311
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2297[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym2312 := z.EncBinary()
					_ = yym2312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2297 || yy2arr2297 {
				if yyq2297[5] {
					yym2314 := z.EncBinary()
					_ = yym2314
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2297[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym2315 := z.EncBinary()
					_ = yym2315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep2297 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2316 := z.DecBinary()
	_ = yym2316
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2317 := r.ReadMapStart()
			if yyl2317 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2317, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2317 := r.ReadArrayStart()
			if yyl2317 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2317, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2318Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2318Slc
	var yyhl2318 bool = l >= 0
	for yyj2318 := 0; ; yyj2318++ {
		if yyhl2318 {
			if yyj2318 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2318Slc = r.DecodeBytes(yys2318Slc, true, true)
		yys2318 := string(yys2318Slc)
		switch yys2318 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv2321 := &x.LastHeartbeatTime
				yym2322 := z.DecBinary()
				_ = yym2322
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2321) {
				} else if yym2322 {
					z.DecBinaryUnmarshal(yyv2321)
				} else if !yym2322 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2321)
				} else {
					z.DecFallback(yyv2321, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2323 := &x.LastTransitionTime
				yym2324 := z.DecBinary()
				_ = yym2324
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2323) {
				} else if yym2324 {
					z.DecBinaryUnmarshal(yyv2323)
				} else if !yym2324 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2323)
				} else {
					z.DecFallback(yyv2323, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2318)
		} // end switch yys2318
	} // end for yyj2318
	if !yyhl2318 {
		r.ReadEnd()
	}
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2327 int
	var yyb2327 bool
	var yyhl2327 bool = l >= 0
	yyj2327++
	if yyhl2327 {
		yyb2327 = yyj2327 > l
	} else {
		yyb2327 = r.CheckBreak()
	}
	if yyb2327 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2327++
	if yyhl2327 {
		yyb2327 = yyj2327 > l
	} else {
		yyb2327 = r.CheckBreak()
	}
	if yyb2327 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2327++
	if yyhl2327 {
		yyb2327 = yyj2327 > l
	} else {
		yyb2327 = r.CheckBreak()
	}
	if yyb2327 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv2330 := &x.LastHeartbeatTime
		yym2331 := z.DecBinary()
		_ = yym2331
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2330) {
		} else if yym2331 {
			z.DecBinaryUnmarshal(yyv2330)
		} else if !yym2331 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2330)
		} else {
			z.DecFallback(yyv2330, false)
		}
	}
	yyj2327++
	if yyhl2327 {
		yyb2327 = yyj2327 > l
	} else {
		yyb2327 = r.CheckBreak()
	}
	if yyb2327 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2332 := &x.LastTransitionTime
		yym2333 := z.DecBinary()
		_ = yym2333
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2332) {
		} else if yym2333 {
			z.DecBinaryUnmarshal(yyv2332)
		} else if !yym2333 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2332)
		} else {
			z.DecFallback(yyv2332, false)
		}
	}
	yyj2327++
	if yyhl2327 {
		yyb2327 = yyj2327 > l
	} else {
		yyb2327 = r.CheckBreak()
	}
	if yyb2327 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2327++
	if yyhl2327 {
		yyb2327 = yyj2327 > l
	} else {
		yyb2327 = r.CheckBreak()
	}
	if yyb2327 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2327++
		if yyhl2327 {
			yyb2327 = yyj2327 > l
		} else {
			yyb2327 = r.CheckBreak()
		}
		if yyb2327 {
			break
		}
		z.DecStructFieldNotFound(yyj2327-1, "")
	}
	r.ReadEnd()
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2336 := z.EncBinary()
	_ = yym2336
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2337 := z.DecBinary()
	_ = yym2337
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2338 := z.EncBinary()
		_ = yym2338
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2339 := !z.EncBinary()
			yy2arr2339 := z.EncBasicHandle().StructToArray
			var yyq2339 [2]bool
			_, _, _ = yysep2339, yyq2339, yy2arr2339
			const yyr2339 bool = false
			if yyr2339 || yy2arr2339 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2339 int = 2
				for _, b := range yyq2339 {
					if b {
						yynn2339++
					}
				}
				r.EncodeMapStart(yynn2339)
			}
			if yyr2339 || yy2arr2339 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2339 || yy2arr2339 {
				yym2342 := z.EncBinary()
				_ = yym2342
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				yym2343 := z.EncBinary()
				_ = yym2343
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yysep2339 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2344 := z.DecBinary()
	_ = yym2344
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2345 := r.ReadMapStart()
			if yyl2345 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2345, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2345 := r.ReadArrayStart()
			if yyl2345 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2345, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2346Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2346Slc
	var yyhl2346 bool = l >= 0
	for yyj2346 := 0; ; yyj2346++ {
		if yyhl2346 {
			if yyj2346 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2346Slc = r.DecodeBytes(yys2346Slc, true, true)
		yys2346 := string(yys2346Slc)
		switch yys2346 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2346)
		} // end switch yys2346
	} // end for yyj2346
	if !yyhl2346 {
		r.ReadEnd()
	}
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2349 int
	var yyb2349 bool
	var yyhl2349 bool = l >= 0
	yyj2349++
	if yyhl2349 {
		yyb2349 = yyj2349 > l
	} else {
		yyb2349 = r.CheckBreak()
	}
	if yyb2349 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2349++
	if yyhl2349 {
		yyb2349 = yyj2349 > l
	} else {
		yyb2349 = r.CheckBreak()
	}
	if yyb2349 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj2349++
		if yyhl2349 {
			yyb2349 = yyj2349 > l
		} else {
			yyb2349 = r.CheckBreak()
		}
		if yyb2349 {
			break
		}
		z.DecStructFieldNotFound(yyj2349-1, "")
	}
	r.ReadEnd()
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2352 := z.EncBinary()
	_ = yym2352
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2353 := z.DecBinary()
	_ = yym2353
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2354 := z.EncBinary()
		_ = yym2354
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2355 := z.DecBinary()
	_ = yym2355
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2356 := z.EncBinary()
		_ = yym2356
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2357 := !z.EncBinary()
			yy2arr2357 := z.EncBasicHandle().StructToArray
			var yyq2357 [5]bool
			_, _, _ = yysep2357, yyq2357, yy2arr2357
			const yyr2357 bool = false
			yyq2357[0] = x.Kind != ""
			yyq2357[1] = x.APIVersion != ""
			yyq2357[2] = true
			yyq2357[3] = true
			yyq2357[4] = true
			if yyr2357 || yy2arr2357 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2357 int = 0
				for _, b := range yyq2357 {
					if b {
						yynn2357++
					}
				}
				r.EncodeMapStart(yynn2357)
			}
			if yyr2357 || yy2arr2357 {
				if yyq2357[0] {
					yym2359 := z.EncBinary()
					_ = yym2359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2357[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2360 := z.EncBinary()
					_ = yym2360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2357 || yy2arr2357 {
				if yyq2357[1] {
					yym2362 := z.EncBinary()
					_ = yym2362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2357[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2363 := z.EncBinary()
					_ = yym2363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2357 || yy2arr2357 {
				if yyq2357[2] {
					yy2365 := &x.ObjectMeta
					yy2365.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2357[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2366 := &x.ObjectMeta
					yy2366.CodecEncodeSelf(e)
				}
			}
			if yyr2357 || yy2arr2357 {
				if yyq2357[3] {
					yy2368 := &x.Spec
					yy2368.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2357[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2369 := &x.Spec
					yy2369.CodecEncodeSelf(e)
				}
			}
			if yyr2357 || yy2arr2357 {
				if yyq2357[4] {
					yy2371 := &x.Status
					yy2371.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2357[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2372 := &x.Status
					yy2372.CodecEncodeSelf(e)
				}
			}
			if yysep2357 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2373 := z.DecBinary()
	_ = yym2373
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2374 := r.ReadMapStart()
			if yyl2374 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2374, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2374 := r.ReadArrayStart()
			if yyl2374 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2374, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2375Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2375Slc
	var yyhl2375 bool = l >= 0
	for yyj2375 := 0; ; yyj2375++ {
		if yyhl2375 {
			if yyj2375 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2375Slc = r.DecodeBytes(yys2375Slc, true, true)
		yys2375 := string(yys2375Slc)
		switch yys2375 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2378 := &x.ObjectMeta
				yyv2378.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2379 := &x.Spec
				yyv2379.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2380 := &x.Status
				yyv2380.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2375)
		} // end switch yys2375
	} // end for yyj2375
	if !yyhl2375 {
		r.ReadEnd()
	}
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2381 int
	var yyb2381 bool
	var yyhl2381 bool = l >= 0
	yyj2381++
	if yyhl2381 {
		yyb2381 = yyj2381 > l
	} else {
		yyb2381 = r.CheckBreak()
	}
	if yyb2381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2381++
	if yyhl2381 {
		yyb2381 = yyj2381 > l
	} else {
		yyb2381 = r.CheckBreak()
	}
	if yyb2381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2381++
	if yyhl2381 {
		yyb2381 = yyj2381 > l
	} else {
		yyb2381 = r.CheckBreak()
	}
	if yyb2381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2384 := &x.ObjectMeta
		yyv2384.CodecDecodeSelf(d)
	}
	yyj2381++
	if yyhl2381 {
		yyb2381 = yyj2381 > l
	} else {
		yyb2381 = r.CheckBreak()
	}
	if yyb2381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2385 := &x.Spec
		yyv2385.CodecDecodeSelf(d)
	}
	yyj2381++
	if yyhl2381 {
		yyb2381 = yyj2381 > l
	} else {
		yyb2381 = r.CheckBreak()
	}
	if yyb2381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2386 := &x.Status
		yyv2386.CodecDecodeSelf(d)
	}
	for {
		yyj2381++
		if yyhl2381 {
			yyb2381 = yyj2381 > l
		} else {
			yyb2381 = r.CheckBreak()
		}
		if yyb2381 {
			break
		}
		z.DecStructFieldNotFound(yyj2381-1, "")
	}
	r.ReadEnd()
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2387 := z.EncBinary()
		_ = yym2387
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2388 := !z.EncBinary()
			yy2arr2388 := z.EncBasicHandle().StructToArray
			var yyq2388 [4]bool
			_, _, _ = yysep2388, yyq2388, yy2arr2388
			const yyr2388 bool = false
			yyq2388[0] = x.Kind != ""
			yyq2388[1] = x.APIVersion != ""
			yyq2388[2] = true
			if yyr2388 || yy2arr2388 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2388 int = 1
				for _, b := range yyq2388 {
					if b {
						yynn2388++
					}
				}
				r.EncodeMapStart(yynn2388)
			}
			if yyr2388 || yy2arr2388 {
				if yyq2388[0] {
					yym2390 := z.EncBinary()
					_ = yym2390
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2388[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2391 := z.EncBinary()
					_ = yym2391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2388 || yy2arr2388 {
				if yyq2388[1] {
					yym2393 := z.EncBinary()
					_ = yym2393
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2388[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2394 := z.EncBinary()
					_ = yym2394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2388 || yy2arr2388 {
				if yyq2388[2] {
					yy2396 := &x.ListMeta
					yym2397 := z.EncBinary()
					_ = yym2397
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2396) {
					} else {
						z.EncFallback(yy2396)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2388[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2398 := &x.ListMeta
					yym2399 := z.EncBinary()
					_ = yym2399
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2398) {
					} else {
						z.EncFallback(yy2398)
					}
				}
			}
			if yyr2388 || yy2arr2388 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2401 := z.EncBinary()
					_ = yym2401
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2402 := z.EncBinary()
					_ = yym2402
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yysep2388 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2403 := z.DecBinary()
	_ = yym2403
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2404 := r.ReadMapStart()
			if yyl2404 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2404, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2404 := r.ReadArrayStart()
			if yyl2404 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2404, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2405Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2405Slc
	var yyhl2405 bool = l >= 0
	for yyj2405 := 0; ; yyj2405++ {
		if yyhl2405 {
			if yyj2405 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2405Slc = r.DecodeBytes(yys2405Slc, true, true)
		yys2405 := string(yys2405Slc)
		switch yys2405 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2408 := &x.ListMeta
				yym2409 := z.DecBinary()
				_ = yym2409
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2408) {
				} else {
					z.DecFallback(yyv2408, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2410 := &x.Items
				yym2411 := z.DecBinary()
				_ = yym2411
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2410), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2405)
		} // end switch yys2405
	} // end for yyj2405
	if !yyhl2405 {
		r.ReadEnd()
	}
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2412 int
	var yyb2412 bool
	var yyhl2412 bool = l >= 0
	yyj2412++
	if yyhl2412 {
		yyb2412 = yyj2412 > l
	} else {
		yyb2412 = r.CheckBreak()
	}
	if yyb2412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2412++
	if yyhl2412 {
		yyb2412 = yyj2412 > l
	} else {
		yyb2412 = r.CheckBreak()
	}
	if yyb2412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2412++
	if yyhl2412 {
		yyb2412 = yyj2412 > l
	} else {
		yyb2412 = r.CheckBreak()
	}
	if yyb2412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2415 := &x.ListMeta
		yym2416 := z.DecBinary()
		_ = yym2416
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2415) {
		} else {
			z.DecFallback(yyv2415, false)
		}
	}
	yyj2412++
	if yyhl2412 {
		yyb2412 = yyj2412 > l
	} else {
		yyb2412 = r.CheckBreak()
	}
	if yyb2412 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2417 := &x.Items
		yym2418 := z.DecBinary()
		_ = yym2418
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2417), d)
		}
	}
	for {
		yyj2412++
		if yyhl2412 {
			yyb2412 = yyj2412 > l
		} else {
			yyb2412 = r.CheckBreak()
		}
		if yyb2412 {
			break
		}
		z.DecStructFieldNotFound(yyj2412-1, "")
	}
	r.ReadEnd()
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2419 := z.EncBinary()
	_ = yym2419
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2420 := z.DecBinary()
	_ = yym2420
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2421 := z.EncBinary()
		_ = yym2421
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2422 := !z.EncBinary()
			yy2arr2422 := z.EncBasicHandle().StructToArray
			var yyq2422 [1]bool
			_, _, _ = yysep2422, yyq2422, yy2arr2422
			const yyr2422 bool = false
			yyq2422[0] = len(x.Finalizers) != 0
			if yyr2422 || yy2arr2422 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2422 int = 0
				for _, b := range yyq2422 {
					if b {
						yynn2422++
					}
				}
				r.EncodeMapStart(yynn2422)
			}
			if yyr2422 || yy2arr2422 {
				if yyq2422[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym2424 := z.EncBinary()
						_ = yym2424
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2422[0] {
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym2425 := z.EncBinary()
						_ = yym2425
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yysep2422 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2426 := z.DecBinary()
	_ = yym2426
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2427 := r.ReadMapStart()
			if yyl2427 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2427, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2427 := r.ReadArrayStart()
			if yyl2427 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2427, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2428Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2428Slc
	var yyhl2428 bool = l >= 0
	for yyj2428 := 0; ; yyj2428++ {
		if yyhl2428 {
			if yyj2428 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2428Slc = r.DecodeBytes(yys2428Slc, true, true)
		yys2428 := string(yys2428Slc)
		switch yys2428 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2429 := &x.Finalizers
				yym2430 := z.DecBinary()
				_ = yym2430
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2429), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2428)
		} // end switch yys2428
	} // end for yyj2428
	if !yyhl2428 {
		r.ReadEnd()
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2431 int
	var yyb2431 bool
	var yyhl2431 bool = l >= 0
	yyj2431++
	if yyhl2431 {
		yyb2431 = yyj2431 > l
	} else {
		yyb2431 = r.CheckBreak()
	}
	if yyb2431 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2432 := &x.Finalizers
		yym2433 := z.DecBinary()
		_ = yym2433
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2432), d)
		}
	}
	for {
		yyj2431++
		if yyhl2431 {
			yyb2431 = yyj2431 > l
		} else {
			yyb2431 = r.CheckBreak()
		}
		if yyb2431 {
			break
		}
		z.DecStructFieldNotFound(yyj2431-1, "")
	}
	r.ReadEnd()
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2434 := z.EncBinary()
		_ = yym2434
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2435 := !z.EncBinary()
			yy2arr2435 := z.EncBasicHandle().StructToArray
			var yyq2435 [1]bool
			_, _, _ = yysep2435, yyq2435, yy2arr2435
			const yyr2435 bool = false
			yyq2435[0] = x.Phase != ""
			if yyr2435 || yy2arr2435 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2435 int = 0
				for _, b := range yyq2435 {
					if b {
						yynn2435++
					}
				}
				r.EncodeMapStart(yynn2435)
			}
			if yyr2435 || yy2arr2435 {
				if yyq2435[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2435[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yysep2435 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2437 := z.DecBinary()
	_ = yym2437
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2438 := r.ReadMapStart()
			if yyl2438 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2438, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2438 := r.ReadArrayStart()
			if yyl2438 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2438, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2439Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2439Slc
	var yyhl2439 bool = l >= 0
	for yyj2439 := 0; ; yyj2439++ {
		if yyhl2439 {
			if yyj2439 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2439Slc = r.DecodeBytes(yys2439Slc, true, true)
		yys2439 := string(yys2439Slc)
		switch yys2439 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2439)
		} // end switch yys2439
	} // end for yyj2439
	if !yyhl2439 {
		r.ReadEnd()
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2441 int
	var yyb2441 bool
	var yyhl2441 bool = l >= 0
	yyj2441++
	if yyhl2441 {
		yyb2441 = yyj2441 > l
	} else {
		yyb2441 = r.CheckBreak()
	}
	if yyb2441 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2441++
		if yyhl2441 {
			yyb2441 = yyj2441 > l
		} else {
			yyb2441 = r.CheckBreak()
		}
		if yyb2441 {
			break
		}
		z.DecStructFieldNotFound(yyj2441-1, "")
	}
	r.ReadEnd()
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2443 := z.EncBinary()
	_ = yym2443
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2444 := z.DecBinary()
	_ = yym2444
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2445 := z.EncBinary()
		_ = yym2445
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2446 := !z.EncBinary()
			yy2arr2446 := z.EncBasicHandle().StructToArray
			var yyq2446 [5]bool
			_, _, _ = yysep2446, yyq2446, yy2arr2446
			const yyr2446 bool = false
			yyq2446[0] = x.Kind != ""
			yyq2446[1] = x.APIVersion != ""
			yyq2446[2] = true
			yyq2446[3] = true
			yyq2446[4] = true
			if yyr2446 || yy2arr2446 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2446 int = 0
				for _, b := range yyq2446 {
					if b {
						yynn2446++
					}
				}
				r.EncodeMapStart(yynn2446)
			}
			if yyr2446 || yy2arr2446 {
				if yyq2446[0] {
					yym2448 := z.EncBinary()
					_ = yym2448
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2446[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2449 := z.EncBinary()
					_ = yym2449
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2446 || yy2arr2446 {
				if yyq2446[1] {
					yym2451 := z.EncBinary()
					_ = yym2451
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2446[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2452 := z.EncBinary()
					_ = yym2452
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2446 || yy2arr2446 {
				if yyq2446[2] {
					yy2454 := &x.ObjectMeta
					yy2454.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2446[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2455 := &x.ObjectMeta
					yy2455.CodecEncodeSelf(e)
				}
			}
			if yyr2446 || yy2arr2446 {
				if yyq2446[3] {
					yy2457 := &x.Spec
					yy2457.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2446[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2458 := &x.Spec
					yy2458.CodecEncodeSelf(e)
				}
			}
			if yyr2446 || yy2arr2446 {
				if yyq2446[4] {
					yy2460 := &x.Status
					yy2460.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2446[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2461 := &x.Status
					yy2461.CodecEncodeSelf(e)
				}
			}
			if yysep2446 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2462 := z.DecBinary()
	_ = yym2462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2463 := r.ReadMapStart()
			if yyl2463 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2463, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2463 := r.ReadArrayStart()
			if yyl2463 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2463, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2464Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2464Slc
	var yyhl2464 bool = l >= 0
	for yyj2464 := 0; ; yyj2464++ {
		if yyhl2464 {
			if yyj2464 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2464Slc = r.DecodeBytes(yys2464Slc, true, true)
		yys2464 := string(yys2464Slc)
		switch yys2464 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2467 := &x.ObjectMeta
				yyv2467.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2468 := &x.Spec
				yyv2468.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2469 := &x.Status
				yyv2469.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2464)
		} // end switch yys2464
	} // end for yyj2464
	if !yyhl2464 {
		r.ReadEnd()
	}
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2470 int
	var yyb2470 bool
	var yyhl2470 bool = l >= 0
	yyj2470++
	if yyhl2470 {
		yyb2470 = yyj2470 > l
	} else {
		yyb2470 = r.CheckBreak()
	}
	if yyb2470 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2470++
	if yyhl2470 {
		yyb2470 = yyj2470 > l
	} else {
		yyb2470 = r.CheckBreak()
	}
	if yyb2470 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2470++
	if yyhl2470 {
		yyb2470 = yyj2470 > l
	} else {
		yyb2470 = r.CheckBreak()
	}
	if yyb2470 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2473 := &x.ObjectMeta
		yyv2473.CodecDecodeSelf(d)
	}
	yyj2470++
	if yyhl2470 {
		yyb2470 = yyj2470 > l
	} else {
		yyb2470 = r.CheckBreak()
	}
	if yyb2470 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2474 := &x.Spec
		yyv2474.CodecDecodeSelf(d)
	}
	yyj2470++
	if yyhl2470 {
		yyb2470 = yyj2470 > l
	} else {
		yyb2470 = r.CheckBreak()
	}
	if yyb2470 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2475 := &x.Status
		yyv2475.CodecDecodeSelf(d)
	}
	for {
		yyj2470++
		if yyhl2470 {
			yyb2470 = yyj2470 > l
		} else {
			yyb2470 = r.CheckBreak()
		}
		if yyb2470 {
			break
		}
		z.DecStructFieldNotFound(yyj2470-1, "")
	}
	r.ReadEnd()
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2476 := z.EncBinary()
		_ = yym2476
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2477 := !z.EncBinary()
			yy2arr2477 := z.EncBasicHandle().StructToArray
			var yyq2477 [4]bool
			_, _, _ = yysep2477, yyq2477, yy2arr2477
			const yyr2477 bool = false
			yyq2477[0] = x.Kind != ""
			yyq2477[1] = x.APIVersion != ""
			yyq2477[2] = true
			if yyr2477 || yy2arr2477 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2477 int = 1
				for _, b := range yyq2477 {
					if b {
						yynn2477++
					}
				}
				r.EncodeMapStart(yynn2477)
			}
			if yyr2477 || yy2arr2477 {
				if yyq2477[0] {
					yym2479 := z.EncBinary()
					_ = yym2479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2477[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2480 := z.EncBinary()
					_ = yym2480
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2477 || yy2arr2477 {
				if yyq2477[1] {
					yym2482 := z.EncBinary()
					_ = yym2482
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2477[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2483 := z.EncBinary()
					_ = yym2483
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2477 || yy2arr2477 {
				if yyq2477[2] {
					yy2485 := &x.ListMeta
					yym2486 := z.EncBinary()
					_ = yym2486
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2485) {
					} else {
						z.EncFallback(yy2485)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2477[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2487 := &x.ListMeta
					yym2488 := z.EncBinary()
					_ = yym2488
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2487) {
					} else {
						z.EncFallback(yy2487)
					}
				}
			}
			if yyr2477 || yy2arr2477 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2490 := z.EncBinary()
					_ = yym2490
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2491 := z.EncBinary()
					_ = yym2491
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yysep2477 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2492 := z.DecBinary()
	_ = yym2492
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2493 := r.ReadMapStart()
			if yyl2493 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2493, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2493 := r.ReadArrayStart()
			if yyl2493 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2493, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2494Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2494Slc
	var yyhl2494 bool = l >= 0
	for yyj2494 := 0; ; yyj2494++ {
		if yyhl2494 {
			if yyj2494 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2494Slc = r.DecodeBytes(yys2494Slc, true, true)
		yys2494 := string(yys2494Slc)
		switch yys2494 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2497 := &x.ListMeta
				yym2498 := z.DecBinary()
				_ = yym2498
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2497) {
				} else {
					z.DecFallback(yyv2497, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2499 := &x.Items
				yym2500 := z.DecBinary()
				_ = yym2500
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2499), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2494)
		} // end switch yys2494
	} // end for yyj2494
	if !yyhl2494 {
		r.ReadEnd()
	}
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2501 int
	var yyb2501 bool
	var yyhl2501 bool = l >= 0
	yyj2501++
	if yyhl2501 {
		yyb2501 = yyj2501 > l
	} else {
		yyb2501 = r.CheckBreak()
	}
	if yyb2501 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2501++
	if yyhl2501 {
		yyb2501 = yyj2501 > l
	} else {
		yyb2501 = r.CheckBreak()
	}
	if yyb2501 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2501++
	if yyhl2501 {
		yyb2501 = yyj2501 > l
	} else {
		yyb2501 = r.CheckBreak()
	}
	if yyb2501 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2504 := &x.ListMeta
		yym2505 := z.DecBinary()
		_ = yym2505
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2504) {
		} else {
			z.DecFallback(yyv2504, false)
		}
	}
	yyj2501++
	if yyhl2501 {
		yyb2501 = yyj2501 > l
	} else {
		yyb2501 = r.CheckBreak()
	}
	if yyb2501 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2506 := &x.Items
		yym2507 := z.DecBinary()
		_ = yym2507
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2506), d)
		}
	}
	for {
		yyj2501++
		if yyhl2501 {
			yyb2501 = yyj2501 > l
		} else {
			yyb2501 = r.CheckBreak()
		}
		if yyb2501 {
			break
		}
		z.DecStructFieldNotFound(yyj2501-1, "")
	}
	r.ReadEnd()
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2508 := z.EncBinary()
		_ = yym2508
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2509 := !z.EncBinary()
			yy2arr2509 := z.EncBasicHandle().StructToArray
			var yyq2509 [4]bool
			_, _, _ = yysep2509, yyq2509, yy2arr2509
			const yyr2509 bool = false
			yyq2509[0] = x.Kind != ""
			yyq2509[1] = x.APIVersion != ""
			yyq2509[2] = true
			if yyr2509 || yy2arr2509 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2509 int = 1
				for _, b := range yyq2509 {
					if b {
						yynn2509++
					}
				}
				r.EncodeMapStart(yynn2509)
			}
			if yyr2509 || yy2arr2509 {
				if yyq2509[0] {
					yym2511 := z.EncBinary()
					_ = yym2511
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2509[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2512 := z.EncBinary()
					_ = yym2512
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2509 || yy2arr2509 {
				if yyq2509[1] {
					yym2514 := z.EncBinary()
					_ = yym2514
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2509[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2515 := z.EncBinary()
					_ = yym2515
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2509 || yy2arr2509 {
				if yyq2509[2] {
					yy2517 := &x.ObjectMeta
					yy2517.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2509[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2518 := &x.ObjectMeta
					yy2518.CodecEncodeSelf(e)
				}
			}
			if yyr2509 || yy2arr2509 {
				yy2520 := &x.Target
				yy2520.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				yy2521 := &x.Target
				yy2521.CodecEncodeSelf(e)
			}
			if yysep2509 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2522 := z.DecBinary()
	_ = yym2522
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2523 := r.ReadMapStart()
			if yyl2523 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2523, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2523 := r.ReadArrayStart()
			if yyl2523 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2523, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2524Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2524Slc
	var yyhl2524 bool = l >= 0
	for yyj2524 := 0; ; yyj2524++ {
		if yyhl2524 {
			if yyj2524 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2524Slc = r.DecodeBytes(yys2524Slc, true, true)
		yys2524 := string(yys2524Slc)
		switch yys2524 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2527 := &x.ObjectMeta
				yyv2527.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2528 := &x.Target
				yyv2528.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2524)
		} // end switch yys2524
	} // end for yyj2524
	if !yyhl2524 {
		r.ReadEnd()
	}
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2529 int
	var yyb2529 bool
	var yyhl2529 bool = l >= 0
	yyj2529++
	if yyhl2529 {
		yyb2529 = yyj2529 > l
	} else {
		yyb2529 = r.CheckBreak()
	}
	if yyb2529 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2529++
	if yyhl2529 {
		yyb2529 = yyj2529 > l
	} else {
		yyb2529 = r.CheckBreak()
	}
	if yyb2529 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2529++
	if yyhl2529 {
		yyb2529 = yyj2529 > l
	} else {
		yyb2529 = r.CheckBreak()
	}
	if yyb2529 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2532 := &x.ObjectMeta
		yyv2532.CodecDecodeSelf(d)
	}
	yyj2529++
	if yyhl2529 {
		yyb2529 = yyj2529 > l
	} else {
		yyb2529 = r.CheckBreak()
	}
	if yyb2529 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2533 := &x.Target
		yyv2533.CodecDecodeSelf(d)
	}
	for {
		yyj2529++
		if yyhl2529 {
			yyb2529 = yyj2529 > l
		} else {
			yyb2529 = r.CheckBreak()
		}
		if yyb2529 {
			break
		}
		z.DecStructFieldNotFound(yyj2529-1, "")
	}
	r.ReadEnd()
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2534 := z.EncBinary()
		_ = yym2534
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2535 := !z.EncBinary()
			yy2arr2535 := z.EncBasicHandle().StructToArray
			var yyq2535 [3]bool
			_, _, _ = yysep2535, yyq2535, yy2arr2535
			const yyr2535 bool = false
			yyq2535[0] = x.Kind != ""
			yyq2535[1] = x.APIVersion != ""
			if yyr2535 || yy2arr2535 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2535 int = 1
				for _, b := range yyq2535 {
					if b {
						yynn2535++
					}
				}
				r.EncodeMapStart(yynn2535)
			}
			if yyr2535 || yy2arr2535 {
				if yyq2535[0] {
					yym2537 := z.EncBinary()
					_ = yym2537
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2535[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2538 := z.EncBinary()
					_ = yym2538
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2535 || yy2arr2535 {
				if yyq2535[1] {
					yym2540 := z.EncBinary()
					_ = yym2540
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2535[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2541 := z.EncBinary()
					_ = yym2541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2535 || yy2arr2535 {
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2543 := *x.GracePeriodSeconds
					yym2544 := z.EncBinary()
					_ = yym2544
					if false {
					} else {
						r.EncodeInt(int64(yy2543))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2545 := *x.GracePeriodSeconds
					yym2546 := z.EncBinary()
					_ = yym2546
					if false {
					} else {
						r.EncodeInt(int64(yy2545))
					}
				}
			}
			if yysep2535 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2547 := z.DecBinary()
	_ = yym2547
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2548 := r.ReadMapStart()
			if yyl2548 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2548, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2548 := r.ReadArrayStart()
			if yyl2548 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2548, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2549Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2549Slc
	var yyhl2549 bool = l >= 0
	for yyj2549 := 0; ; yyj2549++ {
		if yyhl2549 {
			if yyj2549 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2549Slc = r.DecodeBytes(yys2549Slc, true, true)
		yys2549 := string(yys2549Slc)
		switch yys2549 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym2553 := z.DecBinary()
				_ = yym2553
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2549)
		} // end switch yys2549
	} // end for yyj2549
	if !yyhl2549 {
		r.ReadEnd()
	}
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2554 int
	var yyb2554 bool
	var yyhl2554 bool = l >= 0
	yyj2554++
	if yyhl2554 {
		yyb2554 = yyj2554 > l
	} else {
		yyb2554 = r.CheckBreak()
	}
	if yyb2554 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2554++
	if yyhl2554 {
		yyb2554 = yyj2554 > l
	} else {
		yyb2554 = r.CheckBreak()
	}
	if yyb2554 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2554++
	if yyhl2554 {
		yyb2554 = yyj2554 > l
	} else {
		yyb2554 = r.CheckBreak()
	}
	if yyb2554 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym2558 := z.DecBinary()
		_ = yym2558
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2554++
		if yyhl2554 {
			yyb2554 = yyj2554 > l
		} else {
			yyb2554 = r.CheckBreak()
		}
		if yyb2554 {
			break
		}
		z.DecStructFieldNotFound(yyj2554-1, "")
	}
	r.ReadEnd()
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2559 := z.EncBinary()
		_ = yym2559
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2560 := !z.EncBinary()
			yy2arr2560 := z.EncBasicHandle().StructToArray
			var yyq2560 [6]bool
			_, _, _ = yysep2560, yyq2560, yy2arr2560
			const yyr2560 bool = false
			yyq2560[0] = x.Kind != ""
			yyq2560[1] = x.APIVersion != ""
			yyq2560[2] = x.LabelSelector != ""
			yyq2560[3] = x.FieldSelector != ""
			yyq2560[4] = x.Watch != false
			yyq2560[5] = x.ResourceVersion != ""
			if yyr2560 || yy2arr2560 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2560 int = 0
				for _, b := range yyq2560 {
					if b {
						yynn2560++
					}
				}
				r.EncodeMapStart(yynn2560)
			}
			if yyr2560 || yy2arr2560 {
				if yyq2560[0] {
					yym2562 := z.EncBinary()
					_ = yym2562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2560[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2563 := z.EncBinary()
					_ = yym2563
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2560 || yy2arr2560 {
				if yyq2560[1] {
					yym2565 := z.EncBinary()
					_ = yym2565
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2560[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2566 := z.EncBinary()
					_ = yym2566
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2560 || yy2arr2560 {
				if yyq2560[2] {
					yym2568 := z.EncBinary()
					_ = yym2568
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2560[2] {
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					yym2569 := z.EncBinary()
					_ = yym2569
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr2560 || yy2arr2560 {
				if yyq2560[3] {
					yym2571 := z.EncBinary()
					_ = yym2571
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2560[3] {
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					yym2572 := z.EncBinary()
					_ = yym2572
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr2560 || yy2arr2560 {
				if yyq2560[4] {
					yym2574 := z.EncBinary()
					_ = yym2574
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2560[4] {
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					yym2575 := z.EncBinary()
					_ = yym2575
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr2560 || yy2arr2560 {
				if yyq2560[5] {
					yym2577 := z.EncBinary()
					_ = yym2577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2560[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym2578 := z.EncBinary()
					_ = yym2578
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yysep2560 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2579 := z.DecBinary()
	_ = yym2579
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2580 := r.ReadMapStart()
			if yyl2580 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2580, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2580 := r.ReadArrayStart()
			if yyl2580 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2580, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2581Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2581Slc
	var yyhl2581 bool = l >= 0
	for yyj2581 := 0; ; yyj2581++ {
		if yyhl2581 {
			if yyj2581 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2581Slc = r.DecodeBytes(yys2581Slc, true, true)
		yys2581 := string(yys2581Slc)
		switch yys2581 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2581)
		} // end switch yys2581
	} // end for yyj2581
	if !yyhl2581 {
		r.ReadEnd()
	}
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2588 int
	var yyb2588 bool
	var yyhl2588 bool = l >= 0
	yyj2588++
	if yyhl2588 {
		yyb2588 = yyj2588 > l
	} else {
		yyb2588 = r.CheckBreak()
	}
	if yyb2588 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2588++
	if yyhl2588 {
		yyb2588 = yyj2588 > l
	} else {
		yyb2588 = r.CheckBreak()
	}
	if yyb2588 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2588++
	if yyhl2588 {
		yyb2588 = yyj2588 > l
	} else {
		yyb2588 = r.CheckBreak()
	}
	if yyb2588 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj2588++
	if yyhl2588 {
		yyb2588 = yyj2588 > l
	} else {
		yyb2588 = r.CheckBreak()
	}
	if yyb2588 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj2588++
	if yyhl2588 {
		yyb2588 = yyj2588 > l
	} else {
		yyb2588 = r.CheckBreak()
	}
	if yyb2588 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj2588++
	if yyhl2588 {
		yyb2588 = yyj2588 > l
	} else {
		yyb2588 = r.CheckBreak()
	}
	if yyb2588 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	for {
		yyj2588++
		if yyhl2588 {
			yyb2588 = yyj2588 > l
		} else {
			yyb2588 = r.CheckBreak()
		}
		if yyb2588 {
			break
		}
		z.DecStructFieldNotFound(yyj2588-1, "")
	}
	r.ReadEnd()
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2595 := z.EncBinary()
		_ = yym2595
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2596 := !z.EncBinary()
			yy2arr2596 := z.EncBasicHandle().StructToArray
			var yyq2596 [10]bool
			_, _, _ = yysep2596, yyq2596, yy2arr2596
			const yyr2596 bool = false
			yyq2596[0] = x.Kind != ""
			yyq2596[1] = x.APIVersion != ""
			yyq2596[2] = x.Container != ""
			yyq2596[3] = x.Follow != false
			yyq2596[4] = x.Previous != false
			yyq2596[5] = x.SinceSeconds != nil
			yyq2596[6] = x.SinceTime != nil
			yyq2596[7] = x.Timestamps != false
			yyq2596[8] = x.TailLines != nil
			yyq2596[9] = x.LimitBytes != nil
			if yyr2596 || yy2arr2596 {
				r.EncodeArrayStart(10)
			} else {
				var yynn2596 int = 0
				for _, b := range yyq2596 {
					if b {
						yynn2596++
					}
				}
				r.EncodeMapStart(yynn2596)
			}
			if yyr2596 || yy2arr2596 {
				if yyq2596[0] {
					yym2598 := z.EncBinary()
					_ = yym2598
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2596[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2599 := z.EncBinary()
					_ = yym2599
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2596 || yy2arr2596 {
				if yyq2596[1] {
					yym2601 := z.EncBinary()
					_ = yym2601
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2596[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2602 := z.EncBinary()
					_ = yym2602
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2596 || yy2arr2596 {
				if yyq2596[2] {
					yym2604 := z.EncBinary()
					_ = yym2604
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2596[2] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2605 := z.EncBinary()
					_ = yym2605
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2596 || yy2arr2596 {
				if yyq2596[3] {
					yym2607 := z.EncBinary()
					_ = yym2607
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2596[3] {
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					yym2608 := z.EncBinary()
					_ = yym2608
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr2596 || yy2arr2596 {
				if yyq2596[4] {
					yym2610 := z.EncBinary()
					_ = yym2610
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2596[4] {
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					yym2611 := z.EncBinary()
					_ = yym2611
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yyr2596 || yy2arr2596 {
				if yyq2596[5] {
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy2613 := *x.SinceSeconds
						yym2614 := z.EncBinary()
						_ = yym2614
						if false {
						} else {
							r.EncodeInt(int64(yy2613))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2596[5] {
					r.EncodeString(codecSelferC_UTF81234, string("sinceSeconds"))
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy2615 := *x.SinceSeconds
						yym2616 := z.EncBinary()
						_ = yym2616
						if false {
						} else {
							r.EncodeInt(int64(yy2615))
						}
					}
				}
			}
			if yyr2596 || yy2arr2596 {
				if yyq2596[6] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym2618 := z.EncBinary()
						_ = yym2618
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym2618 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym2618 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2596[6] {
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym2619 := z.EncBinary()
						_ = yym2619
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym2619 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym2619 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr2596 || yy2arr2596 {
				if yyq2596[7] {
					yym2621 := z.EncBinary()
					_ = yym2621
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2596[7] {
					r.EncodeString(codecSelferC_UTF81234, string("timestamps"))
					yym2622 := z.EncBinary()
					_ = yym2622
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				}
			}
			if yyr2596 || yy2arr2596 {
				if yyq2596[8] {
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy2624 := *x.TailLines
						yym2625 := z.EncBinary()
						_ = yym2625
						if false {
						} else {
							r.EncodeInt(int64(yy2624))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2596[8] {
					r.EncodeString(codecSelferC_UTF81234, string("tailLines"))
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy2626 := *x.TailLines
						yym2627 := z.EncBinary()
						_ = yym2627
						if false {
						} else {
							r.EncodeInt(int64(yy2626))
						}
					}
				}
			}
			if yyr2596 || yy2arr2596 {
				if yyq2596[9] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy2629 := *x.LimitBytes
						yym2630 := z.EncBinary()
						_ = yym2630
						if false {
						} else {
							r.EncodeInt(int64(yy2629))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2596[9] {
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy2631 := *x.LimitBytes
						yym2632 := z.EncBinary()
						_ = yym2632
						if false {
						} else {
							r.EncodeInt(int64(yy2631))
						}
					}
				}
			}
			if yysep2596 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2633 := z.DecBinary()
	_ = yym2633
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2634 := r.ReadMapStart()
			if yyl2634 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2634, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2634 := r.ReadArrayStart()
			if yyl2634 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2634, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2635Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2635Slc
	var yyhl2635 bool = l >= 0
	for yyj2635 := 0; ; yyj2635++ {
		if yyhl2635 {
			if yyj2635 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2635Slc = r.DecodeBytes(yys2635Slc, true, true)
		yys2635 := string(yys2635Slc)
		switch yys2635 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "sinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym2642 := z.DecBinary()
				_ = yym2642
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym2644 := z.DecBinary()
				_ = yym2644
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym2644 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym2644 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "tailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym2647 := z.DecBinary()
				_ = yym2647
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym2649 := z.DecBinary()
				_ = yym2649
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2635)
		} // end switch yys2635
	} // end for yyj2635
	if !yyhl2635 {
		r.ReadEnd()
	}
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2650 int
	var yyb2650 bool
	var yyhl2650 bool = l >= 0
	yyj2650++
	if yyhl2650 {
		yyb2650 = yyj2650 > l
	} else {
		yyb2650 = r.CheckBreak()
	}
	if yyb2650 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2650++
	if yyhl2650 {
		yyb2650 = yyj2650 > l
	} else {
		yyb2650 = r.CheckBreak()
	}
	if yyb2650 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2650++
	if yyhl2650 {
		yyb2650 = yyj2650 > l
	} else {
		yyb2650 = r.CheckBreak()
	}
	if yyb2650 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2650++
	if yyhl2650 {
		yyb2650 = yyj2650 > l
	} else {
		yyb2650 = r.CheckBreak()
	}
	if yyb2650 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj2650++
	if yyhl2650 {
		yyb2650 = yyj2650 > l
	} else {
		yyb2650 = r.CheckBreak()
	}
	if yyb2650 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj2650++
	if yyhl2650 {
		yyb2650 = yyj2650 > l
	} else {
		yyb2650 = r.CheckBreak()
	}
	if yyb2650 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym2657 := z.DecBinary()
		_ = yym2657
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2650++
	if yyhl2650 {
		yyb2650 = yyj2650 > l
	} else {
		yyb2650 = r.CheckBreak()
	}
	if yyb2650 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym2659 := z.DecBinary()
		_ = yym2659
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym2659 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym2659 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj2650++
	if yyhl2650 {
		yyb2650 = yyj2650 > l
	} else {
		yyb2650 = r.CheckBreak()
	}
	if yyb2650 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj2650++
	if yyhl2650 {
		yyb2650 = yyj2650 > l
	} else {
		yyb2650 = r.CheckBreak()
	}
	if yyb2650 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym2662 := z.DecBinary()
		_ = yym2662
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj2650++
	if yyhl2650 {
		yyb2650 = yyj2650 > l
	} else {
		yyb2650 = r.CheckBreak()
	}
	if yyb2650 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym2664 := z.DecBinary()
		_ = yym2664
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2650++
		if yyhl2650 {
			yyb2650 = yyj2650 > l
		} else {
			yyb2650 = r.CheckBreak()
		}
		if yyb2650 {
			break
		}
		z.DecStructFieldNotFound(yyj2650-1, "")
	}
	r.ReadEnd()
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2665 := z.EncBinary()
		_ = yym2665
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2666 := !z.EncBinary()
			yy2arr2666 := z.EncBasicHandle().StructToArray
			var yyq2666 [7]bool
			_, _, _ = yysep2666, yyq2666, yy2arr2666
			const yyr2666 bool = false
			yyq2666[0] = x.Kind != ""
			yyq2666[1] = x.APIVersion != ""
			yyq2666[2] = x.Stdin != false
			yyq2666[3] = x.Stdout != false
			yyq2666[4] = x.Stderr != false
			yyq2666[5] = x.TTY != false
			yyq2666[6] = x.Container != ""
			if yyr2666 || yy2arr2666 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2666 int = 0
				for _, b := range yyq2666 {
					if b {
						yynn2666++
					}
				}
				r.EncodeMapStart(yynn2666)
			}
			if yyr2666 || yy2arr2666 {
				if yyq2666[0] {
					yym2668 := z.EncBinary()
					_ = yym2668
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2666[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2669 := z.EncBinary()
					_ = yym2669
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2666 || yy2arr2666 {
				if yyq2666[1] {
					yym2671 := z.EncBinary()
					_ = yym2671
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2666[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2672 := z.EncBinary()
					_ = yym2672
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2666 || yy2arr2666 {
				if yyq2666[2] {
					yym2674 := z.EncBinary()
					_ = yym2674
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2666[2] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym2675 := z.EncBinary()
					_ = yym2675
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2666 || yy2arr2666 {
				if yyq2666[3] {
					yym2677 := z.EncBinary()
					_ = yym2677
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2666[3] {
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					yym2678 := z.EncBinary()
					_ = yym2678
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2666 || yy2arr2666 {
				if yyq2666[4] {
					yym2680 := z.EncBinary()
					_ = yym2680
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2666[4] {
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					yym2681 := z.EncBinary()
					_ = yym2681
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2666 || yy2arr2666 {
				if yyq2666[5] {
					yym2683 := z.EncBinary()
					_ = yym2683
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2666[5] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym2684 := z.EncBinary()
					_ = yym2684
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2666 || yy2arr2666 {
				if yyq2666[6] {
					yym2686 := z.EncBinary()
					_ = yym2686
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2666[6] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2687 := z.EncBinary()
					_ = yym2687
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yysep2666 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2688 := z.DecBinary()
	_ = yym2688
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2689 := r.ReadMapStart()
			if yyl2689 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2689, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2689 := r.ReadArrayStart()
			if yyl2689 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2689, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2690Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2690Slc
	var yyhl2690 bool = l >= 0
	for yyj2690 := 0; ; yyj2690++ {
		if yyhl2690 {
			if yyj2690 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2690Slc = r.DecodeBytes(yys2690Slc, true, true)
		yys2690 := string(yys2690Slc)
		switch yys2690 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2690)
		} // end switch yys2690
	} // end for yyj2690
	if !yyhl2690 {
		r.ReadEnd()
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2698 int
	var yyb2698 bool
	var yyhl2698 bool = l >= 0
	yyj2698++
	if yyhl2698 {
		yyb2698 = yyj2698 > l
	} else {
		yyb2698 = r.CheckBreak()
	}
	if yyb2698 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2698++
	if yyhl2698 {
		yyb2698 = yyj2698 > l
	} else {
		yyb2698 = r.CheckBreak()
	}
	if yyb2698 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2698++
	if yyhl2698 {
		yyb2698 = yyj2698 > l
	} else {
		yyb2698 = r.CheckBreak()
	}
	if yyb2698 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2698++
	if yyhl2698 {
		yyb2698 = yyj2698 > l
	} else {
		yyb2698 = r.CheckBreak()
	}
	if yyb2698 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2698++
	if yyhl2698 {
		yyb2698 = yyj2698 > l
	} else {
		yyb2698 = r.CheckBreak()
	}
	if yyb2698 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2698++
	if yyhl2698 {
		yyb2698 = yyj2698 > l
	} else {
		yyb2698 = r.CheckBreak()
	}
	if yyb2698 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2698++
	if yyhl2698 {
		yyb2698 = yyj2698 > l
	} else {
		yyb2698 = r.CheckBreak()
	}
	if yyb2698 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj2698++
		if yyhl2698 {
			yyb2698 = yyj2698 > l
		} else {
			yyb2698 = r.CheckBreak()
		}
		if yyb2698 {
			break
		}
		z.DecStructFieldNotFound(yyj2698-1, "")
	}
	r.ReadEnd()
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2706 := z.EncBinary()
		_ = yym2706
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2707 := !z.EncBinary()
			yy2arr2707 := z.EncBasicHandle().StructToArray
			var yyq2707 [8]bool
			_, _, _ = yysep2707, yyq2707, yy2arr2707
			const yyr2707 bool = false
			yyq2707[0] = x.Kind != ""
			yyq2707[1] = x.APIVersion != ""
			yyq2707[2] = x.Stdin != false
			yyq2707[3] = x.Stdout != false
			yyq2707[4] = x.Stderr != false
			yyq2707[5] = x.TTY != false
			yyq2707[6] = x.Container != ""
			if yyr2707 || yy2arr2707 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2707 int = 1
				for _, b := range yyq2707 {
					if b {
						yynn2707++
					}
				}
				r.EncodeMapStart(yynn2707)
			}
			if yyr2707 || yy2arr2707 {
				if yyq2707[0] {
					yym2709 := z.EncBinary()
					_ = yym2709
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2707[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2710 := z.EncBinary()
					_ = yym2710
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2707 || yy2arr2707 {
				if yyq2707[1] {
					yym2712 := z.EncBinary()
					_ = yym2712
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2707[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2713 := z.EncBinary()
					_ = yym2713
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2707 || yy2arr2707 {
				if yyq2707[2] {
					yym2715 := z.EncBinary()
					_ = yym2715
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2707[2] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym2716 := z.EncBinary()
					_ = yym2716
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2707 || yy2arr2707 {
				if yyq2707[3] {
					yym2718 := z.EncBinary()
					_ = yym2718
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2707[3] {
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					yym2719 := z.EncBinary()
					_ = yym2719
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2707 || yy2arr2707 {
				if yyq2707[4] {
					yym2721 := z.EncBinary()
					_ = yym2721
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2707[4] {
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					yym2722 := z.EncBinary()
					_ = yym2722
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2707 || yy2arr2707 {
				if yyq2707[5] {
					yym2724 := z.EncBinary()
					_ = yym2724
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2707[5] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym2725 := z.EncBinary()
					_ = yym2725
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2707 || yy2arr2707 {
				if yyq2707[6] {
					yym2727 := z.EncBinary()
					_ = yym2727
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2707[6] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2728 := z.EncBinary()
					_ = yym2728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2707 || yy2arr2707 {
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2730 := z.EncBinary()
					_ = yym2730
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2731 := z.EncBinary()
					_ = yym2731
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yysep2707 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2732 := z.DecBinary()
	_ = yym2732
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2733 := r.ReadMapStart()
			if yyl2733 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2733, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2733 := r.ReadArrayStart()
			if yyl2733 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2733, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2734Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2734Slc
	var yyhl2734 bool = l >= 0
	for yyj2734 := 0; ; yyj2734++ {
		if yyhl2734 {
			if yyj2734 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2734Slc = r.DecodeBytes(yys2734Slc, true, true)
		yys2734 := string(yys2734Slc)
		switch yys2734 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv2742 := &x.Command
				yym2743 := z.DecBinary()
				_ = yym2743
				if false {
				} else {
					z.F.DecSliceStringX(yyv2742, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2734)
		} // end switch yys2734
	} // end for yyj2734
	if !yyhl2734 {
		r.ReadEnd()
	}
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2744 int
	var yyb2744 bool
	var yyhl2744 bool = l >= 0
	yyj2744++
	if yyhl2744 {
		yyb2744 = yyj2744 > l
	} else {
		yyb2744 = r.CheckBreak()
	}
	if yyb2744 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2744++
	if yyhl2744 {
		yyb2744 = yyj2744 > l
	} else {
		yyb2744 = r.CheckBreak()
	}
	if yyb2744 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2744++
	if yyhl2744 {
		yyb2744 = yyj2744 > l
	} else {
		yyb2744 = r.CheckBreak()
	}
	if yyb2744 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2744++
	if yyhl2744 {
		yyb2744 = yyj2744 > l
	} else {
		yyb2744 = r.CheckBreak()
	}
	if yyb2744 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2744++
	if yyhl2744 {
		yyb2744 = yyj2744 > l
	} else {
		yyb2744 = r.CheckBreak()
	}
	if yyb2744 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2744++
	if yyhl2744 {
		yyb2744 = yyj2744 > l
	} else {
		yyb2744 = r.CheckBreak()
	}
	if yyb2744 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2744++
	if yyhl2744 {
		yyb2744 = yyj2744 > l
	} else {
		yyb2744 = r.CheckBreak()
	}
	if yyb2744 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2744++
	if yyhl2744 {
		yyb2744 = yyj2744 > l
	} else {
		yyb2744 = r.CheckBreak()
	}
	if yyb2744 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv2752 := &x.Command
		yym2753 := z.DecBinary()
		_ = yym2753
		if false {
		} else {
			z.F.DecSliceStringX(yyv2752, false, d)
		}
	}
	for {
		yyj2744++
		if yyhl2744 {
			yyb2744 = yyj2744 > l
		} else {
			yyb2744 = r.CheckBreak()
		}
		if yyb2744 {
			break
		}
		z.DecStructFieldNotFound(yyj2744-1, "")
	}
	r.ReadEnd()
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2754 := z.EncBinary()
		_ = yym2754
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2755 := !z.EncBinary()
			yy2arr2755 := z.EncBasicHandle().StructToArray
			var yyq2755 [3]bool
			_, _, _ = yysep2755, yyq2755, yy2arr2755
			const yyr2755 bool = false
			yyq2755[0] = x.Kind != ""
			yyq2755[1] = x.APIVersion != ""
			yyq2755[2] = x.Path != ""
			if yyr2755 || yy2arr2755 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2755 int = 0
				for _, b := range yyq2755 {
					if b {
						yynn2755++
					}
				}
				r.EncodeMapStart(yynn2755)
			}
			if yyr2755 || yy2arr2755 {
				if yyq2755[0] {
					yym2757 := z.EncBinary()
					_ = yym2757
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2755[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2758 := z.EncBinary()
					_ = yym2758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2755 || yy2arr2755 {
				if yyq2755[1] {
					yym2760 := z.EncBinary()
					_ = yym2760
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2755[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2761 := z.EncBinary()
					_ = yym2761
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2755 || yy2arr2755 {
				if yyq2755[2] {
					yym2763 := z.EncBinary()
					_ = yym2763
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2755[2] {
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					yym2764 := z.EncBinary()
					_ = yym2764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yysep2755 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2765 := z.DecBinary()
	_ = yym2765
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2766 := r.ReadMapStart()
			if yyl2766 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2766, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2766 := r.ReadArrayStart()
			if yyl2766 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2766, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2767Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2767Slc
	var yyhl2767 bool = l >= 0
	for yyj2767 := 0; ; yyj2767++ {
		if yyhl2767 {
			if yyj2767 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2767Slc = r.DecodeBytes(yys2767Slc, true, true)
		yys2767 := string(yys2767Slc)
		switch yys2767 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2767)
		} // end switch yys2767
	} // end for yyj2767
	if !yyhl2767 {
		r.ReadEnd()
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2771 int
	var yyb2771 bool
	var yyhl2771 bool = l >= 0
	yyj2771++
	if yyhl2771 {
		yyb2771 = yyj2771 > l
	} else {
		yyb2771 = r.CheckBreak()
	}
	if yyb2771 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2771++
	if yyhl2771 {
		yyb2771 = yyj2771 > l
	} else {
		yyb2771 = r.CheckBreak()
	}
	if yyb2771 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2771++
	if yyhl2771 {
		yyb2771 = yyj2771 > l
	} else {
		yyb2771 = r.CheckBreak()
	}
	if yyb2771 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj2771++
		if yyhl2771 {
			yyb2771 = yyj2771 > l
		} else {
			yyb2771 = r.CheckBreak()
		}
		if yyb2771 {
			break
		}
		z.DecStructFieldNotFound(yyj2771-1, "")
	}
	r.ReadEnd()
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2775 := z.EncBinary()
		_ = yym2775
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2776 := !z.EncBinary()
			yy2arr2776 := z.EncBasicHandle().StructToArray
			var yyq2776 [7]bool
			_, _, _ = yysep2776, yyq2776, yy2arr2776
			const yyr2776 bool = false
			yyq2776[0] = x.Kind != ""
			yyq2776[1] = x.Namespace != ""
			yyq2776[2] = x.Name != ""
			yyq2776[3] = x.UID != ""
			yyq2776[4] = x.APIVersion != ""
			yyq2776[5] = x.ResourceVersion != ""
			yyq2776[6] = x.FieldPath != ""
			if yyr2776 || yy2arr2776 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2776 int = 0
				for _, b := range yyq2776 {
					if b {
						yynn2776++
					}
				}
				r.EncodeMapStart(yynn2776)
			}
			if yyr2776 || yy2arr2776 {
				if yyq2776[0] {
					yym2778 := z.EncBinary()
					_ = yym2778
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2776[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2779 := z.EncBinary()
					_ = yym2779
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2776 || yy2arr2776 {
				if yyq2776[1] {
					yym2781 := z.EncBinary()
					_ = yym2781
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2776[1] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym2782 := z.EncBinary()
					_ = yym2782
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2776 || yy2arr2776 {
				if yyq2776[2] {
					yym2784 := z.EncBinary()
					_ = yym2784
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2776[2] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym2785 := z.EncBinary()
					_ = yym2785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2776 || yy2arr2776 {
				if yyq2776[3] {
					yym2787 := z.EncBinary()
					_ = yym2787
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2776[3] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym2788 := z.EncBinary()
					_ = yym2788
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2776 || yy2arr2776 {
				if yyq2776[4] {
					yym2790 := z.EncBinary()
					_ = yym2790
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2776[4] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2791 := z.EncBinary()
					_ = yym2791
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2776 || yy2arr2776 {
				if yyq2776[5] {
					yym2793 := z.EncBinary()
					_ = yym2793
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2776[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym2794 := z.EncBinary()
					_ = yym2794
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2776 || yy2arr2776 {
				if yyq2776[6] {
					yym2796 := z.EncBinary()
					_ = yym2796
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2776[6] {
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					yym2797 := z.EncBinary()
					_ = yym2797
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yysep2776 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2798 := z.DecBinary()
	_ = yym2798
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2799 := r.ReadMapStart()
			if yyl2799 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2799, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2799 := r.ReadArrayStart()
			if yyl2799 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2799, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2800Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2800Slc
	var yyhl2800 bool = l >= 0
	for yyj2800 := 0; ; yyj2800++ {
		if yyhl2800 {
			if yyj2800 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2800Slc = r.DecodeBytes(yys2800Slc, true, true)
		yys2800 := string(yys2800Slc)
		switch yys2800 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2800)
		} // end switch yys2800
	} // end for yyj2800
	if !yyhl2800 {
		r.ReadEnd()
	}
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2808 int
	var yyb2808 bool
	var yyhl2808 bool = l >= 0
	yyj2808++
	if yyhl2808 {
		yyb2808 = yyj2808 > l
	} else {
		yyb2808 = r.CheckBreak()
	}
	if yyb2808 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2808++
	if yyhl2808 {
		yyb2808 = yyj2808 > l
	} else {
		yyb2808 = r.CheckBreak()
	}
	if yyb2808 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj2808++
	if yyhl2808 {
		yyb2808 = yyj2808 > l
	} else {
		yyb2808 = r.CheckBreak()
	}
	if yyb2808 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2808++
	if yyhl2808 {
		yyb2808 = yyj2808 > l
	} else {
		yyb2808 = r.CheckBreak()
	}
	if yyb2808 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj2808++
	if yyhl2808 {
		yyb2808 = yyj2808 > l
	} else {
		yyb2808 = r.CheckBreak()
	}
	if yyb2808 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2808++
	if yyhl2808 {
		yyb2808 = yyj2808 > l
	} else {
		yyb2808 = r.CheckBreak()
	}
	if yyb2808 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2808++
	if yyhl2808 {
		yyb2808 = yyj2808 > l
	} else {
		yyb2808 = r.CheckBreak()
	}
	if yyb2808 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj2808++
		if yyhl2808 {
			yyb2808 = yyj2808 > l
		} else {
			yyb2808 = r.CheckBreak()
		}
		if yyb2808 {
			break
		}
		z.DecStructFieldNotFound(yyj2808-1, "")
	}
	r.ReadEnd()
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2816 := z.EncBinary()
		_ = yym2816
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2817 := !z.EncBinary()
			yy2arr2817 := z.EncBasicHandle().StructToArray
			var yyq2817 [1]bool
			_, _, _ = yysep2817, yyq2817, yy2arr2817
			const yyr2817 bool = false
			yyq2817[0] = x.Name != ""
			if yyr2817 || yy2arr2817 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2817 int = 0
				for _, b := range yyq2817 {
					if b {
						yynn2817++
					}
				}
				r.EncodeMapStart(yynn2817)
			}
			if yyr2817 || yy2arr2817 {
				if yyq2817[0] {
					yym2819 := z.EncBinary()
					_ = yym2819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2817[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym2820 := z.EncBinary()
					_ = yym2820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yysep2817 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2821 := z.DecBinary()
	_ = yym2821
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2822 := r.ReadMapStart()
			if yyl2822 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2822, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2822 := r.ReadArrayStart()
			if yyl2822 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2822, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2823Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2823Slc
	var yyhl2823 bool = l >= 0
	for yyj2823 := 0; ; yyj2823++ {
		if yyhl2823 {
			if yyj2823 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2823Slc = r.DecodeBytes(yys2823Slc, true, true)
		yys2823 := string(yys2823Slc)
		switch yys2823 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2823)
		} // end switch yys2823
	} // end for yyj2823
	if !yyhl2823 {
		r.ReadEnd()
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2825 int
	var yyb2825 bool
	var yyhl2825 bool = l >= 0
	yyj2825++
	if yyhl2825 {
		yyb2825 = yyj2825 > l
	} else {
		yyb2825 = r.CheckBreak()
	}
	if yyb2825 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj2825++
		if yyhl2825 {
			yyb2825 = yyj2825 > l
		} else {
			yyb2825 = r.CheckBreak()
		}
		if yyb2825 {
			break
		}
		z.DecStructFieldNotFound(yyj2825-1, "")
	}
	r.ReadEnd()
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2827 := z.EncBinary()
		_ = yym2827
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2828 := !z.EncBinary()
			yy2arr2828 := z.EncBasicHandle().StructToArray
			var yyq2828 [3]bool
			_, _, _ = yysep2828, yyq2828, yy2arr2828
			const yyr2828 bool = false
			yyq2828[0] = x.Kind != ""
			yyq2828[1] = x.APIVersion != ""
			yyq2828[2] = true
			if yyr2828 || yy2arr2828 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2828 int = 0
				for _, b := range yyq2828 {
					if b {
						yynn2828++
					}
				}
				r.EncodeMapStart(yynn2828)
			}
			if yyr2828 || yy2arr2828 {
				if yyq2828[0] {
					yym2830 := z.EncBinary()
					_ = yym2830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2828[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2831 := z.EncBinary()
					_ = yym2831
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2828 || yy2arr2828 {
				if yyq2828[1] {
					yym2833 := z.EncBinary()
					_ = yym2833
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2828[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2834 := z.EncBinary()
					_ = yym2834
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2828 || yy2arr2828 {
				if yyq2828[2] {
					yy2836 := &x.Reference
					yy2836.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2828[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					yy2837 := &x.Reference
					yy2837.CodecEncodeSelf(e)
				}
			}
			if yysep2828 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2838 := z.DecBinary()
	_ = yym2838
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2839 := r.ReadMapStart()
			if yyl2839 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2839, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2839 := r.ReadArrayStart()
			if yyl2839 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2839, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2840Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2840Slc
	var yyhl2840 bool = l >= 0
	for yyj2840 := 0; ; yyj2840++ {
		if yyhl2840 {
			if yyj2840 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2840Slc = r.DecodeBytes(yys2840Slc, true, true)
		yys2840 := string(yys2840Slc)
		switch yys2840 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv2843 := &x.Reference
				yyv2843.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2840)
		} // end switch yys2840
	} // end for yyj2840
	if !yyhl2840 {
		r.ReadEnd()
	}
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2844 int
	var yyb2844 bool
	var yyhl2844 bool = l >= 0
	yyj2844++
	if yyhl2844 {
		yyb2844 = yyj2844 > l
	} else {
		yyb2844 = r.CheckBreak()
	}
	if yyb2844 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2844++
	if yyhl2844 {
		yyb2844 = yyj2844 > l
	} else {
		yyb2844 = r.CheckBreak()
	}
	if yyb2844 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2844++
	if yyhl2844 {
		yyb2844 = yyj2844 > l
	} else {
		yyb2844 = r.CheckBreak()
	}
	if yyb2844 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv2847 := &x.Reference
		yyv2847.CodecDecodeSelf(d)
	}
	for {
		yyj2844++
		if yyhl2844 {
			yyb2844 = yyj2844 > l
		} else {
			yyb2844 = r.CheckBreak()
		}
		if yyb2844 {
			break
		}
		z.DecStructFieldNotFound(yyj2844-1, "")
	}
	r.ReadEnd()
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2848 := z.EncBinary()
		_ = yym2848
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2849 := !z.EncBinary()
			yy2arr2849 := z.EncBasicHandle().StructToArray
			var yyq2849 [2]bool
			_, _, _ = yysep2849, yyq2849, yy2arr2849
			const yyr2849 bool = false
			yyq2849[0] = x.Component != ""
			yyq2849[1] = x.Host != ""
			if yyr2849 || yy2arr2849 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2849 int = 0
				for _, b := range yyq2849 {
					if b {
						yynn2849++
					}
				}
				r.EncodeMapStart(yynn2849)
			}
			if yyr2849 || yy2arr2849 {
				if yyq2849[0] {
					yym2851 := z.EncBinary()
					_ = yym2851
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2849[0] {
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					yym2852 := z.EncBinary()
					_ = yym2852
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr2849 || yy2arr2849 {
				if yyq2849[1] {
					yym2854 := z.EncBinary()
					_ = yym2854
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2849[1] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym2855 := z.EncBinary()
					_ = yym2855
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yysep2849 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2856 := z.DecBinary()
	_ = yym2856
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2857 := r.ReadMapStart()
			if yyl2857 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2857, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2857 := r.ReadArrayStart()
			if yyl2857 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2857, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2858Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2858Slc
	var yyhl2858 bool = l >= 0
	for yyj2858 := 0; ; yyj2858++ {
		if yyhl2858 {
			if yyj2858 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2858Slc = r.DecodeBytes(yys2858Slc, true, true)
		yys2858 := string(yys2858Slc)
		switch yys2858 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2858)
		} // end switch yys2858
	} // end for yyj2858
	if !yyhl2858 {
		r.ReadEnd()
	}
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2861 int
	var yyb2861 bool
	var yyhl2861 bool = l >= 0
	yyj2861++
	if yyhl2861 {
		yyb2861 = yyj2861 > l
	} else {
		yyb2861 = r.CheckBreak()
	}
	if yyb2861 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj2861++
	if yyhl2861 {
		yyb2861 = yyj2861 > l
	} else {
		yyb2861 = r.CheckBreak()
	}
	if yyb2861 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj2861++
		if yyhl2861 {
			yyb2861 = yyj2861 > l
		} else {
			yyb2861 = r.CheckBreak()
		}
		if yyb2861 {
			break
		}
		z.DecStructFieldNotFound(yyj2861-1, "")
	}
	r.ReadEnd()
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2864 := z.EncBinary()
		_ = yym2864
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2865 := !z.EncBinary()
			yy2arr2865 := z.EncBasicHandle().StructToArray
			var yyq2865 [10]bool
			_, _, _ = yysep2865, yyq2865, yy2arr2865
			const yyr2865 bool = false
			yyq2865[0] = x.Kind != ""
			yyq2865[1] = x.APIVersion != ""
			yyq2865[4] = x.Reason != ""
			yyq2865[5] = x.Message != ""
			yyq2865[6] = true
			yyq2865[7] = true
			yyq2865[8] = true
			yyq2865[9] = x.Count != 0
			if yyr2865 || yy2arr2865 {
				r.EncodeArrayStart(10)
			} else {
				var yynn2865 int = 2
				for _, b := range yyq2865 {
					if b {
						yynn2865++
					}
				}
				r.EncodeMapStart(yynn2865)
			}
			if yyr2865 || yy2arr2865 {
				if yyq2865[0] {
					yym2867 := z.EncBinary()
					_ = yym2867
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2865[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2868 := z.EncBinary()
					_ = yym2868
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2865 || yy2arr2865 {
				if yyq2865[1] {
					yym2870 := z.EncBinary()
					_ = yym2870
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2865[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2871 := z.EncBinary()
					_ = yym2871
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2865 || yy2arr2865 {
				yy2873 := &x.ObjectMeta
				yy2873.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				yy2874 := &x.ObjectMeta
				yy2874.CodecEncodeSelf(e)
			}
			if yyr2865 || yy2arr2865 {
				yy2876 := &x.InvolvedObject
				yy2876.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				yy2877 := &x.InvolvedObject
				yy2877.CodecEncodeSelf(e)
			}
			if yyr2865 || yy2arr2865 {
				if yyq2865[4] {
					yym2879 := z.EncBinary()
					_ = yym2879
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2865[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym2880 := z.EncBinary()
					_ = yym2880
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2865 || yy2arr2865 {
				if yyq2865[5] {
					yym2882 := z.EncBinary()
					_ = yym2882
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2865[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym2883 := z.EncBinary()
					_ = yym2883
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2865 || yy2arr2865 {
				if yyq2865[6] {
					yy2885 := &x.Source
					yy2885.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2865[6] {
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					yy2886 := &x.Source
					yy2886.CodecEncodeSelf(e)
				}
			}
			if yyr2865 || yy2arr2865 {
				if yyq2865[7] {
					yy2888 := &x.FirstTimestamp
					yym2889 := z.EncBinary()
					_ = yym2889
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2888) {
					} else if yym2889 {
						z.EncBinaryMarshal(yy2888)
					} else if !yym2889 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2888)
					} else {
						z.EncFallback(yy2888)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2865[7] {
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					yy2890 := &x.FirstTimestamp
					yym2891 := z.EncBinary()
					_ = yym2891
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2890) {
					} else if yym2891 {
						z.EncBinaryMarshal(yy2890)
					} else if !yym2891 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2890)
					} else {
						z.EncFallback(yy2890)
					}
				}
			}
			if yyr2865 || yy2arr2865 {
				if yyq2865[8] {
					yy2893 := &x.LastTimestamp
					yym2894 := z.EncBinary()
					_ = yym2894
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2893) {
					} else if yym2894 {
						z.EncBinaryMarshal(yy2893)
					} else if !yym2894 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2893)
					} else {
						z.EncFallback(yy2893)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2865[8] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					yy2895 := &x.LastTimestamp
					yym2896 := z.EncBinary()
					_ = yym2896
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2895) {
					} else if yym2896 {
						z.EncBinaryMarshal(yy2895)
					} else if !yym2896 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2895)
					} else {
						z.EncFallback(yy2895)
					}
				}
			}
			if yyr2865 || yy2arr2865 {
				if yyq2865[9] {
					yym2898 := z.EncBinary()
					_ = yym2898
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2865[9] {
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					yym2899 := z.EncBinary()
					_ = yym2899
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yysep2865 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2900 := z.DecBinary()
	_ = yym2900
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2901 := r.ReadMapStart()
			if yyl2901 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2901, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2901 := r.ReadArrayStart()
			if yyl2901 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2901, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2902Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2902Slc
	var yyhl2902 bool = l >= 0
	for yyj2902 := 0; ; yyj2902++ {
		if yyhl2902 {
			if yyj2902 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2902Slc = r.DecodeBytes(yys2902Slc, true, true)
		yys2902 := string(yys2902Slc)
		switch yys2902 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2905 := &x.ObjectMeta
				yyv2905.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv2906 := &x.InvolvedObject
				yyv2906.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv2909 := &x.Source
				yyv2909.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2910 := &x.FirstTimestamp
				yym2911 := z.DecBinary()
				_ = yym2911
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2910) {
				} else if yym2911 {
					z.DecBinaryUnmarshal(yyv2910)
				} else if !yym2911 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2910)
				} else {
					z.DecFallback(yyv2910, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2912 := &x.LastTimestamp
				yym2913 := z.DecBinary()
				_ = yym2913
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2912) {
				} else if yym2913 {
					z.DecBinaryUnmarshal(yyv2912)
				} else if !yym2913 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2912)
				} else {
					z.DecFallback(yyv2912, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2902)
		} // end switch yys2902
	} // end for yyj2902
	if !yyhl2902 {
		r.ReadEnd()
	}
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2915 int
	var yyb2915 bool
	var yyhl2915 bool = l >= 0
	yyj2915++
	if yyhl2915 {
		yyb2915 = yyj2915 > l
	} else {
		yyb2915 = r.CheckBreak()
	}
	if yyb2915 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2915++
	if yyhl2915 {
		yyb2915 = yyj2915 > l
	} else {
		yyb2915 = r.CheckBreak()
	}
	if yyb2915 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2915++
	if yyhl2915 {
		yyb2915 = yyj2915 > l
	} else {
		yyb2915 = r.CheckBreak()
	}
	if yyb2915 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2918 := &x.ObjectMeta
		yyv2918.CodecDecodeSelf(d)
	}
	yyj2915++
	if yyhl2915 {
		yyb2915 = yyj2915 > l
	} else {
		yyb2915 = r.CheckBreak()
	}
	if yyb2915 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv2919 := &x.InvolvedObject
		yyv2919.CodecDecodeSelf(d)
	}
	yyj2915++
	if yyhl2915 {
		yyb2915 = yyj2915 > l
	} else {
		yyb2915 = r.CheckBreak()
	}
	if yyb2915 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2915++
	if yyhl2915 {
		yyb2915 = yyj2915 > l
	} else {
		yyb2915 = r.CheckBreak()
	}
	if yyb2915 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2915++
	if yyhl2915 {
		yyb2915 = yyj2915 > l
	} else {
		yyb2915 = r.CheckBreak()
	}
	if yyb2915 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv2922 := &x.Source
		yyv2922.CodecDecodeSelf(d)
	}
	yyj2915++
	if yyhl2915 {
		yyb2915 = yyj2915 > l
	} else {
		yyb2915 = r.CheckBreak()
	}
	if yyb2915 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2923 := &x.FirstTimestamp
		yym2924 := z.DecBinary()
		_ = yym2924
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2923) {
		} else if yym2924 {
			z.DecBinaryUnmarshal(yyv2923)
		} else if !yym2924 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2923)
		} else {
			z.DecFallback(yyv2923, false)
		}
	}
	yyj2915++
	if yyhl2915 {
		yyb2915 = yyj2915 > l
	} else {
		yyb2915 = r.CheckBreak()
	}
	if yyb2915 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2925 := &x.LastTimestamp
		yym2926 := z.DecBinary()
		_ = yym2926
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2925) {
		} else if yym2926 {
			z.DecBinaryUnmarshal(yyv2925)
		} else if !yym2926 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2925)
		} else {
			z.DecFallback(yyv2925, false)
		}
	}
	yyj2915++
	if yyhl2915 {
		yyb2915 = yyj2915 > l
	} else {
		yyb2915 = r.CheckBreak()
	}
	if yyb2915 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2915++
		if yyhl2915 {
			yyb2915 = yyj2915 > l
		} else {
			yyb2915 = r.CheckBreak()
		}
		if yyb2915 {
			break
		}
		z.DecStructFieldNotFound(yyj2915-1, "")
	}
	r.ReadEnd()
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2928 := z.EncBinary()
		_ = yym2928
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2929 := !z.EncBinary()
			yy2arr2929 := z.EncBasicHandle().StructToArray
			var yyq2929 [4]bool
			_, _, _ = yysep2929, yyq2929, yy2arr2929
			const yyr2929 bool = false
			yyq2929[0] = x.Kind != ""
			yyq2929[1] = x.APIVersion != ""
			yyq2929[2] = true
			if yyr2929 || yy2arr2929 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2929 int = 1
				for _, b := range yyq2929 {
					if b {
						yynn2929++
					}
				}
				r.EncodeMapStart(yynn2929)
			}
			if yyr2929 || yy2arr2929 {
				if yyq2929[0] {
					yym2931 := z.EncBinary()
					_ = yym2931
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2929[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2932 := z.EncBinary()
					_ = yym2932
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2929 || yy2arr2929 {
				if yyq2929[1] {
					yym2934 := z.EncBinary()
					_ = yym2934
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2929[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2935 := z.EncBinary()
					_ = yym2935
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2929 || yy2arr2929 {
				if yyq2929[2] {
					yy2937 := &x.ListMeta
					yym2938 := z.EncBinary()
					_ = yym2938
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2937) {
					} else {
						z.EncFallback(yy2937)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2929[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2939 := &x.ListMeta
					yym2940 := z.EncBinary()
					_ = yym2940
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2939) {
					} else {
						z.EncFallback(yy2939)
					}
				}
			}
			if yyr2929 || yy2arr2929 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2942 := z.EncBinary()
					_ = yym2942
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2943 := z.EncBinary()
					_ = yym2943
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yysep2929 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2944 := z.DecBinary()
	_ = yym2944
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2945 := r.ReadMapStart()
			if yyl2945 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2945, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2945 := r.ReadArrayStart()
			if yyl2945 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2945, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2946Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2946Slc
	var yyhl2946 bool = l >= 0
	for yyj2946 := 0; ; yyj2946++ {
		if yyhl2946 {
			if yyj2946 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2946Slc = r.DecodeBytes(yys2946Slc, true, true)
		yys2946 := string(yys2946Slc)
		switch yys2946 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2949 := &x.ListMeta
				yym2950 := z.DecBinary()
				_ = yym2950
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2949) {
				} else {
					z.DecFallback(yyv2949, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2951 := &x.Items
				yym2952 := z.DecBinary()
				_ = yym2952
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv2951), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2946)
		} // end switch yys2946
	} // end for yyj2946
	if !yyhl2946 {
		r.ReadEnd()
	}
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2953 int
	var yyb2953 bool
	var yyhl2953 bool = l >= 0
	yyj2953++
	if yyhl2953 {
		yyb2953 = yyj2953 > l
	} else {
		yyb2953 = r.CheckBreak()
	}
	if yyb2953 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2953++
	if yyhl2953 {
		yyb2953 = yyj2953 > l
	} else {
		yyb2953 = r.CheckBreak()
	}
	if yyb2953 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2953++
	if yyhl2953 {
		yyb2953 = yyj2953 > l
	} else {
		yyb2953 = r.CheckBreak()
	}
	if yyb2953 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2956 := &x.ListMeta
		yym2957 := z.DecBinary()
		_ = yym2957
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2956) {
		} else {
			z.DecFallback(yyv2956, false)
		}
	}
	yyj2953++
	if yyhl2953 {
		yyb2953 = yyj2953 > l
	} else {
		yyb2953 = r.CheckBreak()
	}
	if yyb2953 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2958 := &x.Items
		yym2959 := z.DecBinary()
		_ = yym2959
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv2958), d)
		}
	}
	for {
		yyj2953++
		if yyhl2953 {
			yyb2953 = yyj2953 > l
		} else {
			yyb2953 = r.CheckBreak()
		}
		if yyb2953 {
			break
		}
		z.DecStructFieldNotFound(yyj2953-1, "")
	}
	r.ReadEnd()
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2960 := z.EncBinary()
		_ = yym2960
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2961 := !z.EncBinary()
			yy2arr2961 := z.EncBasicHandle().StructToArray
			var yyq2961 [4]bool
			_, _, _ = yysep2961, yyq2961, yy2arr2961
			const yyr2961 bool = false
			yyq2961[0] = x.Kind != ""
			yyq2961[1] = x.APIVersion != ""
			yyq2961[2] = true
			if yyr2961 || yy2arr2961 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2961 int = 1
				for _, b := range yyq2961 {
					if b {
						yynn2961++
					}
				}
				r.EncodeMapStart(yynn2961)
			}
			if yyr2961 || yy2arr2961 {
				if yyq2961[0] {
					yym2963 := z.EncBinary()
					_ = yym2963
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2961[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2964 := z.EncBinary()
					_ = yym2964
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2961 || yy2arr2961 {
				if yyq2961[1] {
					yym2966 := z.EncBinary()
					_ = yym2966
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2961[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2967 := z.EncBinary()
					_ = yym2967
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2961 || yy2arr2961 {
				if yyq2961[2] {
					yy2969 := &x.ListMeta
					yym2970 := z.EncBinary()
					_ = yym2970
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2969) {
					} else {
						z.EncFallback(yy2969)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2961[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2971 := &x.ListMeta
					yym2972 := z.EncBinary()
					_ = yym2972
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2971) {
					} else {
						z.EncFallback(yy2971)
					}
				}
			}
			if yyr2961 || yy2arr2961 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2974 := z.EncBinary()
					_ = yym2974
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg6_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2975 := z.EncBinary()
					_ = yym2975
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg6_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yysep2961 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2976 := z.DecBinary()
	_ = yym2976
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2977 := r.ReadMapStart()
			if yyl2977 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2977, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2977 := r.ReadArrayStart()
			if yyl2977 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2977, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2978Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2978Slc
	var yyhl2978 bool = l >= 0
	for yyj2978 := 0; ; yyj2978++ {
		if yyhl2978 {
			if yyj2978 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2978Slc = r.DecodeBytes(yys2978Slc, true, true)
		yys2978 := string(yys2978Slc)
		switch yys2978 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2981 := &x.ListMeta
				yym2982 := z.DecBinary()
				_ = yym2982
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2981) {
				} else {
					z.DecFallback(yyv2981, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2983 := &x.Items
				yym2984 := z.DecBinary()
				_ = yym2984
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg6_runtime.RawExtension)(yyv2983), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2978)
		} // end switch yys2978
	} // end for yyj2978
	if !yyhl2978 {
		r.ReadEnd()
	}
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2985 int
	var yyb2985 bool
	var yyhl2985 bool = l >= 0
	yyj2985++
	if yyhl2985 {
		yyb2985 = yyj2985 > l
	} else {
		yyb2985 = r.CheckBreak()
	}
	if yyb2985 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2985++
	if yyhl2985 {
		yyb2985 = yyj2985 > l
	} else {
		yyb2985 = r.CheckBreak()
	}
	if yyb2985 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2985++
	if yyhl2985 {
		yyb2985 = yyj2985 > l
	} else {
		yyb2985 = r.CheckBreak()
	}
	if yyb2985 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2988 := &x.ListMeta
		yym2989 := z.DecBinary()
		_ = yym2989
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2988) {
		} else {
			z.DecFallback(yyv2988, false)
		}
	}
	yyj2985++
	if yyhl2985 {
		yyb2985 = yyj2985 > l
	} else {
		yyb2985 = r.CheckBreak()
	}
	if yyb2985 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2990 := &x.Items
		yym2991 := z.DecBinary()
		_ = yym2991
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg6_runtime.RawExtension)(yyv2990), d)
		}
	}
	for {
		yyj2985++
		if yyhl2985 {
			yyb2985 = yyj2985 > l
		} else {
			yyb2985 = r.CheckBreak()
		}
		if yyb2985 {
			break
		}
		z.DecStructFieldNotFound(yyj2985-1, "")
	}
	r.ReadEnd()
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2992 := z.EncBinary()
	_ = yym2992
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2993 := z.DecBinary()
	_ = yym2993
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2994 := z.EncBinary()
		_ = yym2994
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2995 := !z.EncBinary()
			yy2arr2995 := z.EncBasicHandle().StructToArray
			var yyq2995 [6]bool
			_, _, _ = yysep2995, yyq2995, yy2arr2995
			const yyr2995 bool = false
			yyq2995[0] = x.Type != ""
			yyq2995[1] = len(x.Max) != 0
			yyq2995[2] = len(x.Min) != 0
			yyq2995[3] = len(x.Default) != 0
			yyq2995[4] = len(x.DefaultRequest) != 0
			yyq2995[5] = len(x.MaxLimitRequestRatio) != 0
			if yyr2995 || yy2arr2995 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2995 int = 0
				for _, b := range yyq2995 {
					if b {
						yynn2995++
					}
				}
				r.EncodeMapStart(yynn2995)
			}
			if yyr2995 || yy2arr2995 {
				if yyq2995[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2995[0] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2995 || yy2arr2995 {
				if yyq2995[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2995[1] {
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2995 || yy2arr2995 {
				if yyq2995[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2995[2] {
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2995 || yy2arr2995 {
				if yyq2995[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2995[3] {
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2995 || yy2arr2995 {
				if yyq2995[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2995[4] {
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2995 || yy2arr2995 {
				if yyq2995[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2995[5] {
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yysep2995 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3002 := z.DecBinary()
	_ = yym3002
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3003 := r.ReadMapStart()
			if yyl3003 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3003, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3003 := r.ReadArrayStart()
			if yyl3003 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3003, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3004Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3004Slc
	var yyhl3004 bool = l >= 0
	for yyj3004 := 0; ; yyj3004++ {
		if yyhl3004 {
			if yyj3004 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3004Slc = r.DecodeBytes(yys3004Slc, true, true)
		yys3004 := string(yys3004Slc)
		switch yys3004 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3006 := &x.Max
				yyv3006.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3007 := &x.Min
				yyv3007.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3008 := &x.Default
				yyv3008.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3009 := &x.DefaultRequest
				yyv3009.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3010 := &x.MaxLimitRequestRatio
				yyv3010.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3004)
		} // end switch yys3004
	} // end for yyj3004
	if !yyhl3004 {
		r.ReadEnd()
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3011 int
	var yyb3011 bool
	var yyhl3011 bool = l >= 0
	yyj3011++
	if yyhl3011 {
		yyb3011 = yyj3011 > l
	} else {
		yyb3011 = r.CheckBreak()
	}
	if yyb3011 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3011++
	if yyhl3011 {
		yyb3011 = yyj3011 > l
	} else {
		yyb3011 = r.CheckBreak()
	}
	if yyb3011 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3013 := &x.Max
		yyv3013.CodecDecodeSelf(d)
	}
	yyj3011++
	if yyhl3011 {
		yyb3011 = yyj3011 > l
	} else {
		yyb3011 = r.CheckBreak()
	}
	if yyb3011 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3014 := &x.Min
		yyv3014.CodecDecodeSelf(d)
	}
	yyj3011++
	if yyhl3011 {
		yyb3011 = yyj3011 > l
	} else {
		yyb3011 = r.CheckBreak()
	}
	if yyb3011 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3015 := &x.Default
		yyv3015.CodecDecodeSelf(d)
	}
	yyj3011++
	if yyhl3011 {
		yyb3011 = yyj3011 > l
	} else {
		yyb3011 = r.CheckBreak()
	}
	if yyb3011 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3016 := &x.DefaultRequest
		yyv3016.CodecDecodeSelf(d)
	}
	yyj3011++
	if yyhl3011 {
		yyb3011 = yyj3011 > l
	} else {
		yyb3011 = r.CheckBreak()
	}
	if yyb3011 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3017 := &x.MaxLimitRequestRatio
		yyv3017.CodecDecodeSelf(d)
	}
	for {
		yyj3011++
		if yyhl3011 {
			yyb3011 = yyj3011 > l
		} else {
			yyb3011 = r.CheckBreak()
		}
		if yyb3011 {
			break
		}
		z.DecStructFieldNotFound(yyj3011-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3018 := z.EncBinary()
		_ = yym3018
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3019 := !z.EncBinary()
			yy2arr3019 := z.EncBasicHandle().StructToArray
			var yyq3019 [1]bool
			_, _, _ = yysep3019, yyq3019, yy2arr3019
			const yyr3019 bool = false
			if yyr3019 || yy2arr3019 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3019 int = 1
				for _, b := range yyq3019 {
					if b {
						yynn3019++
					}
				}
				r.EncodeMapStart(yynn3019)
			}
			if yyr3019 || yy2arr3019 {
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3021 := z.EncBinary()
					_ = yym3021
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3022 := z.EncBinary()
					_ = yym3022
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yysep3019 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3023 := z.DecBinary()
	_ = yym3023
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3024 := r.ReadMapStart()
			if yyl3024 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3024, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3024 := r.ReadArrayStart()
			if yyl3024 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3024, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3025Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3025Slc
	var yyhl3025 bool = l >= 0
	for yyj3025 := 0; ; yyj3025++ {
		if yyhl3025 {
			if yyj3025 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3025Slc = r.DecodeBytes(yys3025Slc, true, true)
		yys3025 := string(yys3025Slc)
		switch yys3025 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3026 := &x.Limits
				yym3027 := z.DecBinary()
				_ = yym3027
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3026), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3025)
		} // end switch yys3025
	} // end for yyj3025
	if !yyhl3025 {
		r.ReadEnd()
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3028 int
	var yyb3028 bool
	var yyhl3028 bool = l >= 0
	yyj3028++
	if yyhl3028 {
		yyb3028 = yyj3028 > l
	} else {
		yyb3028 = r.CheckBreak()
	}
	if yyb3028 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3029 := &x.Limits
		yym3030 := z.DecBinary()
		_ = yym3030
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3029), d)
		}
	}
	for {
		yyj3028++
		if yyhl3028 {
			yyb3028 = yyj3028 > l
		} else {
			yyb3028 = r.CheckBreak()
		}
		if yyb3028 {
			break
		}
		z.DecStructFieldNotFound(yyj3028-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3031 := z.EncBinary()
		_ = yym3031
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3032 := !z.EncBinary()
			yy2arr3032 := z.EncBasicHandle().StructToArray
			var yyq3032 [4]bool
			_, _, _ = yysep3032, yyq3032, yy2arr3032
			const yyr3032 bool = false
			yyq3032[0] = x.Kind != ""
			yyq3032[1] = x.APIVersion != ""
			yyq3032[2] = true
			yyq3032[3] = true
			if yyr3032 || yy2arr3032 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3032 int = 0
				for _, b := range yyq3032 {
					if b {
						yynn3032++
					}
				}
				r.EncodeMapStart(yynn3032)
			}
			if yyr3032 || yy2arr3032 {
				if yyq3032[0] {
					yym3034 := z.EncBinary()
					_ = yym3034
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3032[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3035 := z.EncBinary()
					_ = yym3035
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3032 || yy2arr3032 {
				if yyq3032[1] {
					yym3037 := z.EncBinary()
					_ = yym3037
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3032[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3038 := z.EncBinary()
					_ = yym3038
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3032 || yy2arr3032 {
				if yyq3032[2] {
					yy3040 := &x.ObjectMeta
					yy3040.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3032[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3041 := &x.ObjectMeta
					yy3041.CodecEncodeSelf(e)
				}
			}
			if yyr3032 || yy2arr3032 {
				if yyq3032[3] {
					yy3043 := &x.Spec
					yy3043.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3032[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy3044 := &x.Spec
					yy3044.CodecEncodeSelf(e)
				}
			}
			if yysep3032 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3045 := z.DecBinary()
	_ = yym3045
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3046 := r.ReadMapStart()
			if yyl3046 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3046, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3046 := r.ReadArrayStart()
			if yyl3046 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3046, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3047Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3047Slc
	var yyhl3047 bool = l >= 0
	for yyj3047 := 0; ; yyj3047++ {
		if yyhl3047 {
			if yyj3047 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3047Slc = r.DecodeBytes(yys3047Slc, true, true)
		yys3047 := string(yys3047Slc)
		switch yys3047 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3050 := &x.ObjectMeta
				yyv3050.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3051 := &x.Spec
				yyv3051.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3047)
		} // end switch yys3047
	} // end for yyj3047
	if !yyhl3047 {
		r.ReadEnd()
	}
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3052 int
	var yyb3052 bool
	var yyhl3052 bool = l >= 0
	yyj3052++
	if yyhl3052 {
		yyb3052 = yyj3052 > l
	} else {
		yyb3052 = r.CheckBreak()
	}
	if yyb3052 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3052++
	if yyhl3052 {
		yyb3052 = yyj3052 > l
	} else {
		yyb3052 = r.CheckBreak()
	}
	if yyb3052 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3052++
	if yyhl3052 {
		yyb3052 = yyj3052 > l
	} else {
		yyb3052 = r.CheckBreak()
	}
	if yyb3052 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3055 := &x.ObjectMeta
		yyv3055.CodecDecodeSelf(d)
	}
	yyj3052++
	if yyhl3052 {
		yyb3052 = yyj3052 > l
	} else {
		yyb3052 = r.CheckBreak()
	}
	if yyb3052 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3056 := &x.Spec
		yyv3056.CodecDecodeSelf(d)
	}
	for {
		yyj3052++
		if yyhl3052 {
			yyb3052 = yyj3052 > l
		} else {
			yyb3052 = r.CheckBreak()
		}
		if yyb3052 {
			break
		}
		z.DecStructFieldNotFound(yyj3052-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3057 := z.EncBinary()
		_ = yym3057
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3058 := !z.EncBinary()
			yy2arr3058 := z.EncBasicHandle().StructToArray
			var yyq3058 [4]bool
			_, _, _ = yysep3058, yyq3058, yy2arr3058
			const yyr3058 bool = false
			yyq3058[0] = x.Kind != ""
			yyq3058[1] = x.APIVersion != ""
			yyq3058[2] = true
			if yyr3058 || yy2arr3058 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3058 int = 1
				for _, b := range yyq3058 {
					if b {
						yynn3058++
					}
				}
				r.EncodeMapStart(yynn3058)
			}
			if yyr3058 || yy2arr3058 {
				if yyq3058[0] {
					yym3060 := z.EncBinary()
					_ = yym3060
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3058[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3061 := z.EncBinary()
					_ = yym3061
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3058 || yy2arr3058 {
				if yyq3058[1] {
					yym3063 := z.EncBinary()
					_ = yym3063
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3058[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3064 := z.EncBinary()
					_ = yym3064
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3058 || yy2arr3058 {
				if yyq3058[2] {
					yy3066 := &x.ListMeta
					yym3067 := z.EncBinary()
					_ = yym3067
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3066) {
					} else {
						z.EncFallback(yy3066)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3058[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3068 := &x.ListMeta
					yym3069 := z.EncBinary()
					_ = yym3069
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3068) {
					} else {
						z.EncFallback(yy3068)
					}
				}
			}
			if yyr3058 || yy2arr3058 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3071 := z.EncBinary()
					_ = yym3071
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3072 := z.EncBinary()
					_ = yym3072
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yysep3058 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3073 := z.DecBinary()
	_ = yym3073
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3074 := r.ReadMapStart()
			if yyl3074 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3074, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3074 := r.ReadArrayStart()
			if yyl3074 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3074, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3075Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3075Slc
	var yyhl3075 bool = l >= 0
	for yyj3075 := 0; ; yyj3075++ {
		if yyhl3075 {
			if yyj3075 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3075Slc = r.DecodeBytes(yys3075Slc, true, true)
		yys3075 := string(yys3075Slc)
		switch yys3075 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3078 := &x.ListMeta
				yym3079 := z.DecBinary()
				_ = yym3079
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3078) {
				} else {
					z.DecFallback(yyv3078, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3080 := &x.Items
				yym3081 := z.DecBinary()
				_ = yym3081
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3080), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3075)
		} // end switch yys3075
	} // end for yyj3075
	if !yyhl3075 {
		r.ReadEnd()
	}
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3082 int
	var yyb3082 bool
	var yyhl3082 bool = l >= 0
	yyj3082++
	if yyhl3082 {
		yyb3082 = yyj3082 > l
	} else {
		yyb3082 = r.CheckBreak()
	}
	if yyb3082 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3082++
	if yyhl3082 {
		yyb3082 = yyj3082 > l
	} else {
		yyb3082 = r.CheckBreak()
	}
	if yyb3082 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3082++
	if yyhl3082 {
		yyb3082 = yyj3082 > l
	} else {
		yyb3082 = r.CheckBreak()
	}
	if yyb3082 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3085 := &x.ListMeta
		yym3086 := z.DecBinary()
		_ = yym3086
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3085) {
		} else {
			z.DecFallback(yyv3085, false)
		}
	}
	yyj3082++
	if yyhl3082 {
		yyb3082 = yyj3082 > l
	} else {
		yyb3082 = r.CheckBreak()
	}
	if yyb3082 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3087 := &x.Items
		yym3088 := z.DecBinary()
		_ = yym3088
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3087), d)
		}
	}
	for {
		yyj3082++
		if yyhl3082 {
			yyb3082 = yyj3082 > l
		} else {
			yyb3082 = r.CheckBreak()
		}
		if yyb3082 {
			break
		}
		z.DecStructFieldNotFound(yyj3082-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3089 := z.EncBinary()
		_ = yym3089
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3090 := !z.EncBinary()
			yy2arr3090 := z.EncBasicHandle().StructToArray
			var yyq3090 [1]bool
			_, _, _ = yysep3090, yyq3090, yy2arr3090
			const yyr3090 bool = false
			yyq3090[0] = len(x.Hard) != 0
			if yyr3090 || yy2arr3090 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3090 int = 0
				for _, b := range yyq3090 {
					if b {
						yynn3090++
					}
				}
				r.EncodeMapStart(yynn3090)
			}
			if yyr3090 || yy2arr3090 {
				if yyq3090[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3090[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3090 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3092 := z.DecBinary()
	_ = yym3092
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3093 := r.ReadMapStart()
			if yyl3093 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3093, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3093 := r.ReadArrayStart()
			if yyl3093 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3093, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3094Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3094Slc
	var yyhl3094 bool = l >= 0
	for yyj3094 := 0; ; yyj3094++ {
		if yyhl3094 {
			if yyj3094 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3094Slc = r.DecodeBytes(yys3094Slc, true, true)
		yys3094 := string(yys3094Slc)
		switch yys3094 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3095 := &x.Hard
				yyv3095.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3094)
		} // end switch yys3094
	} // end for yyj3094
	if !yyhl3094 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3096 int
	var yyb3096 bool
	var yyhl3096 bool = l >= 0
	yyj3096++
	if yyhl3096 {
		yyb3096 = yyj3096 > l
	} else {
		yyb3096 = r.CheckBreak()
	}
	if yyb3096 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3097 := &x.Hard
		yyv3097.CodecDecodeSelf(d)
	}
	for {
		yyj3096++
		if yyhl3096 {
			yyb3096 = yyj3096 > l
		} else {
			yyb3096 = r.CheckBreak()
		}
		if yyb3096 {
			break
		}
		z.DecStructFieldNotFound(yyj3096-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3098 := z.EncBinary()
		_ = yym3098
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3099 := !z.EncBinary()
			yy2arr3099 := z.EncBasicHandle().StructToArray
			var yyq3099 [2]bool
			_, _, _ = yysep3099, yyq3099, yy2arr3099
			const yyr3099 bool = false
			yyq3099[0] = len(x.Hard) != 0
			yyq3099[1] = len(x.Used) != 0
			if yyr3099 || yy2arr3099 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3099 int = 0
				for _, b := range yyq3099 {
					if b {
						yynn3099++
					}
				}
				r.EncodeMapStart(yynn3099)
			}
			if yyr3099 || yy2arr3099 {
				if yyq3099[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3099[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3099 || yy2arr3099 {
				if yyq3099[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3099[1] {
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3099 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3102 := z.DecBinary()
	_ = yym3102
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3103 := r.ReadMapStart()
			if yyl3103 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3103, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3103 := r.ReadArrayStart()
			if yyl3103 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3103, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3104Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3104Slc
	var yyhl3104 bool = l >= 0
	for yyj3104 := 0; ; yyj3104++ {
		if yyhl3104 {
			if yyj3104 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3104Slc = r.DecodeBytes(yys3104Slc, true, true)
		yys3104 := string(yys3104Slc)
		switch yys3104 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3105 := &x.Hard
				yyv3105.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3106 := &x.Used
				yyv3106.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3104)
		} // end switch yys3104
	} // end for yyj3104
	if !yyhl3104 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3107 int
	var yyb3107 bool
	var yyhl3107 bool = l >= 0
	yyj3107++
	if yyhl3107 {
		yyb3107 = yyj3107 > l
	} else {
		yyb3107 = r.CheckBreak()
	}
	if yyb3107 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3108 := &x.Hard
		yyv3108.CodecDecodeSelf(d)
	}
	yyj3107++
	if yyhl3107 {
		yyb3107 = yyj3107 > l
	} else {
		yyb3107 = r.CheckBreak()
	}
	if yyb3107 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3109 := &x.Used
		yyv3109.CodecDecodeSelf(d)
	}
	for {
		yyj3107++
		if yyhl3107 {
			yyb3107 = yyj3107 > l
		} else {
			yyb3107 = r.CheckBreak()
		}
		if yyb3107 {
			break
		}
		z.DecStructFieldNotFound(yyj3107-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3110 := z.EncBinary()
		_ = yym3110
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3111 := !z.EncBinary()
			yy2arr3111 := z.EncBasicHandle().StructToArray
			var yyq3111 [5]bool
			_, _, _ = yysep3111, yyq3111, yy2arr3111
			const yyr3111 bool = false
			yyq3111[0] = x.Kind != ""
			yyq3111[1] = x.APIVersion != ""
			yyq3111[2] = true
			yyq3111[3] = true
			yyq3111[4] = true
			if yyr3111 || yy2arr3111 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3111 int = 0
				for _, b := range yyq3111 {
					if b {
						yynn3111++
					}
				}
				r.EncodeMapStart(yynn3111)
			}
			if yyr3111 || yy2arr3111 {
				if yyq3111[0] {
					yym3113 := z.EncBinary()
					_ = yym3113
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3111[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3114 := z.EncBinary()
					_ = yym3114
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3111 || yy2arr3111 {
				if yyq3111[1] {
					yym3116 := z.EncBinary()
					_ = yym3116
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3111[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3117 := z.EncBinary()
					_ = yym3117
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3111 || yy2arr3111 {
				if yyq3111[2] {
					yy3119 := &x.ObjectMeta
					yy3119.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3111[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3120 := &x.ObjectMeta
					yy3120.CodecEncodeSelf(e)
				}
			}
			if yyr3111 || yy2arr3111 {
				if yyq3111[3] {
					yy3122 := &x.Spec
					yy3122.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3111[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy3123 := &x.Spec
					yy3123.CodecEncodeSelf(e)
				}
			}
			if yyr3111 || yy2arr3111 {
				if yyq3111[4] {
					yy3125 := &x.Status
					yy3125.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3111[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy3126 := &x.Status
					yy3126.CodecEncodeSelf(e)
				}
			}
			if yysep3111 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3127 := z.DecBinary()
	_ = yym3127
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3128 := r.ReadMapStart()
			if yyl3128 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3128, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3128 := r.ReadArrayStart()
			if yyl3128 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3128, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3129Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3129Slc
	var yyhl3129 bool = l >= 0
	for yyj3129 := 0; ; yyj3129++ {
		if yyhl3129 {
			if yyj3129 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3129Slc = r.DecodeBytes(yys3129Slc, true, true)
		yys3129 := string(yys3129Slc)
		switch yys3129 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3132 := &x.ObjectMeta
				yyv3132.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3133 := &x.Spec
				yyv3133.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3134 := &x.Status
				yyv3134.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3129)
		} // end switch yys3129
	} // end for yyj3129
	if !yyhl3129 {
		r.ReadEnd()
	}
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3135 int
	var yyb3135 bool
	var yyhl3135 bool = l >= 0
	yyj3135++
	if yyhl3135 {
		yyb3135 = yyj3135 > l
	} else {
		yyb3135 = r.CheckBreak()
	}
	if yyb3135 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3135++
	if yyhl3135 {
		yyb3135 = yyj3135 > l
	} else {
		yyb3135 = r.CheckBreak()
	}
	if yyb3135 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3135++
	if yyhl3135 {
		yyb3135 = yyj3135 > l
	} else {
		yyb3135 = r.CheckBreak()
	}
	if yyb3135 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3138 := &x.ObjectMeta
		yyv3138.CodecDecodeSelf(d)
	}
	yyj3135++
	if yyhl3135 {
		yyb3135 = yyj3135 > l
	} else {
		yyb3135 = r.CheckBreak()
	}
	if yyb3135 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3139 := &x.Spec
		yyv3139.CodecDecodeSelf(d)
	}
	yyj3135++
	if yyhl3135 {
		yyb3135 = yyj3135 > l
	} else {
		yyb3135 = r.CheckBreak()
	}
	if yyb3135 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3140 := &x.Status
		yyv3140.CodecDecodeSelf(d)
	}
	for {
		yyj3135++
		if yyhl3135 {
			yyb3135 = yyj3135 > l
		} else {
			yyb3135 = r.CheckBreak()
		}
		if yyb3135 {
			break
		}
		z.DecStructFieldNotFound(yyj3135-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3141 := z.EncBinary()
		_ = yym3141
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3142 := !z.EncBinary()
			yy2arr3142 := z.EncBasicHandle().StructToArray
			var yyq3142 [4]bool
			_, _, _ = yysep3142, yyq3142, yy2arr3142
			const yyr3142 bool = false
			yyq3142[0] = x.Kind != ""
			yyq3142[1] = x.APIVersion != ""
			yyq3142[2] = true
			if yyr3142 || yy2arr3142 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3142 int = 1
				for _, b := range yyq3142 {
					if b {
						yynn3142++
					}
				}
				r.EncodeMapStart(yynn3142)
			}
			if yyr3142 || yy2arr3142 {
				if yyq3142[0] {
					yym3144 := z.EncBinary()
					_ = yym3144
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3142[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3145 := z.EncBinary()
					_ = yym3145
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3142 || yy2arr3142 {
				if yyq3142[1] {
					yym3147 := z.EncBinary()
					_ = yym3147
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3142[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3148 := z.EncBinary()
					_ = yym3148
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3142 || yy2arr3142 {
				if yyq3142[2] {
					yy3150 := &x.ListMeta
					yym3151 := z.EncBinary()
					_ = yym3151
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3150) {
					} else {
						z.EncFallback(yy3150)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3142[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3152 := &x.ListMeta
					yym3153 := z.EncBinary()
					_ = yym3153
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3152) {
					} else {
						z.EncFallback(yy3152)
					}
				}
			}
			if yyr3142 || yy2arr3142 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3155 := z.EncBinary()
					_ = yym3155
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3156 := z.EncBinary()
					_ = yym3156
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yysep3142 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3157 := z.DecBinary()
	_ = yym3157
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3158 := r.ReadMapStart()
			if yyl3158 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3158, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3158 := r.ReadArrayStart()
			if yyl3158 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3158, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3159Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3159Slc
	var yyhl3159 bool = l >= 0
	for yyj3159 := 0; ; yyj3159++ {
		if yyhl3159 {
			if yyj3159 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3159Slc = r.DecodeBytes(yys3159Slc, true, true)
		yys3159 := string(yys3159Slc)
		switch yys3159 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3162 := &x.ListMeta
				yym3163 := z.DecBinary()
				_ = yym3163
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3162) {
				} else {
					z.DecFallback(yyv3162, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3164 := &x.Items
				yym3165 := z.DecBinary()
				_ = yym3165
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3164), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3159)
		} // end switch yys3159
	} // end for yyj3159
	if !yyhl3159 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3166 int
	var yyb3166 bool
	var yyhl3166 bool = l >= 0
	yyj3166++
	if yyhl3166 {
		yyb3166 = yyj3166 > l
	} else {
		yyb3166 = r.CheckBreak()
	}
	if yyb3166 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3166++
	if yyhl3166 {
		yyb3166 = yyj3166 > l
	} else {
		yyb3166 = r.CheckBreak()
	}
	if yyb3166 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3166++
	if yyhl3166 {
		yyb3166 = yyj3166 > l
	} else {
		yyb3166 = r.CheckBreak()
	}
	if yyb3166 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3169 := &x.ListMeta
		yym3170 := z.DecBinary()
		_ = yym3170
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3169) {
		} else {
			z.DecFallback(yyv3169, false)
		}
	}
	yyj3166++
	if yyhl3166 {
		yyb3166 = yyj3166 > l
	} else {
		yyb3166 = r.CheckBreak()
	}
	if yyb3166 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3171 := &x.Items
		yym3172 := z.DecBinary()
		_ = yym3172
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3171), d)
		}
	}
	for {
		yyj3166++
		if yyhl3166 {
			yyb3166 = yyj3166 > l
		} else {
			yyb3166 = r.CheckBreak()
		}
		if yyb3166 {
			break
		}
		z.DecStructFieldNotFound(yyj3166-1, "")
	}
	r.ReadEnd()
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3173 := z.EncBinary()
		_ = yym3173
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3174 := !z.EncBinary()
			yy2arr3174 := z.EncBasicHandle().StructToArray
			var yyq3174 [5]bool
			_, _, _ = yysep3174, yyq3174, yy2arr3174
			const yyr3174 bool = false
			yyq3174[0] = x.Kind != ""
			yyq3174[1] = x.APIVersion != ""
			yyq3174[2] = true
			yyq3174[3] = len(x.Data) != 0
			yyq3174[4] = x.Type != ""
			if yyr3174 || yy2arr3174 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3174 int = 0
				for _, b := range yyq3174 {
					if b {
						yynn3174++
					}
				}
				r.EncodeMapStart(yynn3174)
			}
			if yyr3174 || yy2arr3174 {
				if yyq3174[0] {
					yym3176 := z.EncBinary()
					_ = yym3176
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3174[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3177 := z.EncBinary()
					_ = yym3177
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3174 || yy2arr3174 {
				if yyq3174[1] {
					yym3179 := z.EncBinary()
					_ = yym3179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3174[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3180 := z.EncBinary()
					_ = yym3180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3174 || yy2arr3174 {
				if yyq3174[2] {
					yy3182 := &x.ObjectMeta
					yy3182.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3174[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3183 := &x.ObjectMeta
					yy3183.CodecEncodeSelf(e)
				}
			}
			if yyr3174 || yy2arr3174 {
				if yyq3174[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3185 := z.EncBinary()
						_ = yym3185
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3174[3] {
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3186 := z.EncBinary()
						_ = yym3186
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3174 || yy2arr3174 {
				if yyq3174[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3174[4] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yysep3174 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3188 := z.DecBinary()
	_ = yym3188
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3189 := r.ReadMapStart()
			if yyl3189 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3189, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3189 := r.ReadArrayStart()
			if yyl3189 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3189, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3190Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3190Slc
	var yyhl3190 bool = l >= 0
	for yyj3190 := 0; ; yyj3190++ {
		if yyhl3190 {
			if yyj3190 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3190Slc = r.DecodeBytes(yys3190Slc, true, true)
		yys3190 := string(yys3190Slc)
		switch yys3190 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3193 := &x.ObjectMeta
				yyv3193.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3194 := &x.Data
				yym3195 := z.DecBinary()
				_ = yym3195
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3194), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3190)
		} // end switch yys3190
	} // end for yyj3190
	if !yyhl3190 {
		r.ReadEnd()
	}
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3197 int
	var yyb3197 bool
	var yyhl3197 bool = l >= 0
	yyj3197++
	if yyhl3197 {
		yyb3197 = yyj3197 > l
	} else {
		yyb3197 = r.CheckBreak()
	}
	if yyb3197 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3197++
	if yyhl3197 {
		yyb3197 = yyj3197 > l
	} else {
		yyb3197 = r.CheckBreak()
	}
	if yyb3197 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3197++
	if yyhl3197 {
		yyb3197 = yyj3197 > l
	} else {
		yyb3197 = r.CheckBreak()
	}
	if yyb3197 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3200 := &x.ObjectMeta
		yyv3200.CodecDecodeSelf(d)
	}
	yyj3197++
	if yyhl3197 {
		yyb3197 = yyj3197 > l
	} else {
		yyb3197 = r.CheckBreak()
	}
	if yyb3197 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3201 := &x.Data
		yym3202 := z.DecBinary()
		_ = yym3202
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3201), d)
		}
	}
	yyj3197++
	if yyhl3197 {
		yyb3197 = yyj3197 > l
	} else {
		yyb3197 = r.CheckBreak()
	}
	if yyb3197 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj3197++
		if yyhl3197 {
			yyb3197 = yyj3197 > l
		} else {
			yyb3197 = r.CheckBreak()
		}
		if yyb3197 {
			break
		}
		z.DecStructFieldNotFound(yyj3197-1, "")
	}
	r.ReadEnd()
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3204 := z.EncBinary()
	_ = yym3204
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3205 := z.DecBinary()
	_ = yym3205
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3206 := z.EncBinary()
		_ = yym3206
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3207 := !z.EncBinary()
			yy2arr3207 := z.EncBasicHandle().StructToArray
			var yyq3207 [4]bool
			_, _, _ = yysep3207, yyq3207, yy2arr3207
			const yyr3207 bool = false
			yyq3207[0] = x.Kind != ""
			yyq3207[1] = x.APIVersion != ""
			yyq3207[2] = true
			if yyr3207 || yy2arr3207 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3207 int = 1
				for _, b := range yyq3207 {
					if b {
						yynn3207++
					}
				}
				r.EncodeMapStart(yynn3207)
			}
			if yyr3207 || yy2arr3207 {
				if yyq3207[0] {
					yym3209 := z.EncBinary()
					_ = yym3209
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3207[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3210 := z.EncBinary()
					_ = yym3210
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3207 || yy2arr3207 {
				if yyq3207[1] {
					yym3212 := z.EncBinary()
					_ = yym3212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3207[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3213 := z.EncBinary()
					_ = yym3213
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3207 || yy2arr3207 {
				if yyq3207[2] {
					yy3215 := &x.ListMeta
					yym3216 := z.EncBinary()
					_ = yym3216
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3215) {
					} else {
						z.EncFallback(yy3215)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3207[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3217 := &x.ListMeta
					yym3218 := z.EncBinary()
					_ = yym3218
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3217) {
					} else {
						z.EncFallback(yy3217)
					}
				}
			}
			if yyr3207 || yy2arr3207 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3220 := z.EncBinary()
					_ = yym3220
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3221 := z.EncBinary()
					_ = yym3221
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yysep3207 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3222 := z.DecBinary()
	_ = yym3222
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3223 := r.ReadMapStart()
			if yyl3223 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3223, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3223 := r.ReadArrayStart()
			if yyl3223 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3223, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3224Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3224Slc
	var yyhl3224 bool = l >= 0
	for yyj3224 := 0; ; yyj3224++ {
		if yyhl3224 {
			if yyj3224 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3224Slc = r.DecodeBytes(yys3224Slc, true, true)
		yys3224 := string(yys3224Slc)
		switch yys3224 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3227 := &x.ListMeta
				yym3228 := z.DecBinary()
				_ = yym3228
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3227) {
				} else {
					z.DecFallback(yyv3227, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3229 := &x.Items
				yym3230 := z.DecBinary()
				_ = yym3230
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3229), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3224)
		} // end switch yys3224
	} // end for yyj3224
	if !yyhl3224 {
		r.ReadEnd()
	}
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3231 int
	var yyb3231 bool
	var yyhl3231 bool = l >= 0
	yyj3231++
	if yyhl3231 {
		yyb3231 = yyj3231 > l
	} else {
		yyb3231 = r.CheckBreak()
	}
	if yyb3231 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3231++
	if yyhl3231 {
		yyb3231 = yyj3231 > l
	} else {
		yyb3231 = r.CheckBreak()
	}
	if yyb3231 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3231++
	if yyhl3231 {
		yyb3231 = yyj3231 > l
	} else {
		yyb3231 = r.CheckBreak()
	}
	if yyb3231 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3234 := &x.ListMeta
		yym3235 := z.DecBinary()
		_ = yym3235
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3234) {
		} else {
			z.DecFallback(yyv3234, false)
		}
	}
	yyj3231++
	if yyhl3231 {
		yyb3231 = yyj3231 > l
	} else {
		yyb3231 = r.CheckBreak()
	}
	if yyb3231 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3236 := &x.Items
		yym3237 := z.DecBinary()
		_ = yym3237
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3236), d)
		}
	}
	for {
		yyj3231++
		if yyhl3231 {
			yyb3231 = yyj3231 > l
		} else {
			yyb3231 = r.CheckBreak()
		}
		if yyb3231 {
			break
		}
		z.DecStructFieldNotFound(yyj3231-1, "")
	}
	r.ReadEnd()
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3238 := z.EncBinary()
	_ = yym3238
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3239 := z.DecBinary()
	_ = yym3239
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3240 := z.EncBinary()
		_ = yym3240
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3241 := !z.EncBinary()
			yy2arr3241 := z.EncBasicHandle().StructToArray
			var yyq3241 [4]bool
			_, _, _ = yysep3241, yyq3241, yy2arr3241
			const yyr3241 bool = false
			yyq3241[2] = x.Message != ""
			yyq3241[3] = x.Error != ""
			if yyr3241 || yy2arr3241 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3241 int = 2
				for _, b := range yyq3241 {
					if b {
						yynn3241++
					}
				}
				r.EncodeMapStart(yynn3241)
			}
			if yyr3241 || yy2arr3241 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3241 || yy2arr3241 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3241 || yy2arr3241 {
				if yyq3241[2] {
					yym3245 := z.EncBinary()
					_ = yym3245
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3241[2] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym3246 := z.EncBinary()
					_ = yym3246
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3241 || yy2arr3241 {
				if yyq3241[3] {
					yym3248 := z.EncBinary()
					_ = yym3248
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3241[3] {
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					yym3249 := z.EncBinary()
					_ = yym3249
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yysep3241 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3250 := z.DecBinary()
	_ = yym3250
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3251 := r.ReadMapStart()
			if yyl3251 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3251, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3251 := r.ReadArrayStart()
			if yyl3251 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3251, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3252Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3252Slc
	var yyhl3252 bool = l >= 0
	for yyj3252 := 0; ; yyj3252++ {
		if yyhl3252 {
			if yyj3252 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3252Slc = r.DecodeBytes(yys3252Slc, true, true)
		yys3252 := string(yys3252Slc)
		switch yys3252 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3252)
		} // end switch yys3252
	} // end for yyj3252
	if !yyhl3252 {
		r.ReadEnd()
	}
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3257 int
	var yyb3257 bool
	var yyhl3257 bool = l >= 0
	yyj3257++
	if yyhl3257 {
		yyb3257 = yyj3257 > l
	} else {
		yyb3257 = r.CheckBreak()
	}
	if yyb3257 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3257++
	if yyhl3257 {
		yyb3257 = yyj3257 > l
	} else {
		yyb3257 = r.CheckBreak()
	}
	if yyb3257 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3257++
	if yyhl3257 {
		yyb3257 = yyj3257 > l
	} else {
		yyb3257 = r.CheckBreak()
	}
	if yyb3257 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3257++
	if yyhl3257 {
		yyb3257 = yyj3257 > l
	} else {
		yyb3257 = r.CheckBreak()
	}
	if yyb3257 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3257++
		if yyhl3257 {
			yyb3257 = yyj3257 > l
		} else {
			yyb3257 = r.CheckBreak()
		}
		if yyb3257 {
			break
		}
		z.DecStructFieldNotFound(yyj3257-1, "")
	}
	r.ReadEnd()
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3262 := z.EncBinary()
		_ = yym3262
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3263 := !z.EncBinary()
			yy2arr3263 := z.EncBasicHandle().StructToArray
			var yyq3263 [4]bool
			_, _, _ = yysep3263, yyq3263, yy2arr3263
			const yyr3263 bool = false
			yyq3263[0] = x.Kind != ""
			yyq3263[1] = x.APIVersion != ""
			yyq3263[2] = true
			yyq3263[3] = len(x.Conditions) != 0
			if yyr3263 || yy2arr3263 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3263 int = 0
				for _, b := range yyq3263 {
					if b {
						yynn3263++
					}
				}
				r.EncodeMapStart(yynn3263)
			}
			if yyr3263 || yy2arr3263 {
				if yyq3263[0] {
					yym3265 := z.EncBinary()
					_ = yym3265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3263[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3266 := z.EncBinary()
					_ = yym3266
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3263 || yy2arr3263 {
				if yyq3263[1] {
					yym3268 := z.EncBinary()
					_ = yym3268
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3263[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3269 := z.EncBinary()
					_ = yym3269
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3263 || yy2arr3263 {
				if yyq3263[2] {
					yy3271 := &x.ObjectMeta
					yy3271.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3263[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3272 := &x.ObjectMeta
					yy3272.CodecEncodeSelf(e)
				}
			}
			if yyr3263 || yy2arr3263 {
				if yyq3263[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3274 := z.EncBinary()
						_ = yym3274
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3263[3] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3275 := z.EncBinary()
						_ = yym3275
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yysep3263 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3276 := z.DecBinary()
	_ = yym3276
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3277 := r.ReadMapStart()
			if yyl3277 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3277, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3277 := r.ReadArrayStart()
			if yyl3277 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3277, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3278Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3278Slc
	var yyhl3278 bool = l >= 0
	for yyj3278 := 0; ; yyj3278++ {
		if yyhl3278 {
			if yyj3278 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3278Slc = r.DecodeBytes(yys3278Slc, true, true)
		yys3278 := string(yys3278Slc)
		switch yys3278 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3281 := &x.ObjectMeta
				yyv3281.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3282 := &x.Conditions
				yym3283 := z.DecBinary()
				_ = yym3283
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3282), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3278)
		} // end switch yys3278
	} // end for yyj3278
	if !yyhl3278 {
		r.ReadEnd()
	}
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3284 int
	var yyb3284 bool
	var yyhl3284 bool = l >= 0
	yyj3284++
	if yyhl3284 {
		yyb3284 = yyj3284 > l
	} else {
		yyb3284 = r.CheckBreak()
	}
	if yyb3284 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3284++
	if yyhl3284 {
		yyb3284 = yyj3284 > l
	} else {
		yyb3284 = r.CheckBreak()
	}
	if yyb3284 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3284++
	if yyhl3284 {
		yyb3284 = yyj3284 > l
	} else {
		yyb3284 = r.CheckBreak()
	}
	if yyb3284 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3287 := &x.ObjectMeta
		yyv3287.CodecDecodeSelf(d)
	}
	yyj3284++
	if yyhl3284 {
		yyb3284 = yyj3284 > l
	} else {
		yyb3284 = r.CheckBreak()
	}
	if yyb3284 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3288 := &x.Conditions
		yym3289 := z.DecBinary()
		_ = yym3289
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3288), d)
		}
	}
	for {
		yyj3284++
		if yyhl3284 {
			yyb3284 = yyj3284 > l
		} else {
			yyb3284 = r.CheckBreak()
		}
		if yyb3284 {
			break
		}
		z.DecStructFieldNotFound(yyj3284-1, "")
	}
	r.ReadEnd()
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3290 := z.EncBinary()
		_ = yym3290
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3291 := !z.EncBinary()
			yy2arr3291 := z.EncBasicHandle().StructToArray
			var yyq3291 [4]bool
			_, _, _ = yysep3291, yyq3291, yy2arr3291
			const yyr3291 bool = false
			yyq3291[0] = x.Kind != ""
			yyq3291[1] = x.APIVersion != ""
			yyq3291[2] = true
			if yyr3291 || yy2arr3291 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3291 int = 1
				for _, b := range yyq3291 {
					if b {
						yynn3291++
					}
				}
				r.EncodeMapStart(yynn3291)
			}
			if yyr3291 || yy2arr3291 {
				if yyq3291[0] {
					yym3293 := z.EncBinary()
					_ = yym3293
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3291[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3294 := z.EncBinary()
					_ = yym3294
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3291 || yy2arr3291 {
				if yyq3291[1] {
					yym3296 := z.EncBinary()
					_ = yym3296
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3291[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3297 := z.EncBinary()
					_ = yym3297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3291 || yy2arr3291 {
				if yyq3291[2] {
					yy3299 := &x.ListMeta
					yym3300 := z.EncBinary()
					_ = yym3300
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3299) {
					} else {
						z.EncFallback(yy3299)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3291[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3301 := &x.ListMeta
					yym3302 := z.EncBinary()
					_ = yym3302
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3301) {
					} else {
						z.EncFallback(yy3301)
					}
				}
			}
			if yyr3291 || yy2arr3291 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3304 := z.EncBinary()
					_ = yym3304
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3305 := z.EncBinary()
					_ = yym3305
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yysep3291 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3306 := z.DecBinary()
	_ = yym3306
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3307 := r.ReadMapStart()
			if yyl3307 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3307, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3307 := r.ReadArrayStart()
			if yyl3307 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3307, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3308Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3308Slc
	var yyhl3308 bool = l >= 0
	for yyj3308 := 0; ; yyj3308++ {
		if yyhl3308 {
			if yyj3308 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3308Slc = r.DecodeBytes(yys3308Slc, true, true)
		yys3308 := string(yys3308Slc)
		switch yys3308 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3311 := &x.ListMeta
				yym3312 := z.DecBinary()
				_ = yym3312
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3311) {
				} else {
					z.DecFallback(yyv3311, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3313 := &x.Items
				yym3314 := z.DecBinary()
				_ = yym3314
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3313), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3308)
		} // end switch yys3308
	} // end for yyj3308
	if !yyhl3308 {
		r.ReadEnd()
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3315 int
	var yyb3315 bool
	var yyhl3315 bool = l >= 0
	yyj3315++
	if yyhl3315 {
		yyb3315 = yyj3315 > l
	} else {
		yyb3315 = r.CheckBreak()
	}
	if yyb3315 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3315++
	if yyhl3315 {
		yyb3315 = yyj3315 > l
	} else {
		yyb3315 = r.CheckBreak()
	}
	if yyb3315 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3315++
	if yyhl3315 {
		yyb3315 = yyj3315 > l
	} else {
		yyb3315 = r.CheckBreak()
	}
	if yyb3315 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3318 := &x.ListMeta
		yym3319 := z.DecBinary()
		_ = yym3319
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3318) {
		} else {
			z.DecFallback(yyv3318, false)
		}
	}
	yyj3315++
	if yyhl3315 {
		yyb3315 = yyj3315 > l
	} else {
		yyb3315 = r.CheckBreak()
	}
	if yyb3315 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3320 := &x.Items
		yym3321 := z.DecBinary()
		_ = yym3321
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3320), d)
		}
	}
	for {
		yyj3315++
		if yyhl3315 {
			yyb3315 = yyj3315 > l
		} else {
			yyb3315 = r.CheckBreak()
		}
		if yyb3315 {
			break
		}
		z.DecStructFieldNotFound(yyj3315-1, "")
	}
	r.ReadEnd()
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3322 := z.EncBinary()
		_ = yym3322
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3323 := !z.EncBinary()
			yy2arr3323 := z.EncBasicHandle().StructToArray
			var yyq3323 [1]bool
			_, _, _ = yysep3323, yyq3323, yy2arr3323
			const yyr3323 bool = false
			yyq3323[0] = len(x.Items) != 0
			if yyr3323 || yy2arr3323 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3323 int = 0
				for _, b := range yyq3323 {
					if b {
						yynn3323++
					}
				}
				r.EncodeMapStart(yynn3323)
			}
			if yyr3323 || yy2arr3323 {
				if yyq3323[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3325 := z.EncBinary()
						_ = yym3325
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3323[0] {
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3326 := z.EncBinary()
						_ = yym3326
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yysep3323 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3327 := z.DecBinary()
	_ = yym3327
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3328 := r.ReadMapStart()
			if yyl3328 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3328, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3328 := r.ReadArrayStart()
			if yyl3328 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3328, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3329Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3329Slc
	var yyhl3329 bool = l >= 0
	for yyj3329 := 0; ; yyj3329++ {
		if yyhl3329 {
			if yyj3329 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3329Slc = r.DecodeBytes(yys3329Slc, true, true)
		yys3329 := string(yys3329Slc)
		switch yys3329 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3330 := &x.Items
				yym3331 := z.DecBinary()
				_ = yym3331
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv3330), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3329)
		} // end switch yys3329
	} // end for yyj3329
	if !yyhl3329 {
		r.ReadEnd()
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3332 int
	var yyb3332 bool
	var yyhl3332 bool = l >= 0
	yyj3332++
	if yyhl3332 {
		yyb3332 = yyj3332 > l
	} else {
		yyb3332 = r.CheckBreak()
	}
	if yyb3332 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3333 := &x.Items
		yym3334 := z.DecBinary()
		_ = yym3334
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv3333), d)
		}
	}
	for {
		yyj3332++
		if yyhl3332 {
			yyb3332 = yyj3332 > l
		} else {
			yyb3332 = r.CheckBreak()
		}
		if yyb3332 {
			break
		}
		z.DecStructFieldNotFound(yyj3332-1, "")
	}
	r.ReadEnd()
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3335 := z.EncBinary()
		_ = yym3335
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3336 := !z.EncBinary()
			yy2arr3336 := z.EncBasicHandle().StructToArray
			var yyq3336 [2]bool
			_, _, _ = yysep3336, yyq3336, yy2arr3336
			const yyr3336 bool = false
			if yyr3336 || yy2arr3336 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3336 int = 2
				for _, b := range yyq3336 {
					if b {
						yynn3336++
					}
				}
				r.EncodeMapStart(yynn3336)
			}
			if yyr3336 || yy2arr3336 {
				yym3338 := z.EncBinary()
				_ = yym3338
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym3339 := z.EncBinary()
				_ = yym3339
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3336 || yy2arr3336 {
				yy3341 := &x.FieldRef
				yy3341.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				yy3342 := &x.FieldRef
				yy3342.CodecEncodeSelf(e)
			}
			if yysep3336 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3343 := z.DecBinary()
	_ = yym3343
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3344 := r.ReadMapStart()
			if yyl3344 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3344, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3344 := r.ReadArrayStart()
			if yyl3344 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3344, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3345Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3345Slc
	var yyhl3345 bool = l >= 0
	for yyj3345 := 0; ; yyj3345++ {
		if yyhl3345 {
			if yyj3345 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3345Slc = r.DecodeBytes(yys3345Slc, true, true)
		yys3345 := string(yys3345Slc)
		switch yys3345 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv3347 := &x.FieldRef
				yyv3347.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3345)
		} // end switch yys3345
	} // end for yyj3345
	if !yyhl3345 {
		r.ReadEnd()
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3348 int
	var yyb3348 bool
	var yyhl3348 bool = l >= 0
	yyj3348++
	if yyhl3348 {
		yyb3348 = yyj3348 > l
	} else {
		yyb3348 = r.CheckBreak()
	}
	if yyb3348 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj3348++
	if yyhl3348 {
		yyb3348 = yyj3348 > l
	} else {
		yyb3348 = r.CheckBreak()
	}
	if yyb3348 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv3350 := &x.FieldRef
		yyv3350.CodecDecodeSelf(d)
	}
	for {
		yyj3348++
		if yyhl3348 {
			yyb3348 = yyj3348 > l
		} else {
			yyb3348 = r.CheckBreak()
		}
		if yyb3348 {
			break
		}
		z.DecStructFieldNotFound(yyj3348-1, "")
	}
	r.ReadEnd()
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3351 := z.EncBinary()
		_ = yym3351
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3352 := !z.EncBinary()
			yy2arr3352 := z.EncBasicHandle().StructToArray
			var yyq3352 [5]bool
			_, _, _ = yysep3352, yyq3352, yy2arr3352
			const yyr3352 bool = false
			yyq3352[0] = x.Capabilities != nil
			yyq3352[1] = x.Privileged != nil
			yyq3352[2] = x.SELinuxOptions != nil
			yyq3352[3] = x.RunAsUser != nil
			yyq3352[4] = x.RunAsNonRoot != nil
			if yyr3352 || yy2arr3352 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3352 int = 0
				for _, b := range yyq3352 {
					if b {
						yynn3352++
					}
				}
				r.EncodeMapStart(yynn3352)
			}
			if yyr3352 || yy2arr3352 {
				if yyq3352[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3352[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3352 || yy2arr3352 {
				if yyq3352[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3355 := *x.Privileged
						yym3356 := z.EncBinary()
						_ = yym3356
						if false {
						} else {
							r.EncodeBool(bool(yy3355))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3352[1] {
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3357 := *x.Privileged
						yym3358 := z.EncBinary()
						_ = yym3358
						if false {
						} else {
							r.EncodeBool(bool(yy3357))
						}
					}
				}
			}
			if yyr3352 || yy2arr3352 {
				if yyq3352[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3352[2] {
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3352 || yy2arr3352 {
				if yyq3352[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3361 := *x.RunAsUser
						yym3362 := z.EncBinary()
						_ = yym3362
						if false {
						} else {
							r.EncodeInt(int64(yy3361))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3352[3] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3363 := *x.RunAsUser
						yym3364 := z.EncBinary()
						_ = yym3364
						if false {
						} else {
							r.EncodeInt(int64(yy3363))
						}
					}
				}
			}
			if yyr3352 || yy2arr3352 {
				if yyq3352[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3366 := *x.RunAsNonRoot
						yym3367 := z.EncBinary()
						_ = yym3367
						if false {
						} else {
							r.EncodeBool(bool(yy3366))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3352[4] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3368 := *x.RunAsNonRoot
						yym3369 := z.EncBinary()
						_ = yym3369
						if false {
						} else {
							r.EncodeBool(bool(yy3368))
						}
					}
				}
			}
			if yysep3352 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3370 := z.DecBinary()
	_ = yym3370
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3371 := r.ReadMapStart()
			if yyl3371 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3371, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3371 := r.ReadArrayStart()
			if yyl3371 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3371, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3372Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3372Slc
	var yyhl3372 bool = l >= 0
	for yyj3372 := 0; ; yyj3372++ {
		if yyhl3372 {
			if yyj3372 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3372Slc = r.DecodeBytes(yys3372Slc, true, true)
		yys3372 := string(yys3372Slc)
		switch yys3372 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3375 := z.DecBinary()
				_ = yym3375
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3378 := z.DecBinary()
				_ = yym3378
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym3380 := z.DecBinary()
				_ = yym3380
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3372)
		} // end switch yys3372
	} // end for yyj3372
	if !yyhl3372 {
		r.ReadEnd()
	}
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3381 int
	var yyb3381 bool
	var yyhl3381 bool = l >= 0
	yyj3381++
	if yyhl3381 {
		yyb3381 = yyj3381 > l
	} else {
		yyb3381 = r.CheckBreak()
	}
	if yyb3381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3381++
	if yyhl3381 {
		yyb3381 = yyj3381 > l
	} else {
		yyb3381 = r.CheckBreak()
	}
	if yyb3381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3384 := z.DecBinary()
		_ = yym3384
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3381++
	if yyhl3381 {
		yyb3381 = yyj3381 > l
	} else {
		yyb3381 = r.CheckBreak()
	}
	if yyb3381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3381++
	if yyhl3381 {
		yyb3381 = yyj3381 > l
	} else {
		yyb3381 = r.CheckBreak()
	}
	if yyb3381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3387 := z.DecBinary()
		_ = yym3387
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3381++
	if yyhl3381 {
		yyb3381 = yyj3381 > l
	} else {
		yyb3381 = r.CheckBreak()
	}
	if yyb3381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym3389 := z.DecBinary()
		_ = yym3389
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	for {
		yyj3381++
		if yyhl3381 {
			yyb3381 = yyj3381 > l
		} else {
			yyb3381 = r.CheckBreak()
		}
		if yyb3381 {
			break
		}
		z.DecStructFieldNotFound(yyj3381-1, "")
	}
	r.ReadEnd()
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3390 := z.EncBinary()
		_ = yym3390
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3391 := !z.EncBinary()
			yy2arr3391 := z.EncBasicHandle().StructToArray
			var yyq3391 [4]bool
			_, _, _ = yysep3391, yyq3391, yy2arr3391
			const yyr3391 bool = false
			yyq3391[0] = x.User != ""
			yyq3391[1] = x.Role != ""
			yyq3391[2] = x.Type != ""
			yyq3391[3] = x.Level != ""
			if yyr3391 || yy2arr3391 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3391 int = 0
				for _, b := range yyq3391 {
					if b {
						yynn3391++
					}
				}
				r.EncodeMapStart(yynn3391)
			}
			if yyr3391 || yy2arr3391 {
				if yyq3391[0] {
					yym3393 := z.EncBinary()
					_ = yym3393
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3391[0] {
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					yym3394 := z.EncBinary()
					_ = yym3394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3391 || yy2arr3391 {
				if yyq3391[1] {
					yym3396 := z.EncBinary()
					_ = yym3396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3391[1] {
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					yym3397 := z.EncBinary()
					_ = yym3397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3391 || yy2arr3391 {
				if yyq3391[2] {
					yym3399 := z.EncBinary()
					_ = yym3399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3391[2] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					yym3400 := z.EncBinary()
					_ = yym3400
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3391 || yy2arr3391 {
				if yyq3391[3] {
					yym3402 := z.EncBinary()
					_ = yym3402
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3391[3] {
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					yym3403 := z.EncBinary()
					_ = yym3403
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yysep3391 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3404 := z.DecBinary()
	_ = yym3404
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3405 := r.ReadMapStart()
			if yyl3405 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3405, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3405 := r.ReadArrayStart()
			if yyl3405 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3405, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3406Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3406Slc
	var yyhl3406 bool = l >= 0
	for yyj3406 := 0; ; yyj3406++ {
		if yyhl3406 {
			if yyj3406 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3406Slc = r.DecodeBytes(yys3406Slc, true, true)
		yys3406 := string(yys3406Slc)
		switch yys3406 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3406)
		} // end switch yys3406
	} // end for yyj3406
	if !yyhl3406 {
		r.ReadEnd()
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3411 int
	var yyb3411 bool
	var yyhl3411 bool = l >= 0
	yyj3411++
	if yyhl3411 {
		yyb3411 = yyj3411 > l
	} else {
		yyb3411 = r.CheckBreak()
	}
	if yyb3411 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3411++
	if yyhl3411 {
		yyb3411 = yyj3411 > l
	} else {
		yyb3411 = r.CheckBreak()
	}
	if yyb3411 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3411++
	if yyhl3411 {
		yyb3411 = yyj3411 > l
	} else {
		yyb3411 = r.CheckBreak()
	}
	if yyb3411 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3411++
	if yyhl3411 {
		yyb3411 = yyj3411 > l
	} else {
		yyb3411 = r.CheckBreak()
	}
	if yyb3411 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3411++
		if yyhl3411 {
			yyb3411 = yyj3411 > l
		} else {
			yyb3411 = r.CheckBreak()
		}
		if yyb3411 {
			break
		}
		z.DecStructFieldNotFound(yyj3411-1, "")
	}
	r.ReadEnd()
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3416 := z.EncBinary()
		_ = yym3416
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3417 := !z.EncBinary()
			yy2arr3417 := z.EncBasicHandle().StructToArray
			var yyq3417 [5]bool
			_, _, _ = yysep3417, yyq3417, yy2arr3417
			const yyr3417 bool = false
			yyq3417[0] = x.Kind != ""
			yyq3417[1] = x.APIVersion != ""
			yyq3417[2] = true
			if yyr3417 || yy2arr3417 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3417 int = 2
				for _, b := range yyq3417 {
					if b {
						yynn3417++
					}
				}
				r.EncodeMapStart(yynn3417)
			}
			if yyr3417 || yy2arr3417 {
				if yyq3417[0] {
					yym3419 := z.EncBinary()
					_ = yym3419
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3417[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3420 := z.EncBinary()
					_ = yym3420
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3417 || yy2arr3417 {
				if yyq3417[1] {
					yym3422 := z.EncBinary()
					_ = yym3422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3417[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3423 := z.EncBinary()
					_ = yym3423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3417 || yy2arr3417 {
				if yyq3417[2] {
					yy3425 := &x.ObjectMeta
					yy3425.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3417[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3426 := &x.ObjectMeta
					yy3426.CodecEncodeSelf(e)
				}
			}
			if yyr3417 || yy2arr3417 {
				yym3428 := z.EncBinary()
				_ = yym3428
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				yym3429 := z.EncBinary()
				_ = yym3429
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3417 || yy2arr3417 {
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3431 := z.EncBinary()
					_ = yym3431
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3432 := z.EncBinary()
					_ = yym3432
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yysep3417 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3433 := z.DecBinary()
	_ = yym3433
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3434 := r.ReadMapStart()
			if yyl3434 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3434, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3434 := r.ReadArrayStart()
			if yyl3434 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3434, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3435Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3435Slc
	var yyhl3435 bool = l >= 0
	for yyj3435 := 0; ; yyj3435++ {
		if yyhl3435 {
			if yyj3435 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3435Slc = r.DecodeBytes(yys3435Slc, true, true)
		yys3435 := string(yys3435Slc)
		switch yys3435 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3438 := &x.ObjectMeta
				yyv3438.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3440 := &x.Data
				yym3441 := z.DecBinary()
				_ = yym3441
				if false {
				} else {
					*yyv3440 = r.DecodeBytes(*(*[]byte)(yyv3440), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3435)
		} // end switch yys3435
	} // end for yyj3435
	if !yyhl3435 {
		r.ReadEnd()
	}
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3442 int
	var yyb3442 bool
	var yyhl3442 bool = l >= 0
	yyj3442++
	if yyhl3442 {
		yyb3442 = yyj3442 > l
	} else {
		yyb3442 = r.CheckBreak()
	}
	if yyb3442 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3442++
	if yyhl3442 {
		yyb3442 = yyj3442 > l
	} else {
		yyb3442 = r.CheckBreak()
	}
	if yyb3442 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3442++
	if yyhl3442 {
		yyb3442 = yyj3442 > l
	} else {
		yyb3442 = r.CheckBreak()
	}
	if yyb3442 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3445 := &x.ObjectMeta
		yyv3445.CodecDecodeSelf(d)
	}
	yyj3442++
	if yyhl3442 {
		yyb3442 = yyj3442 > l
	} else {
		yyb3442 = r.CheckBreak()
	}
	if yyb3442 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3442++
	if yyhl3442 {
		yyb3442 = yyj3442 > l
	} else {
		yyb3442 = r.CheckBreak()
	}
	if yyb3442 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3447 := &x.Data
		yym3448 := z.DecBinary()
		_ = yym3448
		if false {
		} else {
			*yyv3447 = r.DecodeBytes(*(*[]byte)(yyv3447), false, false)
		}
	}
	for {
		yyj3442++
		if yyhl3442 {
			yyb3442 = yyj3442 > l
		} else {
			yyb3442 = r.CheckBreak()
		}
		if yyb3442 {
			break
		}
		z.DecStructFieldNotFound(yyj3442-1, "")
	}
	r.ReadEnd()
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3449 := range v {
		yyv3449.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3450 := *v
	yyh3450, yyl3450 := z.DecSliceHelperStart()

	var yyrr3450, yyrl3450 int
	var yyc3450, yyrt3450 bool
	_, _, _ = yyc3450, yyrt3450, yyrl3450
	yyrr3450 = yyl3450

	if yyv3450 == nil {
		if yyrl3450, yyrt3450 = z.DecInferLen(yyl3450, z.DecBasicHandle().MaxInitLen, 16); yyrt3450 {
			yyrr3450 = yyrl3450
		}
		yyv3450 = make([]PersistentVolumeAccessMode, yyrl3450)
		yyc3450 = true
	}

	if yyl3450 == 0 {
		if len(yyv3450) != 0 {
			yyv3450 = yyv3450[:0]
			yyc3450 = true
		}
	} else if yyl3450 > 0 {

		if yyl3450 > cap(yyv3450) {
			yyrl3450, yyrt3450 = z.DecInferLen(yyl3450, z.DecBasicHandle().MaxInitLen, 16)

			yyv23450 := yyv3450
			yyv3450 = make([]PersistentVolumeAccessMode, yyrl3450)
			if len(yyv3450) > 0 {
				copy(yyv3450, yyv23450[:cap(yyv23450)])
			}
			yyc3450 = true

			yyrr3450 = len(yyv3450)
		} else if yyl3450 != len(yyv3450) {
			yyv3450 = yyv3450[:yyl3450]
			yyc3450 = true
		}
		yyj3450 := 0
		for ; yyj3450 < yyrr3450; yyj3450++ {
			if r.TryDecodeAsNil() {
				yyv3450[yyj3450] = ""
			} else {
				yyv3450[yyj3450] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt3450 {
			for ; yyj3450 < yyl3450; yyj3450++ {
				yyv3450 = append(yyv3450, "")
				if r.TryDecodeAsNil() {
					yyv3450[yyj3450] = ""
				} else {
					yyv3450[yyj3450] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3450 := 0; !r.CheckBreak(); yyj3450++ {
			if yyj3450 >= len(yyv3450) {
				yyv3450 = append(yyv3450, "") // var yyz3450 PersistentVolumeAccessMode
				yyc3450 = true
			}

			if yyj3450 < len(yyv3450) {
				if r.TryDecodeAsNil() {
					yyv3450[yyj3450] = ""
				} else {
					yyv3450[yyj3450] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3450.End()
	}
	if yyc3450 {
		*v = yyv3450
	}

}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3454 := range v {
		yy3455 := &yyv3454
		yy3455.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3456 := *v
	yyh3456, yyl3456 := z.DecSliceHelperStart()

	var yyrr3456, yyrl3456 int
	var yyc3456, yyrt3456 bool
	_, _, _ = yyc3456, yyrt3456, yyrl3456
	yyrr3456 = yyl3456

	if yyv3456 == nil {
		if yyrl3456, yyrt3456 = z.DecInferLen(yyl3456, z.DecBasicHandle().MaxInitLen, 384); yyrt3456 {
			yyrr3456 = yyrl3456
		}
		yyv3456 = make([]PersistentVolume, yyrl3456)
		yyc3456 = true
	}

	if yyl3456 == 0 {
		if len(yyv3456) != 0 {
			yyv3456 = yyv3456[:0]
			yyc3456 = true
		}
	} else if yyl3456 > 0 {

		if yyl3456 > cap(yyv3456) {
			yyrl3456, yyrt3456 = z.DecInferLen(yyl3456, z.DecBasicHandle().MaxInitLen, 384)
			yyv3456 = make([]PersistentVolume, yyrl3456)
			yyc3456 = true

			yyrr3456 = len(yyv3456)
		} else if yyl3456 != len(yyv3456) {
			yyv3456 = yyv3456[:yyl3456]
			yyc3456 = true
		}
		yyj3456 := 0
		for ; yyj3456 < yyrr3456; yyj3456++ {
			if r.TryDecodeAsNil() {
				yyv3456[yyj3456] = PersistentVolume{}
			} else {
				yyv3457 := &yyv3456[yyj3456]
				yyv3457.CodecDecodeSelf(d)
			}

		}
		if yyrt3456 {
			for ; yyj3456 < yyl3456; yyj3456++ {
				yyv3456 = append(yyv3456, PersistentVolume{})
				if r.TryDecodeAsNil() {
					yyv3456[yyj3456] = PersistentVolume{}
				} else {
					yyv3458 := &yyv3456[yyj3456]
					yyv3458.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3456 := 0; !r.CheckBreak(); yyj3456++ {
			if yyj3456 >= len(yyv3456) {
				yyv3456 = append(yyv3456, PersistentVolume{}) // var yyz3456 PersistentVolume
				yyc3456 = true
			}

			if yyj3456 < len(yyv3456) {
				if r.TryDecodeAsNil() {
					yyv3456[yyj3456] = PersistentVolume{}
				} else {
					yyv3459 := &yyv3456[yyj3456]
					yyv3459.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3456.End()
	}
	if yyc3456 {
		*v = yyv3456
	}

}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3460 := range v {
		yy3461 := &yyv3460
		yy3461.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3462 := *v
	yyh3462, yyl3462 := z.DecSliceHelperStart()

	var yyrr3462, yyrl3462 int
	var yyc3462, yyrt3462 bool
	_, _, _ = yyc3462, yyrt3462, yyrl3462
	yyrr3462 = yyl3462

	if yyv3462 == nil {
		if yyrl3462, yyrt3462 = z.DecInferLen(yyl3462, z.DecBasicHandle().MaxInitLen, 296); yyrt3462 {
			yyrr3462 = yyrl3462
		}
		yyv3462 = make([]PersistentVolumeClaim, yyrl3462)
		yyc3462 = true
	}

	if yyl3462 == 0 {
		if len(yyv3462) != 0 {
			yyv3462 = yyv3462[:0]
			yyc3462 = true
		}
	} else if yyl3462 > 0 {

		if yyl3462 > cap(yyv3462) {
			yyrl3462, yyrt3462 = z.DecInferLen(yyl3462, z.DecBasicHandle().MaxInitLen, 296)
			yyv3462 = make([]PersistentVolumeClaim, yyrl3462)
			yyc3462 = true

			yyrr3462 = len(yyv3462)
		} else if yyl3462 != len(yyv3462) {
			yyv3462 = yyv3462[:yyl3462]
			yyc3462 = true
		}
		yyj3462 := 0
		for ; yyj3462 < yyrr3462; yyj3462++ {
			if r.TryDecodeAsNil() {
				yyv3462[yyj3462] = PersistentVolumeClaim{}
			} else {
				yyv3463 := &yyv3462[yyj3462]
				yyv3463.CodecDecodeSelf(d)
			}

		}
		if yyrt3462 {
			for ; yyj3462 < yyl3462; yyj3462++ {
				yyv3462 = append(yyv3462, PersistentVolumeClaim{})
				if r.TryDecodeAsNil() {
					yyv3462[yyj3462] = PersistentVolumeClaim{}
				} else {
					yyv3464 := &yyv3462[yyj3462]
					yyv3464.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3462 := 0; !r.CheckBreak(); yyj3462++ {
			if yyj3462 >= len(yyv3462) {
				yyv3462 = append(yyv3462, PersistentVolumeClaim{}) // var yyz3462 PersistentVolumeClaim
				yyc3462 = true
			}

			if yyj3462 < len(yyv3462) {
				if r.TryDecodeAsNil() {
					yyv3462[yyj3462] = PersistentVolumeClaim{}
				} else {
					yyv3465 := &yyv3462[yyj3462]
					yyv3465.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3462.End()
	}
	if yyc3462 {
		*v = yyv3462
	}

}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3466 := range v {
		yyv3466.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3467 := *v
	yyh3467, yyl3467 := z.DecSliceHelperStart()

	var yyrr3467, yyrl3467 int
	var yyc3467, yyrt3467 bool
	_, _, _ = yyc3467, yyrt3467, yyrl3467
	yyrr3467 = yyl3467

	if yyv3467 == nil {
		if yyrl3467, yyrt3467 = z.DecInferLen(yyl3467, z.DecBasicHandle().MaxInitLen, 16); yyrt3467 {
			yyrr3467 = yyrl3467
		}
		yyv3467 = make([]Capability, yyrl3467)
		yyc3467 = true
	}

	if yyl3467 == 0 {
		if len(yyv3467) != 0 {
			yyv3467 = yyv3467[:0]
			yyc3467 = true
		}
	} else if yyl3467 > 0 {

		if yyl3467 > cap(yyv3467) {
			yyrl3467, yyrt3467 = z.DecInferLen(yyl3467, z.DecBasicHandle().MaxInitLen, 16)

			yyv23467 := yyv3467
			yyv3467 = make([]Capability, yyrl3467)
			if len(yyv3467) > 0 {
				copy(yyv3467, yyv23467[:cap(yyv23467)])
			}
			yyc3467 = true

			yyrr3467 = len(yyv3467)
		} else if yyl3467 != len(yyv3467) {
			yyv3467 = yyv3467[:yyl3467]
			yyc3467 = true
		}
		yyj3467 := 0
		for ; yyj3467 < yyrr3467; yyj3467++ {
			if r.TryDecodeAsNil() {
				yyv3467[yyj3467] = ""
			} else {
				yyv3467[yyj3467] = Capability(r.DecodeString())
			}

		}
		if yyrt3467 {
			for ; yyj3467 < yyl3467; yyj3467++ {
				yyv3467 = append(yyv3467, "")
				if r.TryDecodeAsNil() {
					yyv3467[yyj3467] = ""
				} else {
					yyv3467[yyj3467] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3467 := 0; !r.CheckBreak(); yyj3467++ {
			if yyj3467 >= len(yyv3467) {
				yyv3467 = append(yyv3467, "") // var yyz3467 Capability
				yyc3467 = true
			}

			if yyj3467 < len(yyv3467) {
				if r.TryDecodeAsNil() {
					yyv3467[yyj3467] = ""
				} else {
					yyv3467[yyj3467] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3467.End()
	}
	if yyc3467 {
		*v = yyv3467
	}

}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3471 := range v {
		yy3472 := &yyv3471
		yy3472.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3473 := *v
	yyh3473, yyl3473 := z.DecSliceHelperStart()

	var yyrr3473, yyrl3473 int
	var yyc3473, yyrt3473 bool
	_, _, _ = yyc3473, yyrt3473, yyrl3473
	yyrr3473 = yyl3473

	if yyv3473 == nil {
		if yyrl3473, yyrt3473 = z.DecInferLen(yyl3473, z.DecBasicHandle().MaxInitLen, 64); yyrt3473 {
			yyrr3473 = yyrl3473
		}
		yyv3473 = make([]ContainerPort, yyrl3473)
		yyc3473 = true
	}

	if yyl3473 == 0 {
		if len(yyv3473) != 0 {
			yyv3473 = yyv3473[:0]
			yyc3473 = true
		}
	} else if yyl3473 > 0 {

		if yyl3473 > cap(yyv3473) {
			yyrl3473, yyrt3473 = z.DecInferLen(yyl3473, z.DecBasicHandle().MaxInitLen, 64)
			yyv3473 = make([]ContainerPort, yyrl3473)
			yyc3473 = true

			yyrr3473 = len(yyv3473)
		} else if yyl3473 != len(yyv3473) {
			yyv3473 = yyv3473[:yyl3473]
			yyc3473 = true
		}
		yyj3473 := 0
		for ; yyj3473 < yyrr3473; yyj3473++ {
			if r.TryDecodeAsNil() {
				yyv3473[yyj3473] = ContainerPort{}
			} else {
				yyv3474 := &yyv3473[yyj3473]
				yyv3474.CodecDecodeSelf(d)
			}

		}
		if yyrt3473 {
			for ; yyj3473 < yyl3473; yyj3473++ {
				yyv3473 = append(yyv3473, ContainerPort{})
				if r.TryDecodeAsNil() {
					yyv3473[yyj3473] = ContainerPort{}
				} else {
					yyv3475 := &yyv3473[yyj3473]
					yyv3475.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3473 := 0; !r.CheckBreak(); yyj3473++ {
			if yyj3473 >= len(yyv3473) {
				yyv3473 = append(yyv3473, ContainerPort{}) // var yyz3473 ContainerPort
				yyc3473 = true
			}

			if yyj3473 < len(yyv3473) {
				if r.TryDecodeAsNil() {
					yyv3473[yyj3473] = ContainerPort{}
				} else {
					yyv3476 := &yyv3473[yyj3473]
					yyv3476.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3473.End()
	}
	if yyc3473 {
		*v = yyv3473
	}

}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3477 := range v {
		yy3478 := &yyv3477
		yy3478.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3479 := *v
	yyh3479, yyl3479 := z.DecSliceHelperStart()

	var yyrr3479, yyrl3479 int
	var yyc3479, yyrt3479 bool
	_, _, _ = yyc3479, yyrt3479, yyrl3479
	yyrr3479 = yyl3479

	if yyv3479 == nil {
		if yyrl3479, yyrt3479 = z.DecInferLen(yyl3479, z.DecBasicHandle().MaxInitLen, 40); yyrt3479 {
			yyrr3479 = yyrl3479
		}
		yyv3479 = make([]EnvVar, yyrl3479)
		yyc3479 = true
	}

	if yyl3479 == 0 {
		if len(yyv3479) != 0 {
			yyv3479 = yyv3479[:0]
			yyc3479 = true
		}
	} else if yyl3479 > 0 {

		if yyl3479 > cap(yyv3479) {
			yyrl3479, yyrt3479 = z.DecInferLen(yyl3479, z.DecBasicHandle().MaxInitLen, 40)
			yyv3479 = make([]EnvVar, yyrl3479)
			yyc3479 = true

			yyrr3479 = len(yyv3479)
		} else if yyl3479 != len(yyv3479) {
			yyv3479 = yyv3479[:yyl3479]
			yyc3479 = true
		}
		yyj3479 := 0
		for ; yyj3479 < yyrr3479; yyj3479++ {
			if r.TryDecodeAsNil() {
				yyv3479[yyj3479] = EnvVar{}
			} else {
				yyv3480 := &yyv3479[yyj3479]
				yyv3480.CodecDecodeSelf(d)
			}

		}
		if yyrt3479 {
			for ; yyj3479 < yyl3479; yyj3479++ {
				yyv3479 = append(yyv3479, EnvVar{})
				if r.TryDecodeAsNil() {
					yyv3479[yyj3479] = EnvVar{}
				} else {
					yyv3481 := &yyv3479[yyj3479]
					yyv3481.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3479 := 0; !r.CheckBreak(); yyj3479++ {
			if yyj3479 >= len(yyv3479) {
				yyv3479 = append(yyv3479, EnvVar{}) // var yyz3479 EnvVar
				yyc3479 = true
			}

			if yyj3479 < len(yyv3479) {
				if r.TryDecodeAsNil() {
					yyv3479[yyj3479] = EnvVar{}
				} else {
					yyv3482 := &yyv3479[yyj3479]
					yyv3482.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3479.End()
	}
	if yyc3479 {
		*v = yyv3479
	}

}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3483 := range v {
		yy3484 := &yyv3483
		yy3484.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3485 := *v
	yyh3485, yyl3485 := z.DecSliceHelperStart()

	var yyrr3485, yyrl3485 int
	var yyc3485, yyrt3485 bool
	_, _, _ = yyc3485, yyrt3485, yyrl3485
	yyrr3485 = yyl3485

	if yyv3485 == nil {
		if yyrl3485, yyrt3485 = z.DecInferLen(yyl3485, z.DecBasicHandle().MaxInitLen, 40); yyrt3485 {
			yyrr3485 = yyrl3485
		}
		yyv3485 = make([]VolumeMount, yyrl3485)
		yyc3485 = true
	}

	if yyl3485 == 0 {
		if len(yyv3485) != 0 {
			yyv3485 = yyv3485[:0]
			yyc3485 = true
		}
	} else if yyl3485 > 0 {

		if yyl3485 > cap(yyv3485) {
			yyrl3485, yyrt3485 = z.DecInferLen(yyl3485, z.DecBasicHandle().MaxInitLen, 40)
			yyv3485 = make([]VolumeMount, yyrl3485)
			yyc3485 = true

			yyrr3485 = len(yyv3485)
		} else if yyl3485 != len(yyv3485) {
			yyv3485 = yyv3485[:yyl3485]
			yyc3485 = true
		}
		yyj3485 := 0
		for ; yyj3485 < yyrr3485; yyj3485++ {
			if r.TryDecodeAsNil() {
				yyv3485[yyj3485] = VolumeMount{}
			} else {
				yyv3486 := &yyv3485[yyj3485]
				yyv3486.CodecDecodeSelf(d)
			}

		}
		if yyrt3485 {
			for ; yyj3485 < yyl3485; yyj3485++ {
				yyv3485 = append(yyv3485, VolumeMount{})
				if r.TryDecodeAsNil() {
					yyv3485[yyj3485] = VolumeMount{}
				} else {
					yyv3487 := &yyv3485[yyj3485]
					yyv3487.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3485 := 0; !r.CheckBreak(); yyj3485++ {
			if yyj3485 >= len(yyv3485) {
				yyv3485 = append(yyv3485, VolumeMount{}) // var yyz3485 VolumeMount
				yyc3485 = true
			}

			if yyj3485 < len(yyv3485) {
				if r.TryDecodeAsNil() {
					yyv3485[yyj3485] = VolumeMount{}
				} else {
					yyv3488 := &yyv3485[yyj3485]
					yyv3488.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3485.End()
	}
	if yyc3485 {
		*v = yyv3485
	}

}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3489 := range v {
		yy3490 := &yyv3489
		yy3490.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3491 := *v
	yyh3491, yyl3491 := z.DecSliceHelperStart()

	var yyrr3491, yyrl3491 int
	var yyc3491, yyrt3491 bool
	_, _, _ = yyc3491, yyrt3491, yyrl3491
	yyrr3491 = yyl3491

	if yyv3491 == nil {
		if yyrl3491, yyrt3491 = z.DecInferLen(yyl3491, z.DecBasicHandle().MaxInitLen, 144); yyrt3491 {
			yyrr3491 = yyrl3491
		}
		yyv3491 = make([]Volume, yyrl3491)
		yyc3491 = true
	}

	if yyl3491 == 0 {
		if len(yyv3491) != 0 {
			yyv3491 = yyv3491[:0]
			yyc3491 = true
		}
	} else if yyl3491 > 0 {

		if yyl3491 > cap(yyv3491) {
			yyrl3491, yyrt3491 = z.DecInferLen(yyl3491, z.DecBasicHandle().MaxInitLen, 144)
			yyv3491 = make([]Volume, yyrl3491)
			yyc3491 = true

			yyrr3491 = len(yyv3491)
		} else if yyl3491 != len(yyv3491) {
			yyv3491 = yyv3491[:yyl3491]
			yyc3491 = true
		}
		yyj3491 := 0
		for ; yyj3491 < yyrr3491; yyj3491++ {
			if r.TryDecodeAsNil() {
				yyv3491[yyj3491] = Volume{}
			} else {
				yyv3492 := &yyv3491[yyj3491]
				yyv3492.CodecDecodeSelf(d)
			}

		}
		if yyrt3491 {
			for ; yyj3491 < yyl3491; yyj3491++ {
				yyv3491 = append(yyv3491, Volume{})
				if r.TryDecodeAsNil() {
					yyv3491[yyj3491] = Volume{}
				} else {
					yyv3493 := &yyv3491[yyj3491]
					yyv3493.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3491 := 0; !r.CheckBreak(); yyj3491++ {
			if yyj3491 >= len(yyv3491) {
				yyv3491 = append(yyv3491, Volume{}) // var yyz3491 Volume
				yyc3491 = true
			}

			if yyj3491 < len(yyv3491) {
				if r.TryDecodeAsNil() {
					yyv3491[yyj3491] = Volume{}
				} else {
					yyv3494 := &yyv3491[yyj3491]
					yyv3494.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3491.End()
	}
	if yyc3491 {
		*v = yyv3491
	}

}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3495 := range v {
		yy3496 := &yyv3495
		yy3496.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3497 := *v
	yyh3497, yyl3497 := z.DecSliceHelperStart()

	var yyrr3497, yyrl3497 int
	var yyc3497, yyrt3497 bool
	_, _, _ = yyc3497, yyrt3497, yyrl3497
	yyrr3497 = yyl3497

	if yyv3497 == nil {
		if yyrl3497, yyrt3497 = z.DecInferLen(yyl3497, z.DecBasicHandle().MaxInitLen, 256); yyrt3497 {
			yyrr3497 = yyrl3497
		}
		yyv3497 = make([]Container, yyrl3497)
		yyc3497 = true
	}

	if yyl3497 == 0 {
		if len(yyv3497) != 0 {
			yyv3497 = yyv3497[:0]
			yyc3497 = true
		}
	} else if yyl3497 > 0 {

		if yyl3497 > cap(yyv3497) {
			yyrl3497, yyrt3497 = z.DecInferLen(yyl3497, z.DecBasicHandle().MaxInitLen, 256)
			yyv3497 = make([]Container, yyrl3497)
			yyc3497 = true

			yyrr3497 = len(yyv3497)
		} else if yyl3497 != len(yyv3497) {
			yyv3497 = yyv3497[:yyl3497]
			yyc3497 = true
		}
		yyj3497 := 0
		for ; yyj3497 < yyrr3497; yyj3497++ {
			if r.TryDecodeAsNil() {
				yyv3497[yyj3497] = Container{}
			} else {
				yyv3498 := &yyv3497[yyj3497]
				yyv3498.CodecDecodeSelf(d)
			}

		}
		if yyrt3497 {
			for ; yyj3497 < yyl3497; yyj3497++ {
				yyv3497 = append(yyv3497, Container{})
				if r.TryDecodeAsNil() {
					yyv3497[yyj3497] = Container{}
				} else {
					yyv3499 := &yyv3497[yyj3497]
					yyv3499.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3497 := 0; !r.CheckBreak(); yyj3497++ {
			if yyj3497 >= len(yyv3497) {
				yyv3497 = append(yyv3497, Container{}) // var yyz3497 Container
				yyc3497 = true
			}

			if yyj3497 < len(yyv3497) {
				if r.TryDecodeAsNil() {
					yyv3497[yyj3497] = Container{}
				} else {
					yyv3500 := &yyv3497[yyj3497]
					yyv3500.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3497.End()
	}
	if yyc3497 {
		*v = yyv3497
	}

}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3501 := range v {
		yy3502 := &yyv3501
		yy3502.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3503 := *v
	yyh3503, yyl3503 := z.DecSliceHelperStart()

	var yyrr3503, yyrl3503 int
	var yyc3503, yyrt3503 bool
	_, _, _ = yyc3503, yyrt3503, yyrl3503
	yyrr3503 = yyl3503

	if yyv3503 == nil {
		if yyrl3503, yyrt3503 = z.DecInferLen(yyl3503, z.DecBasicHandle().MaxInitLen, 16); yyrt3503 {
			yyrr3503 = yyrl3503
		}
		yyv3503 = make([]LocalObjectReference, yyrl3503)
		yyc3503 = true
	}

	if yyl3503 == 0 {
		if len(yyv3503) != 0 {
			yyv3503 = yyv3503[:0]
			yyc3503 = true
		}
	} else if yyl3503 > 0 {

		if yyl3503 > cap(yyv3503) {
			yyrl3503, yyrt3503 = z.DecInferLen(yyl3503, z.DecBasicHandle().MaxInitLen, 16)
			yyv3503 = make([]LocalObjectReference, yyrl3503)
			yyc3503 = true

			yyrr3503 = len(yyv3503)
		} else if yyl3503 != len(yyv3503) {
			yyv3503 = yyv3503[:yyl3503]
			yyc3503 = true
		}
		yyj3503 := 0
		for ; yyj3503 < yyrr3503; yyj3503++ {
			if r.TryDecodeAsNil() {
				yyv3503[yyj3503] = LocalObjectReference{}
			} else {
				yyv3504 := &yyv3503[yyj3503]
				yyv3504.CodecDecodeSelf(d)
			}

		}
		if yyrt3503 {
			for ; yyj3503 < yyl3503; yyj3503++ {
				yyv3503 = append(yyv3503, LocalObjectReference{})
				if r.TryDecodeAsNil() {
					yyv3503[yyj3503] = LocalObjectReference{}
				} else {
					yyv3505 := &yyv3503[yyj3503]
					yyv3505.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3503 := 0; !r.CheckBreak(); yyj3503++ {
			if yyj3503 >= len(yyv3503) {
				yyv3503 = append(yyv3503, LocalObjectReference{}) // var yyz3503 LocalObjectReference
				yyc3503 = true
			}

			if yyj3503 < len(yyv3503) {
				if r.TryDecodeAsNil() {
					yyv3503[yyj3503] = LocalObjectReference{}
				} else {
					yyv3506 := &yyv3503[yyj3503]
					yyv3506.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3503.End()
	}
	if yyc3503 {
		*v = yyv3503
	}

}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3507 := range v {
		yy3508 := &yyv3507
		yy3508.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3509 := *v
	yyh3509, yyl3509 := z.DecSliceHelperStart()

	var yyrr3509, yyrl3509 int
	var yyc3509, yyrt3509 bool
	_, _, _ = yyc3509, yyrt3509, yyrl3509
	yyrr3509 = yyl3509

	if yyv3509 == nil {
		if yyrl3509, yyrt3509 = z.DecInferLen(yyl3509, z.DecBasicHandle().MaxInitLen, 112); yyrt3509 {
			yyrr3509 = yyrl3509
		}
		yyv3509 = make([]PodCondition, yyrl3509)
		yyc3509 = true
	}

	if yyl3509 == 0 {
		if len(yyv3509) != 0 {
			yyv3509 = yyv3509[:0]
			yyc3509 = true
		}
	} else if yyl3509 > 0 {

		if yyl3509 > cap(yyv3509) {
			yyrl3509, yyrt3509 = z.DecInferLen(yyl3509, z.DecBasicHandle().MaxInitLen, 112)
			yyv3509 = make([]PodCondition, yyrl3509)
			yyc3509 = true

			yyrr3509 = len(yyv3509)
		} else if yyl3509 != len(yyv3509) {
			yyv3509 = yyv3509[:yyl3509]
			yyc3509 = true
		}
		yyj3509 := 0
		for ; yyj3509 < yyrr3509; yyj3509++ {
			if r.TryDecodeAsNil() {
				yyv3509[yyj3509] = PodCondition{}
			} else {
				yyv3510 := &yyv3509[yyj3509]
				yyv3510.CodecDecodeSelf(d)
			}

		}
		if yyrt3509 {
			for ; yyj3509 < yyl3509; yyj3509++ {
				yyv3509 = append(yyv3509, PodCondition{})
				if r.TryDecodeAsNil() {
					yyv3509[yyj3509] = PodCondition{}
				} else {
					yyv3511 := &yyv3509[yyj3509]
					yyv3511.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3509 := 0; !r.CheckBreak(); yyj3509++ {
			if yyj3509 >= len(yyv3509) {
				yyv3509 = append(yyv3509, PodCondition{}) // var yyz3509 PodCondition
				yyc3509 = true
			}

			if yyj3509 < len(yyv3509) {
				if r.TryDecodeAsNil() {
					yyv3509[yyj3509] = PodCondition{}
				} else {
					yyv3512 := &yyv3509[yyj3509]
					yyv3512.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3509.End()
	}
	if yyc3509 {
		*v = yyv3509
	}

}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3513 := range v {
		yy3514 := &yyv3513
		yy3514.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3515 := *v
	yyh3515, yyl3515 := z.DecSliceHelperStart()

	var yyrr3515, yyrl3515 int
	var yyc3515, yyrt3515 bool
	_, _, _ = yyc3515, yyrt3515, yyrl3515
	yyrr3515 = yyl3515

	if yyv3515 == nil {
		if yyrl3515, yyrt3515 = z.DecInferLen(yyl3515, z.DecBasicHandle().MaxInitLen, 128); yyrt3515 {
			yyrr3515 = yyrl3515
		}
		yyv3515 = make([]ContainerStatus, yyrl3515)
		yyc3515 = true
	}

	if yyl3515 == 0 {
		if len(yyv3515) != 0 {
			yyv3515 = yyv3515[:0]
			yyc3515 = true
		}
	} else if yyl3515 > 0 {

		if yyl3515 > cap(yyv3515) {
			yyrl3515, yyrt3515 = z.DecInferLen(yyl3515, z.DecBasicHandle().MaxInitLen, 128)
			yyv3515 = make([]ContainerStatus, yyrl3515)
			yyc3515 = true

			yyrr3515 = len(yyv3515)
		} else if yyl3515 != len(yyv3515) {
			yyv3515 = yyv3515[:yyl3515]
			yyc3515 = true
		}
		yyj3515 := 0
		for ; yyj3515 < yyrr3515; yyj3515++ {
			if r.TryDecodeAsNil() {
				yyv3515[yyj3515] = ContainerStatus{}
			} else {
				yyv3516 := &yyv3515[yyj3515]
				yyv3516.CodecDecodeSelf(d)
			}

		}
		if yyrt3515 {
			for ; yyj3515 < yyl3515; yyj3515++ {
				yyv3515 = append(yyv3515, ContainerStatus{})
				if r.TryDecodeAsNil() {
					yyv3515[yyj3515] = ContainerStatus{}
				} else {
					yyv3517 := &yyv3515[yyj3515]
					yyv3517.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3515 := 0; !r.CheckBreak(); yyj3515++ {
			if yyj3515 >= len(yyv3515) {
				yyv3515 = append(yyv3515, ContainerStatus{}) // var yyz3515 ContainerStatus
				yyc3515 = true
			}

			if yyj3515 < len(yyv3515) {
				if r.TryDecodeAsNil() {
					yyv3515[yyj3515] = ContainerStatus{}
				} else {
					yyv3518 := &yyv3515[yyj3515]
					yyv3518.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3515.End()
	}
	if yyc3515 {
		*v = yyv3515
	}

}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3519 := range v {
		yy3520 := &yyv3519
		yy3520.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3521 := *v
	yyh3521, yyl3521 := z.DecSliceHelperStart()

	var yyrr3521, yyrl3521 int
	var yyc3521, yyrt3521 bool
	_, _, _ = yyc3521, yyrt3521, yyrl3521
	yyrr3521 = yyl3521

	if yyv3521 == nil {
		if yyrl3521, yyrt3521 = z.DecInferLen(yyl3521, z.DecBasicHandle().MaxInitLen, 520); yyrt3521 {
			yyrr3521 = yyrl3521
		}
		yyv3521 = make([]Pod, yyrl3521)
		yyc3521 = true
	}

	if yyl3521 == 0 {
		if len(yyv3521) != 0 {
			yyv3521 = yyv3521[:0]
			yyc3521 = true
		}
	} else if yyl3521 > 0 {

		if yyl3521 > cap(yyv3521) {
			yyrl3521, yyrt3521 = z.DecInferLen(yyl3521, z.DecBasicHandle().MaxInitLen, 520)
			yyv3521 = make([]Pod, yyrl3521)
			yyc3521 = true

			yyrr3521 = len(yyv3521)
		} else if yyl3521 != len(yyv3521) {
			yyv3521 = yyv3521[:yyl3521]
			yyc3521 = true
		}
		yyj3521 := 0
		for ; yyj3521 < yyrr3521; yyj3521++ {
			if r.TryDecodeAsNil() {
				yyv3521[yyj3521] = Pod{}
			} else {
				yyv3522 := &yyv3521[yyj3521]
				yyv3522.CodecDecodeSelf(d)
			}

		}
		if yyrt3521 {
			for ; yyj3521 < yyl3521; yyj3521++ {
				yyv3521 = append(yyv3521, Pod{})
				if r.TryDecodeAsNil() {
					yyv3521[yyj3521] = Pod{}
				} else {
					yyv3523 := &yyv3521[yyj3521]
					yyv3523.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3521 := 0; !r.CheckBreak(); yyj3521++ {
			if yyj3521 >= len(yyv3521) {
				yyv3521 = append(yyv3521, Pod{}) // var yyz3521 Pod
				yyc3521 = true
			}

			if yyj3521 < len(yyv3521) {
				if r.TryDecodeAsNil() {
					yyv3521[yyj3521] = Pod{}
				} else {
					yyv3524 := &yyv3521[yyj3521]
					yyv3524.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3521.End()
	}
	if yyc3521 {
		*v = yyv3521
	}

}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3525 := range v {
		yy3526 := &yyv3525
		yy3526.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3527 := *v
	yyh3527, yyl3527 := z.DecSliceHelperStart()

	var yyrr3527, yyrl3527 int
	var yyc3527, yyrt3527 bool
	_, _, _ = yyc3527, yyrt3527, yyrl3527
	yyrr3527 = yyl3527

	if yyv3527 == nil {
		if yyrl3527, yyrt3527 = z.DecInferLen(yyl3527, z.DecBasicHandle().MaxInitLen, 544); yyrt3527 {
			yyrr3527 = yyrl3527
		}
		yyv3527 = make([]PodTemplate, yyrl3527)
		yyc3527 = true
	}

	if yyl3527 == 0 {
		if len(yyv3527) != 0 {
			yyv3527 = yyv3527[:0]
			yyc3527 = true
		}
	} else if yyl3527 > 0 {

		if yyl3527 > cap(yyv3527) {
			yyrl3527, yyrt3527 = z.DecInferLen(yyl3527, z.DecBasicHandle().MaxInitLen, 544)
			yyv3527 = make([]PodTemplate, yyrl3527)
			yyc3527 = true

			yyrr3527 = len(yyv3527)
		} else if yyl3527 != len(yyv3527) {
			yyv3527 = yyv3527[:yyl3527]
			yyc3527 = true
		}
		yyj3527 := 0
		for ; yyj3527 < yyrr3527; yyj3527++ {
			if r.TryDecodeAsNil() {
				yyv3527[yyj3527] = PodTemplate{}
			} else {
				yyv3528 := &yyv3527[yyj3527]
				yyv3528.CodecDecodeSelf(d)
			}

		}
		if yyrt3527 {
			for ; yyj3527 < yyl3527; yyj3527++ {
				yyv3527 = append(yyv3527, PodTemplate{})
				if r.TryDecodeAsNil() {
					yyv3527[yyj3527] = PodTemplate{}
				} else {
					yyv3529 := &yyv3527[yyj3527]
					yyv3529.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3527 := 0; !r.CheckBreak(); yyj3527++ {
			if yyj3527 >= len(yyv3527) {
				yyv3527 = append(yyv3527, PodTemplate{}) // var yyz3527 PodTemplate
				yyc3527 = true
			}

			if yyj3527 < len(yyv3527) {
				if r.TryDecodeAsNil() {
					yyv3527[yyj3527] = PodTemplate{}
				} else {
					yyv3530 := &yyv3527[yyj3527]
					yyv3530.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3527.End()
	}
	if yyc3527 {
		*v = yyv3527
	}

}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3531 := range v {
		yy3532 := &yyv3531
		yy3532.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3533 := *v
	yyh3533, yyl3533 := z.DecSliceHelperStart()

	var yyrr3533, yyrl3533 int
	var yyc3533, yyrt3533 bool
	_, _, _ = yyc3533, yyrt3533, yyrl3533
	yyrr3533 = yyl3533

	if yyv3533 == nil {
		if yyrl3533, yyrt3533 = z.DecInferLen(yyl3533, z.DecBasicHandle().MaxInitLen, 232); yyrt3533 {
			yyrr3533 = yyrl3533
		}
		yyv3533 = make([]ReplicationController, yyrl3533)
		yyc3533 = true
	}

	if yyl3533 == 0 {
		if len(yyv3533) != 0 {
			yyv3533 = yyv3533[:0]
			yyc3533 = true
		}
	} else if yyl3533 > 0 {

		if yyl3533 > cap(yyv3533) {
			yyrl3533, yyrt3533 = z.DecInferLen(yyl3533, z.DecBasicHandle().MaxInitLen, 232)
			yyv3533 = make([]ReplicationController, yyrl3533)
			yyc3533 = true

			yyrr3533 = len(yyv3533)
		} else if yyl3533 != len(yyv3533) {
			yyv3533 = yyv3533[:yyl3533]
			yyc3533 = true
		}
		yyj3533 := 0
		for ; yyj3533 < yyrr3533; yyj3533++ {
			if r.TryDecodeAsNil() {
				yyv3533[yyj3533] = ReplicationController{}
			} else {
				yyv3534 := &yyv3533[yyj3533]
				yyv3534.CodecDecodeSelf(d)
			}

		}
		if yyrt3533 {
			for ; yyj3533 < yyl3533; yyj3533++ {
				yyv3533 = append(yyv3533, ReplicationController{})
				if r.TryDecodeAsNil() {
					yyv3533[yyj3533] = ReplicationController{}
				} else {
					yyv3535 := &yyv3533[yyj3533]
					yyv3535.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3533 := 0; !r.CheckBreak(); yyj3533++ {
			if yyj3533 >= len(yyv3533) {
				yyv3533 = append(yyv3533, ReplicationController{}) // var yyz3533 ReplicationController
				yyc3533 = true
			}

			if yyj3533 < len(yyv3533) {
				if r.TryDecodeAsNil() {
					yyv3533[yyj3533] = ReplicationController{}
				} else {
					yyv3536 := &yyv3533[yyj3533]
					yyv3536.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3533.End()
	}
	if yyc3533 {
		*v = yyv3533
	}

}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3537 := range v {
		yy3538 := &yyv3537
		yy3538.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3539 := *v
	yyh3539, yyl3539 := z.DecSliceHelperStart()

	var yyrr3539, yyrl3539 int
	var yyc3539, yyrt3539 bool
	_, _, _ = yyc3539, yyrt3539, yyrl3539
	yyrr3539 = yyl3539

	if yyv3539 == nil {
		if yyrl3539, yyrt3539 = z.DecInferLen(yyl3539, z.DecBasicHandle().MaxInitLen, 32); yyrt3539 {
			yyrr3539 = yyrl3539
		}
		yyv3539 = make([]LoadBalancerIngress, yyrl3539)
		yyc3539 = true
	}

	if yyl3539 == 0 {
		if len(yyv3539) != 0 {
			yyv3539 = yyv3539[:0]
			yyc3539 = true
		}
	} else if yyl3539 > 0 {

		if yyl3539 > cap(yyv3539) {
			yyrl3539, yyrt3539 = z.DecInferLen(yyl3539, z.DecBasicHandle().MaxInitLen, 32)
			yyv3539 = make([]LoadBalancerIngress, yyrl3539)
			yyc3539 = true

			yyrr3539 = len(yyv3539)
		} else if yyl3539 != len(yyv3539) {
			yyv3539 = yyv3539[:yyl3539]
			yyc3539 = true
		}
		yyj3539 := 0
		for ; yyj3539 < yyrr3539; yyj3539++ {
			if r.TryDecodeAsNil() {
				yyv3539[yyj3539] = LoadBalancerIngress{}
			} else {
				yyv3540 := &yyv3539[yyj3539]
				yyv3540.CodecDecodeSelf(d)
			}

		}
		if yyrt3539 {
			for ; yyj3539 < yyl3539; yyj3539++ {
				yyv3539 = append(yyv3539, LoadBalancerIngress{})
				if r.TryDecodeAsNil() {
					yyv3539[yyj3539] = LoadBalancerIngress{}
				} else {
					yyv3541 := &yyv3539[yyj3539]
					yyv3541.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3539 := 0; !r.CheckBreak(); yyj3539++ {
			if yyj3539 >= len(yyv3539) {
				yyv3539 = append(yyv3539, LoadBalancerIngress{}) // var yyz3539 LoadBalancerIngress
				yyc3539 = true
			}

			if yyj3539 < len(yyv3539) {
				if r.TryDecodeAsNil() {
					yyv3539[yyj3539] = LoadBalancerIngress{}
				} else {
					yyv3542 := &yyv3539[yyj3539]
					yyv3542.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3539.End()
	}
	if yyc3539 {
		*v = yyv3539
	}

}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3543 := range v {
		yy3544 := &yyv3543
		yy3544.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3545 := *v
	yyh3545, yyl3545 := z.DecSliceHelperStart()

	var yyrr3545, yyrl3545 int
	var yyc3545, yyrt3545 bool
	_, _, _ = yyc3545, yyrt3545, yyrl3545
	yyrr3545 = yyl3545

	if yyv3545 == nil {
		if yyrl3545, yyrt3545 = z.DecInferLen(yyl3545, z.DecBasicHandle().MaxInitLen, 80); yyrt3545 {
			yyrr3545 = yyrl3545
		}
		yyv3545 = make([]ServicePort, yyrl3545)
		yyc3545 = true
	}

	if yyl3545 == 0 {
		if len(yyv3545) != 0 {
			yyv3545 = yyv3545[:0]
			yyc3545 = true
		}
	} else if yyl3545 > 0 {

		if yyl3545 > cap(yyv3545) {
			yyrl3545, yyrt3545 = z.DecInferLen(yyl3545, z.DecBasicHandle().MaxInitLen, 80)
			yyv3545 = make([]ServicePort, yyrl3545)
			yyc3545 = true

			yyrr3545 = len(yyv3545)
		} else if yyl3545 != len(yyv3545) {
			yyv3545 = yyv3545[:yyl3545]
			yyc3545 = true
		}
		yyj3545 := 0
		for ; yyj3545 < yyrr3545; yyj3545++ {
			if r.TryDecodeAsNil() {
				yyv3545[yyj3545] = ServicePort{}
			} else {
				yyv3546 := &yyv3545[yyj3545]
				yyv3546.CodecDecodeSelf(d)
			}

		}
		if yyrt3545 {
			for ; yyj3545 < yyl3545; yyj3545++ {
				yyv3545 = append(yyv3545, ServicePort{})
				if r.TryDecodeAsNil() {
					yyv3545[yyj3545] = ServicePort{}
				} else {
					yyv3547 := &yyv3545[yyj3545]
					yyv3547.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3545 := 0; !r.CheckBreak(); yyj3545++ {
			if yyj3545 >= len(yyv3545) {
				yyv3545 = append(yyv3545, ServicePort{}) // var yyz3545 ServicePort
				yyc3545 = true
			}

			if yyj3545 < len(yyv3545) {
				if r.TryDecodeAsNil() {
					yyv3545[yyj3545] = ServicePort{}
				} else {
					yyv3548 := &yyv3545[yyj3545]
					yyv3548.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3545.End()
	}
	if yyc3545 {
		*v = yyv3545
	}

}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3549 := range v {
		yy3550 := &yyv3549
		yy3550.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3551 := *v
	yyh3551, yyl3551 := z.DecSliceHelperStart()

	var yyrr3551, yyrl3551 int
	var yyc3551, yyrt3551 bool
	_, _, _ = yyc3551, yyrt3551, yyrl3551
	yyrr3551 = yyl3551

	if yyv3551 == nil {
		if yyrl3551, yyrt3551 = z.DecInferLen(yyl3551, z.DecBasicHandle().MaxInitLen, 360); yyrt3551 {
			yyrr3551 = yyrl3551
		}
		yyv3551 = make([]Service, yyrl3551)
		yyc3551 = true
	}

	if yyl3551 == 0 {
		if len(yyv3551) != 0 {
			yyv3551 = yyv3551[:0]
			yyc3551 = true
		}
	} else if yyl3551 > 0 {

		if yyl3551 > cap(yyv3551) {
			yyrl3551, yyrt3551 = z.DecInferLen(yyl3551, z.DecBasicHandle().MaxInitLen, 360)
			yyv3551 = make([]Service, yyrl3551)
			yyc3551 = true

			yyrr3551 = len(yyv3551)
		} else if yyl3551 != len(yyv3551) {
			yyv3551 = yyv3551[:yyl3551]
			yyc3551 = true
		}
		yyj3551 := 0
		for ; yyj3551 < yyrr3551; yyj3551++ {
			if r.TryDecodeAsNil() {
				yyv3551[yyj3551] = Service{}
			} else {
				yyv3552 := &yyv3551[yyj3551]
				yyv3552.CodecDecodeSelf(d)
			}

		}
		if yyrt3551 {
			for ; yyj3551 < yyl3551; yyj3551++ {
				yyv3551 = append(yyv3551, Service{})
				if r.TryDecodeAsNil() {
					yyv3551[yyj3551] = Service{}
				} else {
					yyv3553 := &yyv3551[yyj3551]
					yyv3553.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3551 := 0; !r.CheckBreak(); yyj3551++ {
			if yyj3551 >= len(yyv3551) {
				yyv3551 = append(yyv3551, Service{}) // var yyz3551 Service
				yyc3551 = true
			}

			if yyj3551 < len(yyv3551) {
				if r.TryDecodeAsNil() {
					yyv3551[yyj3551] = Service{}
				} else {
					yyv3554 := &yyv3551[yyj3551]
					yyv3554.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3551.End()
	}
	if yyc3551 {
		*v = yyv3551
	}

}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3555 := range v {
		yy3556 := &yyv3555
		yy3556.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3557 := *v
	yyh3557, yyl3557 := z.DecSliceHelperStart()

	var yyrr3557, yyrl3557 int
	var yyc3557, yyrt3557 bool
	_, _, _ = yyc3557, yyrt3557, yyrl3557
	yyrr3557 = yyl3557

	if yyv3557 == nil {
		if yyrl3557, yyrt3557 = z.DecInferLen(yyl3557, z.DecBasicHandle().MaxInitLen, 112); yyrt3557 {
			yyrr3557 = yyrl3557
		}
		yyv3557 = make([]ObjectReference, yyrl3557)
		yyc3557 = true
	}

	if yyl3557 == 0 {
		if len(yyv3557) != 0 {
			yyv3557 = yyv3557[:0]
			yyc3557 = true
		}
	} else if yyl3557 > 0 {

		if yyl3557 > cap(yyv3557) {
			yyrl3557, yyrt3557 = z.DecInferLen(yyl3557, z.DecBasicHandle().MaxInitLen, 112)
			yyv3557 = make([]ObjectReference, yyrl3557)
			yyc3557 = true

			yyrr3557 = len(yyv3557)
		} else if yyl3557 != len(yyv3557) {
			yyv3557 = yyv3557[:yyl3557]
			yyc3557 = true
		}
		yyj3557 := 0
		for ; yyj3557 < yyrr3557; yyj3557++ {
			if r.TryDecodeAsNil() {
				yyv3557[yyj3557] = ObjectReference{}
			} else {
				yyv3558 := &yyv3557[yyj3557]
				yyv3558.CodecDecodeSelf(d)
			}

		}
		if yyrt3557 {
			for ; yyj3557 < yyl3557; yyj3557++ {
				yyv3557 = append(yyv3557, ObjectReference{})
				if r.TryDecodeAsNil() {
					yyv3557[yyj3557] = ObjectReference{}
				} else {
					yyv3559 := &yyv3557[yyj3557]
					yyv3559.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3557 := 0; !r.CheckBreak(); yyj3557++ {
			if yyj3557 >= len(yyv3557) {
				yyv3557 = append(yyv3557, ObjectReference{}) // var yyz3557 ObjectReference
				yyc3557 = true
			}

			if yyj3557 < len(yyv3557) {
				if r.TryDecodeAsNil() {
					yyv3557[yyj3557] = ObjectReference{}
				} else {
					yyv3560 := &yyv3557[yyj3557]
					yyv3560.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3557.End()
	}
	if yyc3557 {
		*v = yyv3557
	}

}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3561 := range v {
		yy3562 := &yyv3561
		yy3562.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3563 := *v
	yyh3563, yyl3563 := z.DecSliceHelperStart()

	var yyrr3563, yyrl3563 int
	var yyc3563, yyrt3563 bool
	_, _, _ = yyc3563, yyrt3563, yyrl3563
	yyrr3563 = yyl3563

	if yyv3563 == nil {
		if yyrl3563, yyrt3563 = z.DecInferLen(yyl3563, z.DecBasicHandle().MaxInitLen, 240); yyrt3563 {
			yyrr3563 = yyrl3563
		}
		yyv3563 = make([]ServiceAccount, yyrl3563)
		yyc3563 = true
	}

	if yyl3563 == 0 {
		if len(yyv3563) != 0 {
			yyv3563 = yyv3563[:0]
			yyc3563 = true
		}
	} else if yyl3563 > 0 {

		if yyl3563 > cap(yyv3563) {
			yyrl3563, yyrt3563 = z.DecInferLen(yyl3563, z.DecBasicHandle().MaxInitLen, 240)
			yyv3563 = make([]ServiceAccount, yyrl3563)
			yyc3563 = true

			yyrr3563 = len(yyv3563)
		} else if yyl3563 != len(yyv3563) {
			yyv3563 = yyv3563[:yyl3563]
			yyc3563 = true
		}
		yyj3563 := 0
		for ; yyj3563 < yyrr3563; yyj3563++ {
			if r.TryDecodeAsNil() {
				yyv3563[yyj3563] = ServiceAccount{}
			} else {
				yyv3564 := &yyv3563[yyj3563]
				yyv3564.CodecDecodeSelf(d)
			}

		}
		if yyrt3563 {
			for ; yyj3563 < yyl3563; yyj3563++ {
				yyv3563 = append(yyv3563, ServiceAccount{})
				if r.TryDecodeAsNil() {
					yyv3563[yyj3563] = ServiceAccount{}
				} else {
					yyv3565 := &yyv3563[yyj3563]
					yyv3565.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3563 := 0; !r.CheckBreak(); yyj3563++ {
			if yyj3563 >= len(yyv3563) {
				yyv3563 = append(yyv3563, ServiceAccount{}) // var yyz3563 ServiceAccount
				yyc3563 = true
			}

			if yyj3563 < len(yyv3563) {
				if r.TryDecodeAsNil() {
					yyv3563[yyj3563] = ServiceAccount{}
				} else {
					yyv3566 := &yyv3563[yyj3563]
					yyv3566.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3563.End()
	}
	if yyc3563 {
		*v = yyv3563
	}

}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3567 := range v {
		yy3568 := &yyv3567
		yy3568.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3569 := *v
	yyh3569, yyl3569 := z.DecSliceHelperStart()

	var yyrr3569, yyrl3569 int
	var yyc3569, yyrt3569 bool
	_, _, _ = yyc3569, yyrt3569, yyrl3569
	yyrr3569 = yyl3569

	if yyv3569 == nil {
		if yyrl3569, yyrt3569 = z.DecInferLen(yyl3569, z.DecBasicHandle().MaxInitLen, 72); yyrt3569 {
			yyrr3569 = yyrl3569
		}
		yyv3569 = make([]EndpointSubset, yyrl3569)
		yyc3569 = true
	}

	if yyl3569 == 0 {
		if len(yyv3569) != 0 {
			yyv3569 = yyv3569[:0]
			yyc3569 = true
		}
	} else if yyl3569 > 0 {

		if yyl3569 > cap(yyv3569) {
			yyrl3569, yyrt3569 = z.DecInferLen(yyl3569, z.DecBasicHandle().MaxInitLen, 72)
			yyv3569 = make([]EndpointSubset, yyrl3569)
			yyc3569 = true

			yyrr3569 = len(yyv3569)
		} else if yyl3569 != len(yyv3569) {
			yyv3569 = yyv3569[:yyl3569]
			yyc3569 = true
		}
		yyj3569 := 0
		for ; yyj3569 < yyrr3569; yyj3569++ {
			if r.TryDecodeAsNil() {
				yyv3569[yyj3569] = EndpointSubset{}
			} else {
				yyv3570 := &yyv3569[yyj3569]
				yyv3570.CodecDecodeSelf(d)
			}

		}
		if yyrt3569 {
			for ; yyj3569 < yyl3569; yyj3569++ {
				yyv3569 = append(yyv3569, EndpointSubset{})
				if r.TryDecodeAsNil() {
					yyv3569[yyj3569] = EndpointSubset{}
				} else {
					yyv3571 := &yyv3569[yyj3569]
					yyv3571.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3569 := 0; !r.CheckBreak(); yyj3569++ {
			if yyj3569 >= len(yyv3569) {
				yyv3569 = append(yyv3569, EndpointSubset{}) // var yyz3569 EndpointSubset
				yyc3569 = true
			}

			if yyj3569 < len(yyv3569) {
				if r.TryDecodeAsNil() {
					yyv3569[yyj3569] = EndpointSubset{}
				} else {
					yyv3572 := &yyv3569[yyj3569]
					yyv3572.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3569.End()
	}
	if yyc3569 {
		*v = yyv3569
	}

}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3573 := range v {
		yy3574 := &yyv3573
		yy3574.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3575 := *v
	yyh3575, yyl3575 := z.DecSliceHelperStart()

	var yyrr3575, yyrl3575 int
	var yyc3575, yyrt3575 bool
	_, _, _ = yyc3575, yyrt3575, yyrl3575
	yyrr3575 = yyl3575

	if yyv3575 == nil {
		if yyrl3575, yyrt3575 = z.DecInferLen(yyl3575, z.DecBasicHandle().MaxInitLen, 24); yyrt3575 {
			yyrr3575 = yyrl3575
		}
		yyv3575 = make([]EndpointAddress, yyrl3575)
		yyc3575 = true
	}

	if yyl3575 == 0 {
		if len(yyv3575) != 0 {
			yyv3575 = yyv3575[:0]
			yyc3575 = true
		}
	} else if yyl3575 > 0 {

		if yyl3575 > cap(yyv3575) {
			yyrl3575, yyrt3575 = z.DecInferLen(yyl3575, z.DecBasicHandle().MaxInitLen, 24)
			yyv3575 = make([]EndpointAddress, yyrl3575)
			yyc3575 = true

			yyrr3575 = len(yyv3575)
		} else if yyl3575 != len(yyv3575) {
			yyv3575 = yyv3575[:yyl3575]
			yyc3575 = true
		}
		yyj3575 := 0
		for ; yyj3575 < yyrr3575; yyj3575++ {
			if r.TryDecodeAsNil() {
				yyv3575[yyj3575] = EndpointAddress{}
			} else {
				yyv3576 := &yyv3575[yyj3575]
				yyv3576.CodecDecodeSelf(d)
			}

		}
		if yyrt3575 {
			for ; yyj3575 < yyl3575; yyj3575++ {
				yyv3575 = append(yyv3575, EndpointAddress{})
				if r.TryDecodeAsNil() {
					yyv3575[yyj3575] = EndpointAddress{}
				} else {
					yyv3577 := &yyv3575[yyj3575]
					yyv3577.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3575 := 0; !r.CheckBreak(); yyj3575++ {
			if yyj3575 >= len(yyv3575) {
				yyv3575 = append(yyv3575, EndpointAddress{}) // var yyz3575 EndpointAddress
				yyc3575 = true
			}

			if yyj3575 < len(yyv3575) {
				if r.TryDecodeAsNil() {
					yyv3575[yyj3575] = EndpointAddress{}
				} else {
					yyv3578 := &yyv3575[yyj3575]
					yyv3578.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3575.End()
	}
	if yyc3575 {
		*v = yyv3575
	}

}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3579 := range v {
		yy3580 := &yyv3579
		yy3580.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3581 := *v
	yyh3581, yyl3581 := z.DecSliceHelperStart()

	var yyrr3581, yyrl3581 int
	var yyc3581, yyrt3581 bool
	_, _, _ = yyc3581, yyrt3581, yyrl3581
	yyrr3581 = yyl3581

	if yyv3581 == nil {
		if yyrl3581, yyrt3581 = z.DecInferLen(yyl3581, z.DecBasicHandle().MaxInitLen, 40); yyrt3581 {
			yyrr3581 = yyrl3581
		}
		yyv3581 = make([]EndpointPort, yyrl3581)
		yyc3581 = true
	}

	if yyl3581 == 0 {
		if len(yyv3581) != 0 {
			yyv3581 = yyv3581[:0]
			yyc3581 = true
		}
	} else if yyl3581 > 0 {

		if yyl3581 > cap(yyv3581) {
			yyrl3581, yyrt3581 = z.DecInferLen(yyl3581, z.DecBasicHandle().MaxInitLen, 40)
			yyv3581 = make([]EndpointPort, yyrl3581)
			yyc3581 = true

			yyrr3581 = len(yyv3581)
		} else if yyl3581 != len(yyv3581) {
			yyv3581 = yyv3581[:yyl3581]
			yyc3581 = true
		}
		yyj3581 := 0
		for ; yyj3581 < yyrr3581; yyj3581++ {
			if r.TryDecodeAsNil() {
				yyv3581[yyj3581] = EndpointPort{}
			} else {
				yyv3582 := &yyv3581[yyj3581]
				yyv3582.CodecDecodeSelf(d)
			}

		}
		if yyrt3581 {
			for ; yyj3581 < yyl3581; yyj3581++ {
				yyv3581 = append(yyv3581, EndpointPort{})
				if r.TryDecodeAsNil() {
					yyv3581[yyj3581] = EndpointPort{}
				} else {
					yyv3583 := &yyv3581[yyj3581]
					yyv3583.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3581 := 0; !r.CheckBreak(); yyj3581++ {
			if yyj3581 >= len(yyv3581) {
				yyv3581 = append(yyv3581, EndpointPort{}) // var yyz3581 EndpointPort
				yyc3581 = true
			}

			if yyj3581 < len(yyv3581) {
				if r.TryDecodeAsNil() {
					yyv3581[yyj3581] = EndpointPort{}
				} else {
					yyv3584 := &yyv3581[yyj3581]
					yyv3584.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3581.End()
	}
	if yyc3581 {
		*v = yyv3581
	}

}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3585 := range v {
		yy3586 := &yyv3585
		yy3586.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3587 := *v
	yyh3587, yyl3587 := z.DecSliceHelperStart()

	var yyrr3587, yyrl3587 int
	var yyc3587, yyrt3587 bool
	_, _, _ = yyc3587, yyrt3587, yyrl3587
	yyrr3587 = yyl3587

	if yyv3587 == nil {
		if yyrl3587, yyrt3587 = z.DecInferLen(yyl3587, z.DecBasicHandle().MaxInitLen, 216); yyrt3587 {
			yyrr3587 = yyrl3587
		}
		yyv3587 = make([]Endpoints, yyrl3587)
		yyc3587 = true
	}

	if yyl3587 == 0 {
		if len(yyv3587) != 0 {
			yyv3587 = yyv3587[:0]
			yyc3587 = true
		}
	} else if yyl3587 > 0 {

		if yyl3587 > cap(yyv3587) {
			yyrl3587, yyrt3587 = z.DecInferLen(yyl3587, z.DecBasicHandle().MaxInitLen, 216)
			yyv3587 = make([]Endpoints, yyrl3587)
			yyc3587 = true

			yyrr3587 = len(yyv3587)
		} else if yyl3587 != len(yyv3587) {
			yyv3587 = yyv3587[:yyl3587]
			yyc3587 = true
		}
		yyj3587 := 0
		for ; yyj3587 < yyrr3587; yyj3587++ {
			if r.TryDecodeAsNil() {
				yyv3587[yyj3587] = Endpoints{}
			} else {
				yyv3588 := &yyv3587[yyj3587]
				yyv3588.CodecDecodeSelf(d)
			}

		}
		if yyrt3587 {
			for ; yyj3587 < yyl3587; yyj3587++ {
				yyv3587 = append(yyv3587, Endpoints{})
				if r.TryDecodeAsNil() {
					yyv3587[yyj3587] = Endpoints{}
				} else {
					yyv3589 := &yyv3587[yyj3587]
					yyv3589.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3587 := 0; !r.CheckBreak(); yyj3587++ {
			if yyj3587 >= len(yyv3587) {
				yyv3587 = append(yyv3587, Endpoints{}) // var yyz3587 Endpoints
				yyc3587 = true
			}

			if yyj3587 < len(yyv3587) {
				if r.TryDecodeAsNil() {
					yyv3587[yyj3587] = Endpoints{}
				} else {
					yyv3590 := &yyv3587[yyj3587]
					yyv3590.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3587.End()
	}
	if yyc3587 {
		*v = yyv3587
	}

}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3591 := range v {
		yy3592 := &yyv3591
		yy3592.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3593 := *v
	yyh3593, yyl3593 := z.DecSliceHelperStart()

	var yyrr3593, yyrl3593 int
	var yyc3593, yyrt3593 bool
	_, _, _ = yyc3593, yyrt3593, yyrl3593
	yyrr3593 = yyl3593

	if yyv3593 == nil {
		if yyrl3593, yyrt3593 = z.DecInferLen(yyl3593, z.DecBasicHandle().MaxInitLen, 112); yyrt3593 {
			yyrr3593 = yyrl3593
		}
		yyv3593 = make([]NodeCondition, yyrl3593)
		yyc3593 = true
	}

	if yyl3593 == 0 {
		if len(yyv3593) != 0 {
			yyv3593 = yyv3593[:0]
			yyc3593 = true
		}
	} else if yyl3593 > 0 {

		if yyl3593 > cap(yyv3593) {
			yyrl3593, yyrt3593 = z.DecInferLen(yyl3593, z.DecBasicHandle().MaxInitLen, 112)
			yyv3593 = make([]NodeCondition, yyrl3593)
			yyc3593 = true

			yyrr3593 = len(yyv3593)
		} else if yyl3593 != len(yyv3593) {
			yyv3593 = yyv3593[:yyl3593]
			yyc3593 = true
		}
		yyj3593 := 0
		for ; yyj3593 < yyrr3593; yyj3593++ {
			if r.TryDecodeAsNil() {
				yyv3593[yyj3593] = NodeCondition{}
			} else {
				yyv3594 := &yyv3593[yyj3593]
				yyv3594.CodecDecodeSelf(d)
			}

		}
		if yyrt3593 {
			for ; yyj3593 < yyl3593; yyj3593++ {
				yyv3593 = append(yyv3593, NodeCondition{})
				if r.TryDecodeAsNil() {
					yyv3593[yyj3593] = NodeCondition{}
				} else {
					yyv3595 := &yyv3593[yyj3593]
					yyv3595.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3593 := 0; !r.CheckBreak(); yyj3593++ {
			if yyj3593 >= len(yyv3593) {
				yyv3593 = append(yyv3593, NodeCondition{}) // var yyz3593 NodeCondition
				yyc3593 = true
			}

			if yyj3593 < len(yyv3593) {
				if r.TryDecodeAsNil() {
					yyv3593[yyj3593] = NodeCondition{}
				} else {
					yyv3596 := &yyv3593[yyj3593]
					yyv3596.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3593.End()
	}
	if yyc3593 {
		*v = yyv3593
	}

}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3597 := range v {
		yy3598 := &yyv3597
		yy3598.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3599 := *v
	yyh3599, yyl3599 := z.DecSliceHelperStart()

	var yyrr3599, yyrl3599 int
	var yyc3599, yyrt3599 bool
	_, _, _ = yyc3599, yyrt3599, yyrl3599
	yyrr3599 = yyl3599

	if yyv3599 == nil {
		if yyrl3599, yyrt3599 = z.DecInferLen(yyl3599, z.DecBasicHandle().MaxInitLen, 32); yyrt3599 {
			yyrr3599 = yyrl3599
		}
		yyv3599 = make([]NodeAddress, yyrl3599)
		yyc3599 = true
	}

	if yyl3599 == 0 {
		if len(yyv3599) != 0 {
			yyv3599 = yyv3599[:0]
			yyc3599 = true
		}
	} else if yyl3599 > 0 {

		if yyl3599 > cap(yyv3599) {
			yyrl3599, yyrt3599 = z.DecInferLen(yyl3599, z.DecBasicHandle().MaxInitLen, 32)
			yyv3599 = make([]NodeAddress, yyrl3599)
			yyc3599 = true

			yyrr3599 = len(yyv3599)
		} else if yyl3599 != len(yyv3599) {
			yyv3599 = yyv3599[:yyl3599]
			yyc3599 = true
		}
		yyj3599 := 0
		for ; yyj3599 < yyrr3599; yyj3599++ {
			if r.TryDecodeAsNil() {
				yyv3599[yyj3599] = NodeAddress{}
			} else {
				yyv3600 := &yyv3599[yyj3599]
				yyv3600.CodecDecodeSelf(d)
			}

		}
		if yyrt3599 {
			for ; yyj3599 < yyl3599; yyj3599++ {
				yyv3599 = append(yyv3599, NodeAddress{})
				if r.TryDecodeAsNil() {
					yyv3599[yyj3599] = NodeAddress{}
				} else {
					yyv3601 := &yyv3599[yyj3599]
					yyv3601.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3599 := 0; !r.CheckBreak(); yyj3599++ {
			if yyj3599 >= len(yyv3599) {
				yyv3599 = append(yyv3599, NodeAddress{}) // var yyz3599 NodeAddress
				yyc3599 = true
			}

			if yyj3599 < len(yyv3599) {
				if r.TryDecodeAsNil() {
					yyv3599[yyj3599] = NodeAddress{}
				} else {
					yyv3602 := &yyv3599[yyj3599]
					yyv3602.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3599.End()
	}
	if yyc3599 {
		*v = yyv3599
	}

}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3603, yyv3603 := range v {
		yyk3603.CodecEncodeSelf(e)
		yy3604 := &yyv3603
		yym3605 := z.EncBinary()
		_ = yym3605
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3604) {
		} else if !yym3605 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3604)
		} else {
			z.EncFallback(yy3604)
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3606 := *v
	yyl3606 := r.ReadMapStart()
	yybh3606 := z.DecBasicHandle()
	if yyv3606 == nil {
		yyrl3606, _ := z.DecInferLen(yyl3606, yybh3606.MaxInitLen, 40)
		yyv3606 = make(map[ResourceName]pkg3_resource.Quantity, yyrl3606)
		*v = yyv3606
	}
	var yymk3606 ResourceName
	var yymv3606 pkg3_resource.Quantity
	var yymg3606 bool
	if yybh3606.MapValueReset {
		yymg3606 = true
	}
	if yyl3606 > 0 {
		for yyj3606 := 0; yyj3606 < yyl3606; yyj3606++ {
			if r.TryDecodeAsNil() {
				yymk3606 = ""
			} else {
				yymk3606 = ResourceName(r.DecodeString())
			}

			if yymg3606 {
				yymv3606 = yyv3606[yymk3606]
			} else {
				yymv3606 = pkg3_resource.Quantity{}
			}
			if r.TryDecodeAsNil() {
				yymv3606 = pkg3_resource.Quantity{}
			} else {
				yyv3608 := &yymv3606
				yym3609 := z.DecBinary()
				_ = yym3609
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3608) {
				} else if !yym3609 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3608)
				} else {
					z.DecFallback(yyv3608, false)
				}
			}

			if yyv3606 != nil {
				yyv3606[yymk3606] = yymv3606
			}
		}
	} else if yyl3606 < 0 {
		for yyj3606 := 0; !r.CheckBreak(); yyj3606++ {
			if r.TryDecodeAsNil() {
				yymk3606 = ""
			} else {
				yymk3606 = ResourceName(r.DecodeString())
			}

			if yymg3606 {
				yymv3606 = yyv3606[yymk3606]
			} else {
				yymv3606 = pkg3_resource.Quantity{}
			}
			if r.TryDecodeAsNil() {
				yymv3606 = pkg3_resource.Quantity{}
			} else {
				yyv3611 := &yymv3606
				yym3612 := z.DecBinary()
				_ = yym3612
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3611) {
				} else if !yym3612 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3611)
				} else {
					z.DecFallback(yyv3611, false)
				}
			}

			if yyv3606 != nil {
				yyv3606[yymk3606] = yymv3606
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3613 := range v {
		yy3614 := &yyv3613
		yy3614.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3615 := *v
	yyh3615, yyl3615 := z.DecSliceHelperStart()

	var yyrr3615, yyrl3615 int
	var yyc3615, yyrt3615 bool
	_, _, _ = yyc3615, yyrt3615, yyrl3615
	yyrr3615 = yyl3615

	if yyv3615 == nil {
		if yyrl3615, yyrt3615 = z.DecInferLen(yyl3615, z.DecBasicHandle().MaxInitLen, 456); yyrt3615 {
			yyrr3615 = yyrl3615
		}
		yyv3615 = make([]Node, yyrl3615)
		yyc3615 = true
	}

	if yyl3615 == 0 {
		if len(yyv3615) != 0 {
			yyv3615 = yyv3615[:0]
			yyc3615 = true
		}
	} else if yyl3615 > 0 {

		if yyl3615 > cap(yyv3615) {
			yyrl3615, yyrt3615 = z.DecInferLen(yyl3615, z.DecBasicHandle().MaxInitLen, 456)
			yyv3615 = make([]Node, yyrl3615)
			yyc3615 = true

			yyrr3615 = len(yyv3615)
		} else if yyl3615 != len(yyv3615) {
			yyv3615 = yyv3615[:yyl3615]
			yyc3615 = true
		}
		yyj3615 := 0
		for ; yyj3615 < yyrr3615; yyj3615++ {
			if r.TryDecodeAsNil() {
				yyv3615[yyj3615] = Node{}
			} else {
				yyv3616 := &yyv3615[yyj3615]
				yyv3616.CodecDecodeSelf(d)
			}

		}
		if yyrt3615 {
			for ; yyj3615 < yyl3615; yyj3615++ {
				yyv3615 = append(yyv3615, Node{})
				if r.TryDecodeAsNil() {
					yyv3615[yyj3615] = Node{}
				} else {
					yyv3617 := &yyv3615[yyj3615]
					yyv3617.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3615 := 0; !r.CheckBreak(); yyj3615++ {
			if yyj3615 >= len(yyv3615) {
				yyv3615 = append(yyv3615, Node{}) // var yyz3615 Node
				yyc3615 = true
			}

			if yyj3615 < len(yyv3615) {
				if r.TryDecodeAsNil() {
					yyv3615[yyj3615] = Node{}
				} else {
					yyv3618 := &yyv3615[yyj3615]
					yyv3618.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3615.End()
	}
	if yyc3615 {
		*v = yyv3615
	}

}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3619 := range v {
		yyv3619.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3620 := *v
	yyh3620, yyl3620 := z.DecSliceHelperStart()

	var yyrr3620, yyrl3620 int
	var yyc3620, yyrt3620 bool
	_, _, _ = yyc3620, yyrt3620, yyrl3620
	yyrr3620 = yyl3620

	if yyv3620 == nil {
		if yyrl3620, yyrt3620 = z.DecInferLen(yyl3620, z.DecBasicHandle().MaxInitLen, 16); yyrt3620 {
			yyrr3620 = yyrl3620
		}
		yyv3620 = make([]FinalizerName, yyrl3620)
		yyc3620 = true
	}

	if yyl3620 == 0 {
		if len(yyv3620) != 0 {
			yyv3620 = yyv3620[:0]
			yyc3620 = true
		}
	} else if yyl3620 > 0 {

		if yyl3620 > cap(yyv3620) {
			yyrl3620, yyrt3620 = z.DecInferLen(yyl3620, z.DecBasicHandle().MaxInitLen, 16)

			yyv23620 := yyv3620
			yyv3620 = make([]FinalizerName, yyrl3620)
			if len(yyv3620) > 0 {
				copy(yyv3620, yyv23620[:cap(yyv23620)])
			}
			yyc3620 = true

			yyrr3620 = len(yyv3620)
		} else if yyl3620 != len(yyv3620) {
			yyv3620 = yyv3620[:yyl3620]
			yyc3620 = true
		}
		yyj3620 := 0
		for ; yyj3620 < yyrr3620; yyj3620++ {
			if r.TryDecodeAsNil() {
				yyv3620[yyj3620] = ""
			} else {
				yyv3620[yyj3620] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt3620 {
			for ; yyj3620 < yyl3620; yyj3620++ {
				yyv3620 = append(yyv3620, "")
				if r.TryDecodeAsNil() {
					yyv3620[yyj3620] = ""
				} else {
					yyv3620[yyj3620] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3620 := 0; !r.CheckBreak(); yyj3620++ {
			if yyj3620 >= len(yyv3620) {
				yyv3620 = append(yyv3620, "") // var yyz3620 FinalizerName
				yyc3620 = true
			}

			if yyj3620 < len(yyv3620) {
				if r.TryDecodeAsNil() {
					yyv3620[yyj3620] = ""
				} else {
					yyv3620[yyj3620] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3620.End()
	}
	if yyc3620 {
		*v = yyv3620
	}

}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3624 := range v {
		yy3625 := &yyv3624
		yy3625.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3626 := *v
	yyh3626, yyl3626 := z.DecSliceHelperStart()

	var yyrr3626, yyrl3626 int
	var yyc3626, yyrt3626 bool
	_, _, _ = yyc3626, yyrt3626, yyrl3626
	yyrr3626 = yyl3626

	if yyv3626 == nil {
		if yyrl3626, yyrt3626 = z.DecInferLen(yyl3626, z.DecBasicHandle().MaxInitLen, 232); yyrt3626 {
			yyrr3626 = yyrl3626
		}
		yyv3626 = make([]Namespace, yyrl3626)
		yyc3626 = true
	}

	if yyl3626 == 0 {
		if len(yyv3626) != 0 {
			yyv3626 = yyv3626[:0]
			yyc3626 = true
		}
	} else if yyl3626 > 0 {

		if yyl3626 > cap(yyv3626) {
			yyrl3626, yyrt3626 = z.DecInferLen(yyl3626, z.DecBasicHandle().MaxInitLen, 232)
			yyv3626 = make([]Namespace, yyrl3626)
			yyc3626 = true

			yyrr3626 = len(yyv3626)
		} else if yyl3626 != len(yyv3626) {
			yyv3626 = yyv3626[:yyl3626]
			yyc3626 = true
		}
		yyj3626 := 0
		for ; yyj3626 < yyrr3626; yyj3626++ {
			if r.TryDecodeAsNil() {
				yyv3626[yyj3626] = Namespace{}
			} else {
				yyv3627 := &yyv3626[yyj3626]
				yyv3627.CodecDecodeSelf(d)
			}

		}
		if yyrt3626 {
			for ; yyj3626 < yyl3626; yyj3626++ {
				yyv3626 = append(yyv3626, Namespace{})
				if r.TryDecodeAsNil() {
					yyv3626[yyj3626] = Namespace{}
				} else {
					yyv3628 := &yyv3626[yyj3626]
					yyv3628.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3626 := 0; !r.CheckBreak(); yyj3626++ {
			if yyj3626 >= len(yyv3626) {
				yyv3626 = append(yyv3626, Namespace{}) // var yyz3626 Namespace
				yyc3626 = true
			}

			if yyj3626 < len(yyv3626) {
				if r.TryDecodeAsNil() {
					yyv3626[yyj3626] = Namespace{}
				} else {
					yyv3629 := &yyv3626[yyj3626]
					yyv3629.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3626.End()
	}
	if yyc3626 {
		*v = yyv3626
	}

}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3630 := range v {
		yy3631 := &yyv3630
		yy3631.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3632 := *v
	yyh3632, yyl3632 := z.DecSliceHelperStart()

	var yyrr3632, yyrl3632 int
	var yyc3632, yyrt3632 bool
	_, _, _ = yyc3632, yyrt3632, yyrl3632
	yyrr3632 = yyl3632

	if yyv3632 == nil {
		if yyrl3632, yyrt3632 = z.DecInferLen(yyl3632, z.DecBasicHandle().MaxInitLen, 424); yyrt3632 {
			yyrr3632 = yyrl3632
		}
		yyv3632 = make([]Event, yyrl3632)
		yyc3632 = true
	}

	if yyl3632 == 0 {
		if len(yyv3632) != 0 {
			yyv3632 = yyv3632[:0]
			yyc3632 = true
		}
	} else if yyl3632 > 0 {

		if yyl3632 > cap(yyv3632) {
			yyrl3632, yyrt3632 = z.DecInferLen(yyl3632, z.DecBasicHandle().MaxInitLen, 424)
			yyv3632 = make([]Event, yyrl3632)
			yyc3632 = true

			yyrr3632 = len(yyv3632)
		} else if yyl3632 != len(yyv3632) {
			yyv3632 = yyv3632[:yyl3632]
			yyc3632 = true
		}
		yyj3632 := 0
		for ; yyj3632 < yyrr3632; yyj3632++ {
			if r.TryDecodeAsNil() {
				yyv3632[yyj3632] = Event{}
			} else {
				yyv3633 := &yyv3632[yyj3632]
				yyv3633.CodecDecodeSelf(d)
			}

		}
		if yyrt3632 {
			for ; yyj3632 < yyl3632; yyj3632++ {
				yyv3632 = append(yyv3632, Event{})
				if r.TryDecodeAsNil() {
					yyv3632[yyj3632] = Event{}
				} else {
					yyv3634 := &yyv3632[yyj3632]
					yyv3634.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3632 := 0; !r.CheckBreak(); yyj3632++ {
			if yyj3632 >= len(yyv3632) {
				yyv3632 = append(yyv3632, Event{}) // var yyz3632 Event
				yyc3632 = true
			}

			if yyj3632 < len(yyv3632) {
				if r.TryDecodeAsNil() {
					yyv3632[yyj3632] = Event{}
				} else {
					yyv3635 := &yyv3632[yyj3632]
					yyv3635.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3632.End()
	}
	if yyc3632 {
		*v = yyv3632
	}

}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg6_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3636 := range v {
		yy3637 := &yyv3636
		yym3638 := z.EncBinary()
		_ = yym3638
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3637) {
		} else if !yym3638 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3637)
		} else {
			z.EncFallback(yy3637)
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg6_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3639 := *v
	yyh3639, yyl3639 := z.DecSliceHelperStart()

	var yyrr3639, yyrl3639 int
	var yyc3639, yyrt3639 bool
	_, _, _ = yyc3639, yyrt3639, yyrl3639
	yyrr3639 = yyl3639

	if yyv3639 == nil {
		if yyrl3639, yyrt3639 = z.DecInferLen(yyl3639, z.DecBasicHandle().MaxInitLen, 24); yyrt3639 {
			yyrr3639 = yyrl3639
		}
		yyv3639 = make([]pkg6_runtime.RawExtension, yyrl3639)
		yyc3639 = true
	}

	if yyl3639 == 0 {
		if len(yyv3639) != 0 {
			yyv3639 = yyv3639[:0]
			yyc3639 = true
		}
	} else if yyl3639 > 0 {

		if yyl3639 > cap(yyv3639) {
			yyrl3639, yyrt3639 = z.DecInferLen(yyl3639, z.DecBasicHandle().MaxInitLen, 24)
			yyv3639 = make([]pkg6_runtime.RawExtension, yyrl3639)
			yyc3639 = true

			yyrr3639 = len(yyv3639)
		} else if yyl3639 != len(yyv3639) {
			yyv3639 = yyv3639[:yyl3639]
			yyc3639 = true
		}
		yyj3639 := 0
		for ; yyj3639 < yyrr3639; yyj3639++ {
			if r.TryDecodeAsNil() {
				yyv3639[yyj3639] = pkg6_runtime.RawExtension{}
			} else {
				yyv3640 := &yyv3639[yyj3639]
				yym3641 := z.DecBinary()
				_ = yym3641
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3640) {
				} else if !yym3641 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3640)
				} else {
					z.DecFallback(yyv3640, false)
				}
			}

		}
		if yyrt3639 {
			for ; yyj3639 < yyl3639; yyj3639++ {
				yyv3639 = append(yyv3639, pkg6_runtime.RawExtension{})
				if r.TryDecodeAsNil() {
					yyv3639[yyj3639] = pkg6_runtime.RawExtension{}
				} else {
					yyv3642 := &yyv3639[yyj3639]
					yym3643 := z.DecBinary()
					_ = yym3643
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3642) {
					} else if !yym3643 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv3642)
					} else {
						z.DecFallback(yyv3642, false)
					}
				}

			}
		}

	} else {
		for yyj3639 := 0; !r.CheckBreak(); yyj3639++ {
			if yyj3639 >= len(yyv3639) {
				yyv3639 = append(yyv3639, pkg6_runtime.RawExtension{}) // var yyz3639 pkg6_runtime.RawExtension
				yyc3639 = true
			}

			if yyj3639 < len(yyv3639) {
				if r.TryDecodeAsNil() {
					yyv3639[yyj3639] = pkg6_runtime.RawExtension{}
				} else {
					yyv3644 := &yyv3639[yyj3639]
					yym3645 := z.DecBinary()
					_ = yym3645
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3644) {
					} else if !yym3645 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv3644)
					} else {
						z.DecFallback(yyv3644, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3639.End()
	}
	if yyc3639 {
		*v = yyv3639
	}

}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3646 := range v {
		yy3647 := &yyv3646
		yy3647.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3648 := *v
	yyh3648, yyl3648 := z.DecSliceHelperStart()

	var yyrr3648, yyrl3648 int
	var yyc3648, yyrt3648 bool
	_, _, _ = yyc3648, yyrt3648, yyrl3648
	yyrr3648 = yyl3648

	if yyv3648 == nil {
		if yyrl3648, yyrt3648 = z.DecInferLen(yyl3648, z.DecBasicHandle().MaxInitLen, 56); yyrt3648 {
			yyrr3648 = yyrl3648
		}
		yyv3648 = make([]LimitRangeItem, yyrl3648)
		yyc3648 = true
	}

	if yyl3648 == 0 {
		if len(yyv3648) != 0 {
			yyv3648 = yyv3648[:0]
			yyc3648 = true
		}
	} else if yyl3648 > 0 {

		if yyl3648 > cap(yyv3648) {
			yyrl3648, yyrt3648 = z.DecInferLen(yyl3648, z.DecBasicHandle().MaxInitLen, 56)
			yyv3648 = make([]LimitRangeItem, yyrl3648)
			yyc3648 = true

			yyrr3648 = len(yyv3648)
		} else if yyl3648 != len(yyv3648) {
			yyv3648 = yyv3648[:yyl3648]
			yyc3648 = true
		}
		yyj3648 := 0
		for ; yyj3648 < yyrr3648; yyj3648++ {
			if r.TryDecodeAsNil() {
				yyv3648[yyj3648] = LimitRangeItem{}
			} else {
				yyv3649 := &yyv3648[yyj3648]
				yyv3649.CodecDecodeSelf(d)
			}

		}
		if yyrt3648 {
			for ; yyj3648 < yyl3648; yyj3648++ {
				yyv3648 = append(yyv3648, LimitRangeItem{})
				if r.TryDecodeAsNil() {
					yyv3648[yyj3648] = LimitRangeItem{}
				} else {
					yyv3650 := &yyv3648[yyj3648]
					yyv3650.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3648 := 0; !r.CheckBreak(); yyj3648++ {
			if yyj3648 >= len(yyv3648) {
				yyv3648 = append(yyv3648, LimitRangeItem{}) // var yyz3648 LimitRangeItem
				yyc3648 = true
			}

			if yyj3648 < len(yyv3648) {
				if r.TryDecodeAsNil() {
					yyv3648[yyj3648] = LimitRangeItem{}
				} else {
					yyv3651 := &yyv3648[yyj3648]
					yyv3651.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3648.End()
	}
	if yyc3648 {
		*v = yyv3648
	}

}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3652 := range v {
		yy3653 := &yyv3652
		yy3653.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3654 := *v
	yyh3654, yyl3654 := z.DecSliceHelperStart()

	var yyrr3654, yyrl3654 int
	var yyc3654, yyrt3654 bool
	_, _, _ = yyc3654, yyrt3654, yyrl3654
	yyrr3654 = yyl3654

	if yyv3654 == nil {
		if yyrl3654, yyrt3654 = z.DecInferLen(yyl3654, z.DecBasicHandle().MaxInitLen, 216); yyrt3654 {
			yyrr3654 = yyrl3654
		}
		yyv3654 = make([]LimitRange, yyrl3654)
		yyc3654 = true
	}

	if yyl3654 == 0 {
		if len(yyv3654) != 0 {
			yyv3654 = yyv3654[:0]
			yyc3654 = true
		}
	} else if yyl3654 > 0 {

		if yyl3654 > cap(yyv3654) {
			yyrl3654, yyrt3654 = z.DecInferLen(yyl3654, z.DecBasicHandle().MaxInitLen, 216)
			yyv3654 = make([]LimitRange, yyrl3654)
			yyc3654 = true

			yyrr3654 = len(yyv3654)
		} else if yyl3654 != len(yyv3654) {
			yyv3654 = yyv3654[:yyl3654]
			yyc3654 = true
		}
		yyj3654 := 0
		for ; yyj3654 < yyrr3654; yyj3654++ {
			if r.TryDecodeAsNil() {
				yyv3654[yyj3654] = LimitRange{}
			} else {
				yyv3655 := &yyv3654[yyj3654]
				yyv3655.CodecDecodeSelf(d)
			}

		}
		if yyrt3654 {
			for ; yyj3654 < yyl3654; yyj3654++ {
				yyv3654 = append(yyv3654, LimitRange{})
				if r.TryDecodeAsNil() {
					yyv3654[yyj3654] = LimitRange{}
				} else {
					yyv3656 := &yyv3654[yyj3654]
					yyv3656.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3654 := 0; !r.CheckBreak(); yyj3654++ {
			if yyj3654 >= len(yyv3654) {
				yyv3654 = append(yyv3654, LimitRange{}) // var yyz3654 LimitRange
				yyc3654 = true
			}

			if yyj3654 < len(yyv3654) {
				if r.TryDecodeAsNil() {
					yyv3654[yyj3654] = LimitRange{}
				} else {
					yyv3657 := &yyv3654[yyj3654]
					yyv3657.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3654.End()
	}
	if yyc3654 {
		*v = yyv3654
	}

}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3658 := range v {
		yy3659 := &yyv3658
		yy3659.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3660 := *v
	yyh3660, yyl3660 := z.DecSliceHelperStart()

	var yyrr3660, yyrl3660 int
	var yyc3660, yyrt3660 bool
	_, _, _ = yyc3660, yyrt3660, yyrl3660
	yyrr3660 = yyl3660

	if yyv3660 == nil {
		if yyrl3660, yyrt3660 = z.DecInferLen(yyl3660, z.DecBasicHandle().MaxInitLen, 216); yyrt3660 {
			yyrr3660 = yyrl3660
		}
		yyv3660 = make([]ResourceQuota, yyrl3660)
		yyc3660 = true
	}

	if yyl3660 == 0 {
		if len(yyv3660) != 0 {
			yyv3660 = yyv3660[:0]
			yyc3660 = true
		}
	} else if yyl3660 > 0 {

		if yyl3660 > cap(yyv3660) {
			yyrl3660, yyrt3660 = z.DecInferLen(yyl3660, z.DecBasicHandle().MaxInitLen, 216)
			yyv3660 = make([]ResourceQuota, yyrl3660)
			yyc3660 = true

			yyrr3660 = len(yyv3660)
		} else if yyl3660 != len(yyv3660) {
			yyv3660 = yyv3660[:yyl3660]
			yyc3660 = true
		}
		yyj3660 := 0
		for ; yyj3660 < yyrr3660; yyj3660++ {
			if r.TryDecodeAsNil() {
				yyv3660[yyj3660] = ResourceQuota{}
			} else {
				yyv3661 := &yyv3660[yyj3660]
				yyv3661.CodecDecodeSelf(d)
			}

		}
		if yyrt3660 {
			for ; yyj3660 < yyl3660; yyj3660++ {
				yyv3660 = append(yyv3660, ResourceQuota{})
				if r.TryDecodeAsNil() {
					yyv3660[yyj3660] = ResourceQuota{}
				} else {
					yyv3662 := &yyv3660[yyj3660]
					yyv3662.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3660 := 0; !r.CheckBreak(); yyj3660++ {
			if yyj3660 >= len(yyv3660) {
				yyv3660 = append(yyv3660, ResourceQuota{}) // var yyz3660 ResourceQuota
				yyc3660 = true
			}

			if yyj3660 < len(yyv3660) {
				if r.TryDecodeAsNil() {
					yyv3660[yyj3660] = ResourceQuota{}
				} else {
					yyv3663 := &yyv3660[yyj3660]
					yyv3663.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3660.End()
	}
	if yyc3660 {
		*v = yyv3660
	}

}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3664, yyv3664 := range v {
		yym3665 := z.EncBinary()
		_ = yym3665
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk3664))
		}
		if yyv3664 == nil {
			r.EncodeNil()
		} else {
			yym3666 := z.EncBinary()
			_ = yym3666
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv3664))
			}
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3667 := *v
	yyl3667 := r.ReadMapStart()
	yybh3667 := z.DecBasicHandle()
	if yyv3667 == nil {
		yyrl3667, _ := z.DecInferLen(yyl3667, yybh3667.MaxInitLen, 40)
		yyv3667 = make(map[string][]uint8, yyrl3667)
		*v = yyv3667
	}
	var yymk3667 string
	var yymv3667 []uint8
	var yymg3667 bool
	if yybh3667.MapValueReset {
		yymg3667 = true
	}
	if yyl3667 > 0 {
		for yyj3667 := 0; yyj3667 < yyl3667; yyj3667++ {
			if r.TryDecodeAsNil() {
				yymk3667 = ""
			} else {
				yymk3667 = string(r.DecodeString())
			}

			if yymg3667 {
				yymv3667 = yyv3667[yymk3667]
			} else {
				yymv3667 = nil
			}
			if r.TryDecodeAsNil() {
				yymv3667 = nil
			} else {
				yyv3669 := &yymv3667
				yym3670 := z.DecBinary()
				_ = yym3670
				if false {
				} else {
					*yyv3669 = r.DecodeBytes(*(*[]byte)(yyv3669), false, false)
				}
			}

			if yyv3667 != nil {
				yyv3667[yymk3667] = yymv3667
			}
		}
	} else if yyl3667 < 0 {
		for yyj3667 := 0; !r.CheckBreak(); yyj3667++ {
			if r.TryDecodeAsNil() {
				yymk3667 = ""
			} else {
				yymk3667 = string(r.DecodeString())
			}

			if yymg3667 {
				yymv3667 = yyv3667[yymk3667]
			} else {
				yymv3667 = nil
			}
			if r.TryDecodeAsNil() {
				yymv3667 = nil
			} else {
				yyv3672 := &yymv3667
				yym3673 := z.DecBinary()
				_ = yym3673
				if false {
				} else {
					*yyv3672 = r.DecodeBytes(*(*[]byte)(yyv3672), false, false)
				}
			}

			if yyv3667 != nil {
				yyv3667[yymk3667] = yymv3667
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3674 := range v {
		yy3675 := &yyv3674
		yy3675.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3676 := *v
	yyh3676, yyl3676 := z.DecSliceHelperStart()

	var yyrr3676, yyrl3676 int
	var yyc3676, yyrt3676 bool
	_, _, _ = yyc3676, yyrt3676, yyrl3676
	yyrr3676 = yyl3676

	if yyv3676 == nil {
		if yyrl3676, yyrt3676 = z.DecInferLen(yyl3676, z.DecBasicHandle().MaxInitLen, 216); yyrt3676 {
			yyrr3676 = yyrl3676
		}
		yyv3676 = make([]Secret, yyrl3676)
		yyc3676 = true
	}

	if yyl3676 == 0 {
		if len(yyv3676) != 0 {
			yyv3676 = yyv3676[:0]
			yyc3676 = true
		}
	} else if yyl3676 > 0 {

		if yyl3676 > cap(yyv3676) {
			yyrl3676, yyrt3676 = z.DecInferLen(yyl3676, z.DecBasicHandle().MaxInitLen, 216)
			yyv3676 = make([]Secret, yyrl3676)
			yyc3676 = true

			yyrr3676 = len(yyv3676)
		} else if yyl3676 != len(yyv3676) {
			yyv3676 = yyv3676[:yyl3676]
			yyc3676 = true
		}
		yyj3676 := 0
		for ; yyj3676 < yyrr3676; yyj3676++ {
			if r.TryDecodeAsNil() {
				yyv3676[yyj3676] = Secret{}
			} else {
				yyv3677 := &yyv3676[yyj3676]
				yyv3677.CodecDecodeSelf(d)
			}

		}
		if yyrt3676 {
			for ; yyj3676 < yyl3676; yyj3676++ {
				yyv3676 = append(yyv3676, Secret{})
				if r.TryDecodeAsNil() {
					yyv3676[yyj3676] = Secret{}
				} else {
					yyv3678 := &yyv3676[yyj3676]
					yyv3678.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3676 := 0; !r.CheckBreak(); yyj3676++ {
			if yyj3676 >= len(yyv3676) {
				yyv3676 = append(yyv3676, Secret{}) // var yyz3676 Secret
				yyc3676 = true
			}

			if yyj3676 < len(yyv3676) {
				if r.TryDecodeAsNil() {
					yyv3676[yyj3676] = Secret{}
				} else {
					yyv3679 := &yyv3676[yyj3676]
					yyv3679.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3676.End()
	}
	if yyc3676 {
		*v = yyv3676
	}

}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3680 := range v {
		yy3681 := &yyv3680
		yy3681.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3682 := *v
	yyh3682, yyl3682 := z.DecSliceHelperStart()

	var yyrr3682, yyrl3682 int
	var yyc3682, yyrt3682 bool
	_, _, _ = yyc3682, yyrt3682, yyrl3682
	yyrr3682 = yyl3682

	if yyv3682 == nil {
		if yyrl3682, yyrt3682 = z.DecInferLen(yyl3682, z.DecBasicHandle().MaxInitLen, 64); yyrt3682 {
			yyrr3682 = yyrl3682
		}
		yyv3682 = make([]ComponentCondition, yyrl3682)
		yyc3682 = true
	}

	if yyl3682 == 0 {
		if len(yyv3682) != 0 {
			yyv3682 = yyv3682[:0]
			yyc3682 = true
		}
	} else if yyl3682 > 0 {

		if yyl3682 > cap(yyv3682) {
			yyrl3682, yyrt3682 = z.DecInferLen(yyl3682, z.DecBasicHandle().MaxInitLen, 64)
			yyv3682 = make([]ComponentCondition, yyrl3682)
			yyc3682 = true

			yyrr3682 = len(yyv3682)
		} else if yyl3682 != len(yyv3682) {
			yyv3682 = yyv3682[:yyl3682]
			yyc3682 = true
		}
		yyj3682 := 0
		for ; yyj3682 < yyrr3682; yyj3682++ {
			if r.TryDecodeAsNil() {
				yyv3682[yyj3682] = ComponentCondition{}
			} else {
				yyv3683 := &yyv3682[yyj3682]
				yyv3683.CodecDecodeSelf(d)
			}

		}
		if yyrt3682 {
			for ; yyj3682 < yyl3682; yyj3682++ {
				yyv3682 = append(yyv3682, ComponentCondition{})
				if r.TryDecodeAsNil() {
					yyv3682[yyj3682] = ComponentCondition{}
				} else {
					yyv3684 := &yyv3682[yyj3682]
					yyv3684.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3682 := 0; !r.CheckBreak(); yyj3682++ {
			if yyj3682 >= len(yyv3682) {
				yyv3682 = append(yyv3682, ComponentCondition{}) // var yyz3682 ComponentCondition
				yyc3682 = true
			}

			if yyj3682 < len(yyv3682) {
				if r.TryDecodeAsNil() {
					yyv3682[yyj3682] = ComponentCondition{}
				} else {
					yyv3685 := &yyv3682[yyj3682]
					yyv3685.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3682.End()
	}
	if yyc3682 {
		*v = yyv3682
	}

}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3686 := range v {
		yy3687 := &yyv3686
		yy3687.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3688 := *v
	yyh3688, yyl3688 := z.DecSliceHelperStart()

	var yyrr3688, yyrl3688 int
	var yyc3688, yyrt3688 bool
	_, _, _ = yyc3688, yyrt3688, yyrl3688
	yyrr3688 = yyl3688

	if yyv3688 == nil {
		if yyrl3688, yyrt3688 = z.DecInferLen(yyl3688, z.DecBasicHandle().MaxInitLen, 216); yyrt3688 {
			yyrr3688 = yyrl3688
		}
		yyv3688 = make([]ComponentStatus, yyrl3688)
		yyc3688 = true
	}

	if yyl3688 == 0 {
		if len(yyv3688) != 0 {
			yyv3688 = yyv3688[:0]
			yyc3688 = true
		}
	} else if yyl3688 > 0 {

		if yyl3688 > cap(yyv3688) {
			yyrl3688, yyrt3688 = z.DecInferLen(yyl3688, z.DecBasicHandle().MaxInitLen, 216)
			yyv3688 = make([]ComponentStatus, yyrl3688)
			yyc3688 = true

			yyrr3688 = len(yyv3688)
		} else if yyl3688 != len(yyv3688) {
			yyv3688 = yyv3688[:yyl3688]
			yyc3688 = true
		}
		yyj3688 := 0
		for ; yyj3688 < yyrr3688; yyj3688++ {
			if r.TryDecodeAsNil() {
				yyv3688[yyj3688] = ComponentStatus{}
			} else {
				yyv3689 := &yyv3688[yyj3688]
				yyv3689.CodecDecodeSelf(d)
			}

		}
		if yyrt3688 {
			for ; yyj3688 < yyl3688; yyj3688++ {
				yyv3688 = append(yyv3688, ComponentStatus{})
				if r.TryDecodeAsNil() {
					yyv3688[yyj3688] = ComponentStatus{}
				} else {
					yyv3690 := &yyv3688[yyj3688]
					yyv3690.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3688 := 0; !r.CheckBreak(); yyj3688++ {
			if yyj3688 >= len(yyv3688) {
				yyv3688 = append(yyv3688, ComponentStatus{}) // var yyz3688 ComponentStatus
				yyc3688 = true
			}

			if yyj3688 < len(yyv3688) {
				if r.TryDecodeAsNil() {
					yyv3688[yyj3688] = ComponentStatus{}
				} else {
					yyv3691 := &yyv3688[yyj3688]
					yyv3691.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3688.End()
	}
	if yyc3688 {
		*v = yyv3688
	}

}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3692 := range v {
		yy3693 := &yyv3692
		yy3693.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3694 := *v
	yyh3694, yyl3694 := z.DecSliceHelperStart()

	var yyrr3694, yyrl3694 int
	var yyc3694, yyrt3694 bool
	_, _, _ = yyc3694, yyrt3694, yyrl3694
	yyrr3694 = yyl3694

	if yyv3694 == nil {
		if yyrl3694, yyrt3694 = z.DecInferLen(yyl3694, z.DecBasicHandle().MaxInitLen, 48); yyrt3694 {
			yyrr3694 = yyrl3694
		}
		yyv3694 = make([]DownwardAPIVolumeFile, yyrl3694)
		yyc3694 = true
	}

	if yyl3694 == 0 {
		if len(yyv3694) != 0 {
			yyv3694 = yyv3694[:0]
			yyc3694 = true
		}
	} else if yyl3694 > 0 {

		if yyl3694 > cap(yyv3694) {
			yyrl3694, yyrt3694 = z.DecInferLen(yyl3694, z.DecBasicHandle().MaxInitLen, 48)
			yyv3694 = make([]DownwardAPIVolumeFile, yyrl3694)
			yyc3694 = true

			yyrr3694 = len(yyv3694)
		} else if yyl3694 != len(yyv3694) {
			yyv3694 = yyv3694[:yyl3694]
			yyc3694 = true
		}
		yyj3694 := 0
		for ; yyj3694 < yyrr3694; yyj3694++ {
			if r.TryDecodeAsNil() {
				yyv3694[yyj3694] = DownwardAPIVolumeFile{}
			} else {
				yyv3695 := &yyv3694[yyj3694]
				yyv3695.CodecDecodeSelf(d)
			}

		}
		if yyrt3694 {
			for ; yyj3694 < yyl3694; yyj3694++ {
				yyv3694 = append(yyv3694, DownwardAPIVolumeFile{})
				if r.TryDecodeAsNil() {
					yyv3694[yyj3694] = DownwardAPIVolumeFile{}
				} else {
					yyv3696 := &yyv3694[yyj3694]
					yyv3696.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3694 := 0; !r.CheckBreak(); yyj3694++ {
			if yyj3694 >= len(yyv3694) {
				yyv3694 = append(yyv3694, DownwardAPIVolumeFile{}) // var yyz3694 DownwardAPIVolumeFile
				yyc3694 = true
			}

			if yyj3694 < len(yyv3694) {
				if r.TryDecodeAsNil() {
					yyv3694[yyj3694] = DownwardAPIVolumeFile{}
				} else {
					yyv3697 := &yyv3694[yyj3694]
					yyv3697.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3694.End()
	}
	if yyc3694 {
		*v = yyv3694
	}

}
